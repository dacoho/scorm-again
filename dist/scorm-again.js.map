{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/lodash.debounce/index.js","src/AICC.js","src/BaseAPI.js","src/Scorm12API.js","src/Scorm2004API.js","src/cmi/aicc_cmi.js","src/cmi/common.js","src/cmi/scorm12_cmi.js","src/cmi/scorm2004_cmi.js","src/constants/api_constants.js","src/constants/error_codes.js","src/constants/language_constants.js","src/constants/regex.js","src/constants/response_constants.js","src/exceptions.js","src/exports.js","src/utilities.js"],"names":["debounce","func","wait","options","invokeFunc","time","args","lastArgs","thisArg","lastThis","undefined","lastInvokeTime","result","apply","leadingEdge","timerId","setTimeout","timerExpired","leading","remainingWait","timeSinceLastCall","lastCallTime","timeSinceLastInvoke","maxing","nativeMin","maxWait","shouldInvoke","now","trailingEdge","trailing","cancel","clearTimeout","flush","debounced","isInvoking","arguments","this","TypeError","FUNC_ERROR_TEXT","toNumber","isObject","nativeMax","value","type","isObjectLike","isSymbol","objectToString","call","symbolTag","NAN","other","valueOf","replace","reTrim","isBinary","reIsBinary","test","reIsOctal","freeParseInt","slice","reIsBadHex","parseInt","freeGlobal","global","Object","freeSelf","self","root","Function","objectProto","prototype","toString","Math","max","min","Date","module","exports","_Scorm12API2","_interopRequireDefault","require","_aicc_cmi","_scorm12_cmi","AICC","settings","_this","_classCallCheck","finalSettings","_objectSpread","mastery_override","_super","cmi","CMI","nav","NAV","CMIElement","foundFirstIndex","newChild","_get","_getPrototypeOf","stringMatches","CMIEvaluationCommentsObject","CMITriesObject","CMIAttemptRecordsObject","newAPI","Scorm12API","_common","_exceptions","_error_codes2","_api_constants","_utilities","_lodash","global_constants","APIConstants","scorm12_error_codes","ErrorCodes","scorm12","BaseAPI","error_codes","_timeout","set","writable","_error_codes","_settings","autocommit","autocommitSeconds","asyncCommit","sendBeaconCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","LOG_LEVEL_ERROR","selfReportSessionTime","alwaysSendTotalTime","responseHandler","xhr","JSON","parse","responseText","hasOwnProperty","status","SCORM_TRUE","errorCode","SCORM_FALSE","requestHandler","params","_defineProperty","constructor","currentState","STATE_NOT_INITIALIZED","lastError","NO_ERROR","listenerArray","_classPrivateFieldSet","apiLogLevel","callbackName","initializeMessage","terminationMessage","returnValue","isInitialized","throwSCORMError","_classPrivateFieldGet","INITIALIZED","isTerminated","TERMINATED","setStartTime","STATE_INITIALIZED","processListeners","apiLog","LOG_LEVEL_INFO","clearSCORMError","checkTerminated","id","concat","floor","random","checkState","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","STATE_TERMINATED","storeData","e","ValidationError","errorMessage","message","console","error","GENERAL","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","getCMIValue","commitCallback","String","STORE_BEFORE_INIT","STORE_AFTER_TERM","setCMIValue","scheduleCommit","clearScheduledCommit","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","CMIErrorCode","getLmsErrorMessageDetails","beforeInitError","afterTermError","isNotInitialized","functionName","logMessage","messageLevel","commitData","_typeof","formatMessage","LOG_LEVEL_WARNING","warn","info","LOG_LEVEL_DEBUG","debug","log","logObject","date","toISOString","messageString","fillChars","length","j","str","tester","match","refObject","attribute","getOwnPropertyDescriptor","getPrototypeOf","_errorNumber","_detail","Error","_CMIElement","_value","methodName","scorm2004","structure","split","invalidErrorMessage","invalidErrorCode","UNDEFINED_DATA_MODEL","i","substr","_isTargetValid","READ_ONLY_ELEMENT","_checkObjectHasProperty","validateCorrectResponse","CMIArray","index","isNaN","item","childArray","getChildElement","initialized","initialize","push","_foundFirstIndex","uninitializedErrorMessage","target","VALUE_NOT_INITIALIZED","CHILDREN_ERROR","COUNT_ERROR","listenerName","callback","listenerFunctions","listenerSplit","_ret","v","removeIndex","findIndex","obj","splice","_this2","_ret2","filter","listener","functionsMatch","listenerHasCMIElement","CMIElementsMatch","substring","indexOf","errorNumber","success","_calculateTotalTime","json","testPattern","a","c","a_pattern","c_match","a_match","a_num","Number","c_num","_this3","int_pattern","obj_pattern","keys","map","key","sort","_ref","_ref2","_ref3","_slicedToArray","_ref4","forEach","element","loadFromJSON","unflatten","startingData","currentCMIElement","stringify","renderCMIToJSONString","_terminateCommit","url","_this4","immediate","process","genericError","blob","stringParams","headers","Array","join","Blob","navigator","sendBeacon","httpReq","XMLHttpRequest","open","setRequestHeader","send","onload","onerror","_result","_result2","when","ScheduledCommit","API","_API","_cancelled","_timeout2","_callback","wrapper","bind","commit","_BaseAPI2","Utilities","_interopRequireWildcard","scorm12_constants","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","terminate","event","getValue","setValue","getLastError","getErrorString","getDiagnostic","_commonSetCMIValue","_commonGetCMIValue","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","detail","basicMessage","detailMessage","error_descriptions","terminateCommit","cmiExport","renderCMIToJSONObject","core","total_time","getCurrentTotalTime","session_time","getCurrentSessionTime","flattened","flatten","commitId","originalStatus","lesson_status","lesson_mode","credit","student_data","mastery_score","score","raw","parseFloat","_this$startingData","_this$startingData$cm","_this$startingData$cm2","commitObject","renderCommitCMI","processHttpRequest","_scorm2004_cmi","_response_constants","_language_constants","_regex","scorm2004_constants","scorm2004_error_codes","correct_responses","Responses","correct","scorm2004_regex","Regex","Scorm2004API","_version","_assertThisInitialized","correct_response","current_index","found","count","_count","adl","ADL","Initialize","Terminate","lmsTerminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","request","parts","interaction","interactions","checkDuplicateChoiceResponse","response_type","checkValidResponseType","GENERAL_SET_FAILURE","DEPENDENCY_NOT_ESTABLISHED","CMICommentsObject","interaction_type","nodes","delimiter","checkCorrectResponseValue","interaction_count","response","pattern","pattern_index","limit","duplicate","checkDuplicatedPattern","formatRegex","RegExp","format","removeCorrectResponsePrefixes","delimiter2","values","matches","format2","TYPE_MISMATCH","unique","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","CMILangcr","lang","ValidLanguages","toLowerCase","_this$startingData$ad","_this$startingData$ad2","mode","completion_threshold","progress_measure","completion_status","scaled_passing_score","scaled","success_status","navRequest","encodeURIComponent","Scorm12CMI","aicc_constants","aicc","aicc_regex","cmi_children","student_preference","AICCStudentPreferences","AICCCMIStudentData","student_demographics","CMIStudentDemographics","evaluation","CMIEvaluation","paths","CMIPaths","_this$student_prefere","_this$student_data","_this$student_demogra","_this$evaluation","_this$paths","jsonString","suspend_data","launch_data","comments","comments_from_lms","objectives","_super2","CMIEvaluationComments","_this$comments","BaseCMI","_super3","children","comments_children","INVALID_SET_VALUE","_super4","student_preference_children","_lesson_type","_text_color","_text_location","_text_size","_video","windows","_this$windows","lesson_type","check12ValidFormat","CMIString256","text_color","text_location","text_size","video","audio","language","speed","text","CMIStudentPreference","_super5","student_data_children","_tries_during_lesson","tries","CMITries","_this$tries","tries_during_lesson","throwReadOnlyError","max_time_allowed","time_limit_action","CMIStudentData","_this5","_super6","_children","student_demographics_children","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","class","_super7","paths_children","CMIPathsObject","_this6","_super8","_location_id","_date","_time","_status","_why_left","_time_in_element","location_id","CMITime","CMIStatus2","why_left","time_in_element","_super9","tries_children","_this7","_super10","_status2","_time2","CMIScore","score_children","score_range","invalidTypeCode","invalidTypeMessage","invalidRangeCode","VALUE_OUT_OF_RANGE","invalidRangeMessage","_this$score","CMIAttemptRecords","_super11","attempt_records_children","_this8","_super12","_lesson_status","_this$score2","_this9","_super13","_content","_location","_time3","content","location","checkValidFormat","regexPattern","allowEmptyString","checkValidRange","rangePattern","ranges","scorm12_regex","_initialized","_start_time","getTime","decimalRegex","_children2","_score_range","_invalid_error_code","_invalid_error_message","_invalid_type_code","_invalid_type_message","_invalid_range_code","_invalid_range_message","_decimal_regex","_raw","_min","_max","CMIDecimal","_errorCode","_errorMessage","_children3","throwWriteOnlyError","WRITE_ONLY_ELEMENT","throwInvalidValueError","check12ValidRange","_version2","_launch_data","_comments","_comments_from_lms","CMICore","CMIObjectives","CMIInteractions","_this$core","_this$objectives","_this$interactions","_this$core2","CMIString4096","start_time","core_children","_student_id","_student_name","_lesson_location","_credit","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","student_id","student_name","lesson_location","CMIStatus","entry","exit","CMIExit","CMITimespan","sessionTime","startTime","seconds","Util","getSecondsAsHHMMSS","addHHMMSSTimeStrings","objectives_children","_children4","_mastery_score","_max_time_allowed","_time_limit_action","_children5","_audio","_language","_speed","_text","CMISInteger","audio_range","speed_range","text_range","interactions_children","_id","_type","_weighting","_student_response","_latency","correct_responses_children","_this$objectives2","_this$correct_respons","CMIIdentifier","CMIType","weighting","weighting_range","student_response","CMIFeedback","CMIResult","latency","_id2","_id3","_pattern","_event","NAVEvent","throwTypeMismatchError","throwDependencyNotEstablishedError","throwGeneralSetError","check2004ValidFormat","check2004ValidRange","learner_responses","learner","_completion_status","_completion_threshold","_learner_id","_learner_name","_mode","_progress_measure","_scaled_passing_score","_success_status","learner_preference","CMILearnerPreference","Scorm2004CMIScore","comments_from_learner","CMICommentsFromLearner","CMICommentsFromLMS","_this$learner_prefere","_this$comments_from_l","_this$comments_from_l2","CMICStatus","learner_id","learner_name","CMIString1000","progress_range","CMISStatus","CMIString64000","getSecondsAsISODuration","addTwoDurations","_audio_level","_delivery_speed","_audio_captioning","audio_level","CMILang","delivery_speed","audio_captioning","_timestamp","_learner_response","_description","CMILongIdentifier","timestamp","learner_response","description","CMILangString250","_success_status2","_completion_status2","_progress_measure2","_description2","_scaled","scaled_range","readOnlyAfterInit","_comment","_location2","_timestamp2","_readOnlyAfterInit","comment","CMILangString4000","CMIString250","ADLNav","_this$nav","_this10","_super14","_request","request_valid","ADLNavRequestValid","_this$request_valid","_this11","_super15","_continue","_previous","_temp","_target","_temp2","_","previous","continue","LOG_LEVEL_NONE","101","201","202","203","301","401","402","403","404","405","407","408","0","102","103","104","111","112","113","122","123","132","133","142","143","351","391","406","INITIALIZATION_FAILED","TERMINATION_FAILURE","ARGUMENT_ERROR","GENERAL_GET_FAILURE","GENERAL_COMMIT_FAILURE","UNIMPLEMENTED_ELEMENT","MULTIPLE_TERMINATIONS","aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mo","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","sh","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu","aar","abk","ave","afr","aka","amh","arg","ara","asm","ava","aym","aze","bak","bel","bul","bih","bis","bam","ben","tib","bod","bre","bos","cat","che","cha","cos","cre","cze","ces","chu","chv","wel","cym","dan","ger","deu","div","dzo","ewe","gre","ell","eng","epo","spa","est","baq","eus","per","fas","ful","fin","fij","fao","fre","fra","fry","gle","gla","glg","grn","guj","glv","hau","heb","hin","hmo","hrv","hat","hun","arm","hye","her","ina","ind","ile","ibo","iii","ipk","ido","ice","isl","ita","iku","jpn","jav","geo","kat","kon","kik","kua","kaz","kal","khm","kan","kor","kau","kas","kur","kom","cor","kir","lat","ltz","lug","lim","lin","lao","lit","lub","lav","mlg","mah","mao","mri","mac","mkd","mal","mon","mol","mar","may","msa","mlt","bur","mya","nau","nob","nde","nep","ndo","dut","nld","nno","nor","nbl","nya","oci","oji","orm","ori","oss","pan","pli","pol","pus","por","que","roh","run","rum","ron","rus","kin","san","srd","snd","sme","sag","slo","sin","slk","slv","smo","sna","som","alb","sqi","srp","ssw","sot","sun","swe","swa","tam","tel","tgk","tha","tir","tuk","tgl","tsn","ton","tur","tso","tat","twi","tah","uig","ukr","urd","uzb","ven","vie","vol","wln","wol","xho","yid","yor","zha","chi","zho","zul","CMIInteger","CMIIndex","CMIString200","CMIString4000","CMILangString250cr","CMIShortIdentifier","CMIIndexStore","NAVBoolean","NAVTarget","true-false","choice","fill-in","long-fill-in","matching","performance","sequencing","likert","numeric","_len","rest","_key","_Scorm2004API","_Scorm12API","_AICC","window","totalSeconds","hours","SECONDS_PER_HOUR","dateObj","minutes","getUTCMinutes","getSeconds","msStr","countDecimals","toFixed","duration","remainder","designations","sign","current_seconds","getTimeAsSeconds","timeString","timeRegex","getDurationAsSeconds","durationRegex","exec","years","days","first","second","data","recurse","cur","prop","isArray","l","isEmpty","p","regex","m","num","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_DAY"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","// @flow\nimport Scorm12API from './Scorm12API';\nimport {\n  CMI,\n  CMIAttemptRecordsObject,\n  CMIEvaluationCommentsObject,\n  CMITriesObject,\n} from './cmi/aicc_cmi';\nimport {NAV} from './cmi/scorm12_cmi';\n\n/**\n * The AICC API class\n */\nexport default class AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (this.stringMatches(CMIElement, 'cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+')) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (this.stringMatches(CMIElement,\n          'cmi\\\\.student_data\\\\.tries\\\\.\\\\d+')) {\n        newChild = new CMITriesObject();\n      } else if (this.stringMatches(CMIElement,\n          'cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+')) {\n        newChild = new CMIAttemptRecordsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n","// @flow\nimport { CMIArray } from './cmi/common'\nimport { ValidationError } from './exceptions'\nimport ErrorCodes from './constants/error_codes'\nimport APIConstants from './constants/api_constants'\nimport { unflatten } from './utilities'\nimport debounce from 'lodash.debounce'\n\nconst global_constants = APIConstants.global\nconst scorm12_error_codes = ErrorCodes.scorm12\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on it's own.\n */\nexport default class BaseAPI {\n    #timeout\n    #error_codes\n    #settings = {\n        autocommit: false,\n        autocommitSeconds: 10,\n        asyncCommit: false,\n        sendBeaconCommit: false,\n        lmsCommitUrl: false,\n        dataCommitFormat: 'json', // valid formats are 'json' or 'flattened', 'params'\n        commitRequestDataType: 'application/json;charset=UTF-8',\n        autoProgress: false,\n        logLevel: global_constants.LOG_LEVEL_ERROR,\n        selfReportSessionTime: false,\n        alwaysSendTotalTime: false,\n        responseHandler: function (xhr) {\n            let result\n            if (typeof xhr !== 'undefined') {\n                result = JSON.parse(xhr.responseText)\n                if (result === null || !{}.hasOwnProperty.call(result, 'result')) {\n                    result = {}\n                    if (xhr.status === 200) {\n                        result.result = global_constants.SCORM_TRUE\n                        result.errorCode = 0\n                    } else {\n                        result.result = global_constants.SCORM_FALSE\n                        result.errorCode = 101\n                    }\n                }\n            }\n            return result\n        },\n        requestHandler: function (params) {\n            return params\n        },\n    }\n    cmi\n    startingData: {}\n\n    /**\n     * Constructor for Base API class. Sets some shared API fields, as well as\n     * sets up options for the API.\n     * @param {object} error_codes\n     * @param {object} settings\n     */\n    constructor(error_codes, settings) {\n        if (new.target === BaseAPI) {\n            throw new TypeError('Cannot construct BaseAPI instances directly')\n        }\n        this.currentState = global_constants.STATE_NOT_INITIALIZED\n        this.lastError = global_constants.NO_ERROR\n        this.listenerArray = []\n\n        this.#timeout = null\n        this.#error_codes = error_codes\n\n        this.settings = settings\n        this.apiLogLevel = this.settings.logLevel\n        this.selfReportSessionTime = this.settings.selfReportSessionTime\n    }\n\n    /**\n     * Initialize the API\n     * @param {string} callbackName\n     * @param {string} initializeMessage\n     * @param {string} terminationMessage\n     * @return {string}\n     */\n    initialize(callbackName: String, initializeMessage?: String, terminationMessage?: String) {\n        let returnValue = global_constants.SCORM_FALSE\n\n        if (this.isInitialized()) {\n            this.throwSCORMError(this.#error_codes.INITIALIZED, initializeMessage)\n        } else if (this.isTerminated()) {\n            this.throwSCORMError(this.#error_codes.TERMINATED, terminationMessage)\n        } else {\n            if (this.selfReportSessionTime) {\n                this.cmi.setStartTime()\n            }\n\n            this.currentState = global_constants.STATE_INITIALIZED\n            this.lastError = global_constants.NO_ERROR\n            returnValue = global_constants.SCORM_TRUE\n            this.processListeners(callbackName)\n        }\n\n        this.apiLog(callbackName, null, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n        this.clearSCORMError(returnValue)\n\n        return returnValue\n    }\n\n    /**\n     * Getter for #error_codes\n     * @return {object}\n     */\n    get error_codes() {\n        return this.#error_codes\n    }\n\n    /**\n     * Getter for #settings\n     * @return {object}\n     */\n    get settings() {\n        return this.#settings\n    }\n\n    /**\n     * Setter for #settings\n     * @param {object} settings\n     */\n    set settings(settings: Object) {\n        this.#settings = { ...this.#settings, ...settings }\n    }\n\n    /**\n     * Terminates the current run of the API\n     * @param {string} callbackName\n     * @param {boolean} checkTerminated\n     * @return {string}\n     */\n    terminate(callbackName, checkTerminated) {\n        const id = `${Math.floor(Math.random() * 100)}${Date.now()}`\n        let returnValue = global_constants.SCORM_FALSE\n\n        if (\n            this.checkState(\n                checkTerminated,\n                this.#error_codes.TERMINATION_BEFORE_INIT,\n                this.#error_codes.MULTIPLE_TERMINATION\n            )\n        ) {\n            this.currentState = global_constants.STATE_TERMINATED\n\n            try {\n                const result = this.storeData(callbackName, true, id)\n                if (\n                    !this.settings.sendBeaconCommit &&\n                    !this.settings.asyncCommit &&\n                    typeof result.errorCode !== 'undefined' &&\n                    result.errorCode > 0\n                ) {\n                    this.throwSCORMError(result.errorCode)\n                }\n                returnValue =\n                    typeof result !== 'undefined' && result.result ? result.result : global_constants.SCORM_FALSE\n\n                if (checkTerminated) this.lastError = global_constants.NO_ERROR\n\n                returnValue = global_constants.SCORM_TRUE\n                this.processListeners(callbackName)\n            } catch (e) {\n                if (e instanceof ValidationError) {\n                    this.lastError = {\n                        errorCode: e.errorCode,\n                        errorMessage: e.message,\n                    }\n                    returnValue = global_constants.SCORM_FALSE\n                } else {\n                    if (e.message) {\n                        console.error(e.message)\n                    } else {\n                        console.error(e)\n                    }\n                    this.throwSCORMError(this.#error_codes.GENERAL)\n                }\n            }\n        }\n        this.apiLog(callbackName, id, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n        this.clearSCORMError(returnValue)\n\n        return returnValue\n    }\n\n    /**\n     * Get the value of the CMIElement.\n     *\n     * @param {string} callbackName\n     * @param {boolean} checkTerminated\n     * @param {string} CMIElement\n     * @return {string}\n     */\n    getValue(callbackName, checkTerminated, CMIElement) {\n        let returnValue = global_constants.SCORM_FALSE\n\n        if (this.checkState(\n                checkTerminated,\n                this.#error_codes.RETRIEVE_BEFORE_INIT,\n                this.#error_codes.RETRIEVE_AFTER_TERM\n            )\n        ) {\n            if (checkTerminated) this.lastError = global_constants.NO_ERROR\n            \n            try {\n                returnValue = this.getCMIValue(CMIElement)\n            } catch (e) {\n                if (e instanceof ValidationError) {\n                    this.lastError = {\n                        errorCode: e.errorCode,\n                        errorMessage: e.message,\n                    }\n                    returnValue = global_constants.SCORM_FALSE\n                } else {\n                    if (e.message) {\n                        console.error(e.message)\n                    } else {\n                        console.error(e)\n                    }\n                    this.throwSCORMError(this.#error_codes.GENERAL)\n                }\n            }\n            \n            this.processListeners(callbackName, CMIElement)\n        }\n\n        this.apiLog(callbackName, CMIElement, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n        this.clearSCORMError(returnValue)\n\n        return returnValue\n    }\n\n    /**\n     * Sets the value of the CMIElement.\n     *\n     * @param {string} callbackName\n     * @param {string} commitCallback\n     * @param {boolean} checkTerminated\n     * @param {string} CMIElement\n     * @param {*} value\n     * @return {string}\n     */\n    setValue(callbackName, commitCallback, checkTerminated, CMIElement, value) {\n        if (value !== undefined) {\n            value = String(value)\n        }\n        let returnValue = global_constants.SCORM_FALSE\n\n        if (this.checkState(checkTerminated, this.#error_codes.STORE_BEFORE_INIT, this.#error_codes.STORE_AFTER_TERM)) {\n            if (checkTerminated) this.lastError = global_constants.NO_ERROR\n            try {\n                returnValue = this.setCMIValue(CMIElement, value)\n            } catch (e) {\n                if (e instanceof ValidationError) {\n                    this.lastError = {\n                        errorCode: e.errorCode,\n                        errorMessage: e.message,\n                    }\n                    returnValue = global_constants.SCORM_FALSE\n                } else {\n                    if (e.message) {\n                        console.error(e.message)\n                    } else {\n                        console.error(e)\n                    }\n                    this.throwSCORMError(this.#error_codes.GENERAL)\n                }\n            }\n            this.processListeners(callbackName, CMIElement, value)\n        }\n\n        if (returnValue === undefined) {\n            returnValue = global_constants.SCORM_FALSE\n        }\n\n        // If we didn't have any errors while setting the data, go ahead and\n        // schedule a commit, if autocommit is turned on\n        if (String(this.lastError.errorCode) === '0') {\n            if (this.settings.autocommit && !this.#timeout) {\n                this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback)\n            }\n        }\n\n        this.apiLog(\n            callbackName,\n            `${CMIElement} : ${value}`,\n            'returned: ' + returnValue,\n            global_constants.LOG_LEVEL_INFO\n        )\n        this.clearSCORMError(returnValue)\n\n        return returnValue\n    }\n\n    /**\n     * Orders LMS to store all content parameters\n     * @param {string} callbackName\n     * @param {boolean} checkTerminated\n     * @return {string}\n     */\n    commit(callbackName, checkTerminated) {\n        this.clearScheduledCommit()\n        const id = `${Math.floor(Math.random() * 100)}${Date.now()}`\n        let returnValue = global_constants.SCORM_FALSE\n\n        if (\n            this.checkState(checkTerminated, this.#error_codes.COMMIT_BEFORE_INIT, this.#error_codes.COMMIT_AFTER_TERM)\n        ) {\n            try {\n                const result = this.storeData(callbackName, false, id)\n                if (\n                    !this.settings.sendBeaconCommit &&\n                    !this.settings.asyncCommit &&\n                    result.errorCode &&\n                    result.errorCode > 0\n                ) {\n                    this.throwSCORMError(result.errorCode)\n                }\n                returnValue =\n                    typeof result !== 'undefined' && result.result ? result.result : global_constants.SCORM_FALSE\n\n                if (checkTerminated) this.lastError = global_constants.NO_ERROR\n\n                this.processListeners(callbackName)\n            } catch (e) {\n                if (e instanceof ValidationError) {\n                    this.lastError = {\n                        errorCode: e.errorCode,\n                        errorMessage: e.message,\n                    }\n                    returnValue = global_constants.SCORM_FALSE\n                } else {\n                    if (e.message) {\n                        console.error(e.message)\n                    } else {\n                        console.error(e)\n                    }\n                    this.throwSCORMError(this.#error_codes.GENERAL)\n                }\n            }\n        }\n        this.apiLog(callbackName, id, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n        this.clearSCORMError(returnValue)\n\n        return returnValue\n    }\n\n    /**\n     * Returns last error code\n     * @param {string} callbackName\n     * @return {string}\n     */\n    getLastError(callbackName) {\n        const returnValue = String(this.lastError.errorCode)\n\n        this.processListeners(callbackName)\n\n        this.apiLog(callbackName, null, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n\n        return returnValue\n    }\n\n    /**\n     * Returns the errorNumber error description\n     *\n     * @param {string} callbackName\n     * @param {(string|number)} CMIErrorCode\n     * @return {string}\n     */\n    getErrorString(callbackName: String, CMIErrorCode) {\n        let returnValue = ''\n\n        if (CMIErrorCode !== null && CMIErrorCode !== '') {\n            returnValue = this.getLmsErrorMessageDetails(CMIErrorCode)\n            this.processListeners(callbackName)\n        }\n\n        this.apiLog(callbackName, null, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n\n        return returnValue\n    }\n\n    /**\n     * Returns a comprehensive description of the errorNumber error.\n     *\n     * @param {string} callbackName\n     * @param {(string|number)} CMIErrorCode\n     * @return {string}\n     */\n    getDiagnostic(callbackName: String, CMIErrorCode) {\n        let returnValue = ''\n\n        if (CMIErrorCode !== null && CMIErrorCode !== '') {\n            returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true)\n            this.processListeners(callbackName)\n        }\n\n        this.apiLog(callbackName, null, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n\n        return returnValue\n    }\n\n    /**\n     * Checks the LMS state and ensures it has been initialized.\n     *\n     * @param {boolean} checkTerminated\n     * @param {number} beforeInitError\n     * @param {number} afterTermError\n     * @return {boolean}\n     */\n    checkState(checkTerminated: boolean, beforeInitError: number, afterTermError?: number) {\n        if (this.isNotInitialized()) {\n            this.throwSCORMError(beforeInitError)\n            return false\n        } else if (checkTerminated && this.isTerminated()) {\n            this.throwSCORMError(afterTermError)\n            return false\n        }\n\n        return true\n    }\n\n    /**\n     * Logging for all SCORM actions\n     *\n     * @param {string} functionName\n     * @param {string} CMIElement\n     * @param {string} logMessage\n     * @param {number}messageLevel\n     */\n    apiLog(functionName, CMIElement, logMessage, messageLevel) {\n        let commitData\n        if (typeof CMIElement == 'object') {\n            commitData = CMIElement\n            CMIElement = ''\n        }\n        logMessage = this.formatMessage(functionName, CMIElement, logMessage)\n        if (messageLevel >= this.apiLogLevel) {\n            switch (messageLevel) {\n                case global_constants.LOG_LEVEL_ERROR:\n                    console.error(logMessage)\n                    break\n                case global_constants.LOG_LEVEL_WARNING:\n                    console.warn(logMessage)\n                    break\n                case global_constants.LOG_LEVEL_INFO:\n                    console.info(logMessage)\n                    break\n                case global_constants.LOG_LEVEL_DEBUG:\n                    if (console.debug) {\n                        console.debug(logMessage)\n                    } else {\n                        console.log(logMessage)\n                    }\n                    break\n            }\n        }\n        const logObject = {\n            functionName,\n            date: new Date().toISOString(),\n            message: logMessage,\n            commitData: commitData,\n            error: `(${this.lastError.errorMessage})`,\n        }\n        this.processListeners('apiLog', CMIElement, logObject)\n    }\n\n    /**\n     * Formats the SCORM messages for easy reading\n     *\n     * @param {string} functionName\n     * @param {string} CMIElement\n     * @param {string} message\n     * @return {string}\n     */\n    formatMessage(functionName, CMIElement, message) {\n        CMIElement = CMIElement || ''\n        let messageString = ''\n        messageString += functionName\n        if (CMIElement) {\n            messageString += ' : '\n        }\n        const CMIElementBaseLength = 70\n        messageString += CMIElement\n\n        const fillChars = CMIElementBaseLength - messageString.length\n\n        for (let j = 0; j < fillChars; j++) {\n            messageString += ' '\n        }\n\n        if (message) {\n            messageString += message\n        }\n\n        return messageString\n    }\n\n    /**\n     * Checks to see if {str} contains {tester}\n     *\n     * @param {string} str String to check against\n     * @param {string} tester String to check for\n     * @return {boolean}\n     */\n    stringMatches(str: String, tester: String) {\n        return str && tester && str.match(tester)\n    }\n\n    /**\n     * Check to see if the specific object has the given property\n     * @param {*} refObject\n     * @param {string} attribute\n     * @return {boolean}\n     * @private\n     */\n    _checkObjectHasProperty(refObject, attribute: String) {\n        return (\n            Object.hasOwnProperty.call(refObject, attribute) ||\n            Object.getOwnPropertyDescriptor(Object.getPrototypeOf(refObject), attribute) ||\n            attribute in refObject\n        )\n    }\n\n    /**\n     * Returns the message that corresponds to errorNumber\n     * APIs that inherit BaseAPI should override this function\n     *\n     * @param {(string|number)} _errorNumber\n     * @param {boolean} _detail\n     * @return {string}\n     * @abstract\n     */\n    getLmsErrorMessageDetails(_errorNumber, _detail) {\n        throw new Error('The getLmsErrorMessageDetails method has not been implemented')\n    }\n\n    /**\n     * Gets the value for the specific element.\n     * APIs that inherit BaseAPI should override this function\n     *\n     * @param {string} _CMIElement\n     * @return {string}\n     * @abstract\n     */\n    getCMIValue(_CMIElement) {\n        throw new Error('The getCMIValue method has not been implemented')\n    }\n\n    /**\n     * Sets the value for the specific element.\n     * APIs that inherit BaseAPI should override this function\n     *\n     * @param {string} _CMIElement\n     * @param {any} _value\n     * @return {string}\n     * @abstract\n     */\n    setCMIValue(_CMIElement, _value) {\n        throw new Error('The setCMIValue method has not been implemented')\n    }\n\n    /**\n     * Shared API method to set a valid for a given element.\n     *\n     * @param {string} methodName\n     * @param {boolean} scorm2004\n     * @param {string} CMIElement\n     * @param {*} value\n     * @return {string}\n     */\n    _commonSetCMIValue(methodName: String, scorm2004: boolean, CMIElement, value) {\n        if (!CMIElement || CMIElement === '') {\n            return global_constants.SCORM_FALSE\n        }\n\n        const structure = CMIElement.split('.')\n        let refObject = this\n        let returnValue = global_constants.SCORM_FALSE\n        let foundFirstIndex = false\n\n        const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`\n        const invalidErrorCode = scorm2004 ? this.#error_codes.UNDEFINED_DATA_MODEL : this.#error_codes.GENERAL\n\n        for (let i = 0; i < structure.length; i++) {\n            const attribute = structure[i]\n            if (i === structure.length - 1) {\n                if (\n                    scorm2004 &&\n                    attribute.substr(0, 8) === '{target=' &&\n                    typeof refObject._isTargetValid == 'function'\n                ) {\n                    this.throwSCORMError(this.#error_codes.READ_ONLY_ELEMENT)\n                } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n                    this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                } else {\n                    if (this.isInitialized() && this.stringMatches(CMIElement, '\\\\.correct_responses\\\\.\\\\d+')) {\n                        this.validateCorrectResponse(CMIElement, value)\n                    }\n\n                    if (!scorm2004 || this.lastError.errorCode === 0) {\n                        refObject[attribute] = value\n                        returnValue = global_constants.SCORM_TRUE\n                    }\n                }\n            } else {\n                refObject = refObject[attribute]\n                if (!refObject) {\n                    this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                    break\n                }\n\n                if (refObject instanceof CMIArray) {\n                    const index = parseInt(structure[i + 1], 10)\n                    // SCO is trying to set an item on an array\n                    if (!isNaN(index)) {\n                        const item = refObject.childArray[index]\n\n                        if (item) {\n                            refObject = item\n                            foundFirstIndex = true\n                        } else {\n                            const newChild = this.getChildElement(CMIElement, value, foundFirstIndex)\n                            foundFirstIndex = true\n\n                            if (!newChild) {\n                                this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                            } else {\n                                if (refObject.initialized) newChild.initialize()\n\n                                refObject.childArray.push(newChild)\n                                refObject = newChild\n                            }\n                        }\n\n                        // Have to update i value to skip the array position\n                        i++\n                    }\n                }\n            }\n        }\n\n        if (returnValue === global_constants.SCORM_FALSE) {\n            this.apiLog(\n                methodName,\n                null,\n                `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n                global_constants.LOG_LEVEL_WARNING\n            )\n        }\n\n        return returnValue\n    }\n\n    /**\n     * Abstract method for validating that a response is correct.\n     *\n     * @param {string} _CMIElement\n     * @param {*} _value\n     */\n    validateCorrectResponse(_CMIElement, _value) {\n        // just a stub method\n    }\n\n    /**\n     * Gets or builds a new child element to add to the array.\n     * APIs that inherit BaseAPI should override this method.\n     *\n     * @param {string} _CMIElement - unused\n     * @param {*} _value - unused\n     * @param {boolean} _foundFirstIndex - unused\n     * @return {*}\n     * @abstract\n     */\n    getChildElement(_CMIElement, _value, _foundFirstIndex) {\n        throw new Error('The getChildElement method has not been implemented')\n    }\n\n    /**\n     * Gets a value from the CMI Object\n     *\n     * @param {string} methodName\n     * @param {boolean} scorm2004\n     * @param {string} CMIElement\n     * @return {*}\n     */\n    _commonGetCMIValue(methodName: String, scorm2004: boolean, CMIElement) {\n        if (!CMIElement || CMIElement === '') {\n            return ''\n        }\n\n        const structure = CMIElement.split('.')\n        let refObject = this\n        let attribute = null\n\n        const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`\n        const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`\n        const invalidErrorCode = scorm2004 ? this.#error_codes.UNDEFINED_DATA_MODEL : this.#error_codes.GENERAL\n\n        for (let i = 0; i < structure.length; i++) {\n            attribute = structure[i]\n\n            if (!scorm2004) {\n                if (i === structure.length - 1) {\n                    if (!this._checkObjectHasProperty(refObject, attribute)) {\n                        this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                        return\n                    }\n                }\n            } else {\n                if (String(attribute).substr(0, 8) === '{target=' && typeof refObject._isTargetValid == 'function') {\n                    const target = String(attribute).substr(8, String(attribute).length - 9)\n                    return refObject._isTargetValid(target)\n                } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n                    this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                    return\n                }\n            }\n\n            refObject = refObject[attribute]\n            if (refObject === undefined) {\n                this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                break\n            }\n\n            if (refObject instanceof CMIArray) {\n                const index = parseInt(structure[i + 1], 10)\n\n                // SCO is trying to set an item on an array\n                if (!isNaN(index)) {\n                    const item = refObject.childArray[index]\n\n                    if (item) {\n                        refObject = item\n                    } else {\n                        this.throwSCORMError(this.#error_codes.VALUE_NOT_INITIALIZED, uninitializedErrorMessage)\n                        break\n                    }\n\n                    // Have to update i value to skip the array position\n                    i++\n                }\n            }\n        }\n\n        if (refObject === null || refObject === undefined) {\n            if (!scorm2004) {\n                if (attribute === '_children') {\n                    this.throwSCORMError(scorm12_error_codes.CHILDREN_ERROR)\n                } else if (attribute === '_count') {\n                    this.throwSCORMError(scorm12_error_codes.COUNT_ERROR)\n                }\n            }\n        } else {\n            return refObject\n        }\n    }\n\n    /**\n     * Returns true if the API's current state is STATE_INITIALIZED\n     *\n     * @return {boolean}\n     */\n    isInitialized() {\n        return this.currentState === global_constants.STATE_INITIALIZED\n    }\n\n    /**\n     * Returns true if the API's current state is STATE_NOT_INITIALIZED\n     *\n     * @return {boolean}\n     */\n    isNotInitialized() {\n        return this.currentState === global_constants.STATE_NOT_INITIALIZED\n    }\n\n    /**\n     * Returns true if the API's current state is STATE_TERMINATED\n     *\n     * @return {boolean}\n     */\n    isTerminated() {\n        return this.currentState === global_constants.STATE_TERMINATED\n    }\n\n    /**\n     * Provides a mechanism for attaching to a specific SCORM event\n     *\n     * @param {string} listenerName\n     * @param {function} callback\n     */\n    on(listenerName: String, callback: function) {\n        if (!callback) return\n\n        const listenerFunctions = listenerName.split(' ')\n        for (let i = 0; i < listenerFunctions.length; i++) {\n            const listenerSplit = listenerFunctions[i].split('.')\n            if (listenerSplit.length === 0) return\n\n            const functionName = listenerSplit[0]\n\n            let CMIElement = null\n            if (listenerSplit.length > 1) {\n                CMIElement = listenerName.replace(functionName + '.', '')\n            }\n\n            this.listenerArray.push({\n                functionName: functionName,\n                CMIElement: CMIElement,\n                callback: callback,\n            })\n\n            // this.apiLog('on', functionName, `Added event listener: ${this.listenerArray.length}`, global_constants.LOG_LEVEL_INFO);\n        }\n    }\n\n    /**\n     * Provides a mechanism for detaching a specific SCORM event listener\n     *\n     * @param {string} listenerName\n     * @param {function} callback\n     */\n    off(listenerName: String, callback: function) {\n        if (!callback) return\n\n        const listenerFunctions = listenerName.split(' ')\n        for (let i = 0; i < listenerFunctions.length; i++) {\n            const listenerSplit = listenerFunctions[i].split('.')\n            if (listenerSplit.length === 0) return\n\n            const functionName = listenerSplit[0]\n\n            let CMIElement = null\n            if (listenerSplit.length > 1) {\n                CMIElement = listenerName.replace(functionName + '.', '')\n            }\n\n            const removeIndex = this.listenerArray.findIndex(\n                (obj) => obj.functionName === functionName && obj.CMIElement === CMIElement && obj.callback === callback\n            )\n            if (removeIndex !== -1) {\n                this.listenerArray.splice(removeIndex, 1)\n                // this.apiLog('off', functionName, `Removed event listener: ${this.listenerArray.length}`, global_constants.LOG_LEVEL_INFO);\n            }\n        }\n    }\n\n    /**\n     * Provides a mechanism for clearing all listeners from a specific SCORM event\n     *\n     * @param {string} listenerName\n     */\n    clear(listenerName: String) {\n        const listenerFunctions = listenerName.split(' ')\n        for (let i = 0; i < listenerFunctions.length; i++) {\n            const listenerSplit = listenerFunctions[i].split('.')\n            if (listenerSplit.length === 0) return\n\n            const functionName = listenerSplit[0]\n\n            let CMIElement = null\n            if (listenerSplit.length > 1) {\n                CMIElement = listenerName.replace(functionName + '.', '')\n            }\n\n            this.listenerArray = this.listenerArray.filter(\n                (obj) => obj.functionName !== functionName && obj.CMIElement !== CMIElement\n            )\n        }\n    }\n\n    /**\n     * Processes any 'on' listeners that have been created\n     *\n     * @param {string} functionName\n     * @param {string} CMIElement\n     * @param {*} value\n     */\n    processListeners(functionName, CMIElement, value) {\n        for (let i = 0; i < this.listenerArray.length; i++) {\n            const listener = this.listenerArray[i]\n            const functionsMatch = listener.functionName === functionName\n            const listenerHasCMIElement = !!listener.CMIElement\n            let CMIElementsMatch = false\n            if (\n                CMIElement &&\n                listener.CMIElement &&\n                listener.CMIElement.substring(listener.CMIElement.length - 1) === '*'\n            ) {\n                CMIElementsMatch =\n                    CMIElement.indexOf(listener.CMIElement.substring(0, listener.CMIElement.length - 1)) === 0\n            } else {\n                CMIElementsMatch = listener.CMIElement === CMIElement\n            }\n\n            if (functionsMatch && (!listenerHasCMIElement || CMIElementsMatch)) {\n                listener.callback(CMIElement, value)\n            }\n        }\n    }\n\n    /**\n     * Throws a SCORM error\n     *\n     * @param {number} errorNumber\n     * @param {string} message\n     */\n    throwSCORMError(errorNumber: number, message: String) {\n        if (!message) {\n            message = this.getLmsErrorMessageDetails(errorNumber)\n        }\n\n        this.apiLog('throwSCORMError', null, errorNumber + ': ' + message, global_constants.LOG_LEVEL_ERROR)\n\n        this.lastError = {\n            errorCode: errorNumber,\n            errorMessage: message,\n        }\n    }\n\n    /**\n     * Clears the last SCORM error code on success.\n     *\n     * @param {string} success\n     */\n    clearSCORMError(success: String) {\n        if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n            this.lastError = global_constants.NO_ERROR\n        }\n    }\n\n    /**\n     * Attempts to store the data to the LMS, logs data if no LMS configured\n     * APIs that inherit BaseAPI should override this function\n     *\n     * @param {boolean} _calculateTotalTime\n     * @return {string}\n     * @abstract\n     */\n    storeData(_calculateTotalTime) {\n        throw new Error('The storeData method has not been implemented')\n    }\n\n    /**\n     * Load the CMI from a flattened JSON object\n     * @param {object} json\n     * @param {string} CMIElement\n     */\n    loadFromFlattenedJSON(json, CMIElement) {\n        if (!this.isNotInitialized()) {\n            console.error('loadFromFlattenedJSON can only be called before the call to lmsInitialize.')\n            return\n        }\n\n        /**\n         * Test match pattern.\n         *\n         * @param {string} a\n         * @param {string} c\n         * @param {RegExp} a_pattern\n         * @return {number}\n         */\n        function testPattern(a, c, a_pattern) {\n            const a_match = a.match(a_pattern)\n\n            let c_match\n            if (a_match !== null && (c_match = c.match(a_pattern)) !== null) {\n                const a_num = Number(a_match[2])\n                const c_num = Number(c_match[2])\n                if (a_num === c_num) {\n                    if (a_match[3] === 'id') {\n                        return -1\n                    } else if (a_match[3] === 'type') {\n                        if (c_match[3] === 'id') {\n                            return 1\n                        } else {\n                            return -1\n                        }\n                    } else {\n                        return 1\n                    }\n                }\n                return a_num - c_num\n            }\n\n            return null\n        }\n\n        const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/\n        const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/\n\n        const result = Object.keys(json).map(function (key) {\n            return [String(key), json[key]]\n        })\n\n        // CMI interactions need to have id and type loaded before any other fields\n        result.sort(function ([a, b], [c, d]) {\n            let test\n            if ((test = testPattern(a, c, int_pattern)) !== null) {\n                return test\n            }\n            if ((test = testPattern(a, c, obj_pattern)) !== null) {\n                return test\n            }\n\n            if (a < c) {\n                return -1\n            }\n            if (a > c) {\n                return 1\n            }\n            return 0\n        })\n\n        let obj\n        result.forEach((element) => {\n            obj = {}\n            obj[element[0]] = element[1]\n            this.loadFromJSON(unflatten(obj), CMIElement)\n        })\n    }\n\n    /**\n     * Loads CMI data from a JSON object.\n     *\n     * @param {object} json\n     * @param {string} CMIElement\n     */\n    loadFromJSON(json, CMIElement) {\n        if (!this.isNotInitialized()) {\n            console.error('loadFromJSON can only be called before the call to lmsInitialize.')\n            return\n        }\n\n        CMIElement = CMIElement !== undefined ? CMIElement : 'cmi'\n\n        this.startingData = json\n\n        // could this be refactored down to flatten(json) then setCMIValue on each?\n        for (const key in json) {\n            if ({}.hasOwnProperty.call(json, key) && json[key]) {\n                const currentCMIElement = (CMIElement ? CMIElement + '.' : '') + key\n                const value = json[key]\n\n                if (value['childArray']) {\n                    for (let i = 0; i < value['childArray'].length; i++) {\n                        this.loadFromJSON(value['childArray'][i], currentCMIElement + '.' + i)\n                    }\n                } else if (value.constructor === Object) {\n                    this.loadFromJSON(value, currentCMIElement)\n                } else {\n                    this.setCMIValue(currentCMIElement, value)\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the CMI object to JSON for sending to an LMS.\n     *\n     * @return {string}\n     */\n    renderCMIToJSONString() {\n        const cmi = this.cmi\n        // Do we want/need to return fields that have no set value?\n        // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n        return JSON.stringify({ cmi })\n    }\n\n    /**\n     * Returns a JS object representing the current cmi\n     * @return {object}\n     */\n    renderCMIToJSONObject() {\n        // Do we want/need to return fields that have no set value?\n        // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n        return JSON.parse(this.renderCMIToJSONString())\n    }\n\n    /**\n     * Render the cmi object to the proper format for LMS commit\n     * APIs that inherit BaseAPI should override this function\n     *\n     * @param {boolean} _terminateCommit\n     * @return {*}\n     * @abstract\n     */\n    renderCommitCMI(_terminateCommit) {\n        throw new Error('The storeData method has not been implemented')\n    }\n\n    /**\n     * Send the request to the LMS\n     * @param {string} url\n     * @param {object|Array} params\n     * @param {boolean} immediate\n     * @return {object}\n     */\n    processHttpRequest(callbackName, url, params, immediate = false, commitId) {\n        const process = (url, params, settings, error_codes) => {\n            params = settings.requestHandler(params)\n            const genericError = {\n                result: global_constants.SCORM_FALSE,\n                errorCode: error_codes.GENERAL,\n            }\n\n            let result\n            if (!settings.sendBeaconCommit) {\n                try {\n                    const httpReq = new XMLHttpRequest()\n                    httpReq.open('POST', url, settings.asyncCommit)\n                    let stringParams\n                    if (params instanceof Array) {\n                        stringParams = params.join('&')\n                        httpReq.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n                        httpReq.send(stringParams)\n                    } else {\n                        stringParams = JSON.stringify(params)\n                        httpReq.setRequestHeader('Content-Type', settings.commitRequestDataType)\n                        httpReq.send(stringParams)\n                    }\n\n                    if (!settings.asyncCommit) {\n                        if (typeof settings.responseHandler === 'function') {\n                            result = settings.responseHandler(httpReq)\n                        } else {\n                            result = JSON.parse(httpReq.responseText)\n                        }\n\n                        if (result?.result) {\n                            this.lastError = global_constants.NO_ERROR\n                            this.processListeners('commitSuccess')\n                        } else {\n                            this.lastError = {\n                                errorCode: result.errorCode,\n                                errorMessage: 'Network Request failed',\n                            }\n                            this.processListeners('commitError')\n                        }\n\n                        this.apiLog(\n                            `${callbackName} Sync HttpRequest`,\n                            JSON.parse(stringParams),\n                            'result: ' + result?.result || global_constants.SCORM_FALSE,\n                            global_constants.LOG_LEVEL_INFO\n                        )\n                    } else {\n                        httpReq.onload = (e) => {\n                            if (typeof settings.responseHandler === 'function') {\n                                result = settings.responseHandler(httpReq)\n                            } else {\n                                result = JSON.parse(httpReq.responseText)\n                            }\n\n                            if (result.result == true) {\n                                this.lastError = global_constants.NO_ERROR\n                                this.processListeners('CommitSuccess')\n                            } else {\n                                this.lastError = {\n                                    errorCode: result.errorCode,\n                                    errorMessage: 'Network Request failed',\n                                }\n                                this.processListeners('CommitError')\n                            }\n                            this.apiLog(\n                                `${callbackName} Async HttpRequest`,\n                                JSON.parse(stringParams),\n                                'result: ' + result.result,\n                                global_constants.LOG_LEVEL_INFO\n                            )\n                        }\n                        httpReq.onerror = (e) => {\n                            this.processListeners('CommitError')\n                            this.apiLog(\n                                `${callbackName} Async HttpRequest`,\n                                stringParams,\n                                'result: ' + global_constants.SCORM_FALSE,\n                                global_constants.LOG_LEVEL_INFO\n                            )\n                        }\n                    }\n                } catch (e) {\n                    console.error(e)\n                    this.processListeners('CommitError')\n                    return genericError\n                }\n            } else {\n                try {\n                    const headers = {\n                        type: settings.commitRequestDataType,\n                    }\n                    let blob\n                    let stringParams\n                    if (params instanceof Array) {\n                        stringParams = params.join('&')\n                        blob = new Blob([stringParams], headers)\n                    } else {\n                        stringParams = JSON.stringify(params)\n                        blob = new Blob([stringParams], headers)\n                    }\n\n                    result = {}\n                    if (navigator.sendBeacon(url, blob)) {\n                        result.result = global_constants.SCORM_TRUE\n                        result.errorCode = 0\n                        this.processListeners('CommitSuccess')\n                    } else {\n                        result.result = global_constants.SCORM_FALSE\n                        result.errorCode = 101\n                        this.processListeners('CommitError')\n                    }\n\n                    this.apiLog(\n                        `${callbackName} SendBeacon`,\n                        JSON.parse(stringParams),\n                        'result: ' + result.result,\n                        global_constants.LOG_LEVEL_INFO\n                    )\n                } catch (e) {\n                    console.error(e)\n                    this.processListeners('CommitError')\n                    return genericError\n                }\n            }\n\n            return result\n        }\n\n        if (typeof debounce !== 'undefined') {\n            const debounced = debounce(process, 500)\n            debounced(url, params, this.settings, this.error_codes)\n\n            // if we're terminating, go ahead and commit immediately\n            if (immediate) {\n                debounced.flush()\n            }\n\n            return {\n                result: global_constants.SCORM_TRUE,\n                errorCode: 0,\n            }\n        } else {\n            return process(url, params, this.settings, this.error_codes)\n        }\n    }\n\n    /**\n     * Throws a SCORM error\n     *\n     * @param {number} when - the number of milliseconds to wait before committing\n     * @param {string} callback - the name of the commit event callback\n     */\n    scheduleCommit(when: number, callback: string) {\n        this.#timeout = new ScheduledCommit(this, when, callback)\n        this.apiLog('scheduleCommit', '', 'scheduled', global_constants.LOG_LEVEL_DEBUG)\n    }\n\n    /**\n     * Clears and cancels any currently scheduled commits\n     */\n    clearScheduledCommit() {\n        if (this.#timeout) {\n            this.#timeout.cancel()\n            this.#timeout = null\n            this.apiLog('clearScheduledCommit', '', 'cleared', global_constants.LOG_LEVEL_DEBUG)\n        }\n    }\n}\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nclass ScheduledCommit {\n    #API\n    #cancelled = false\n    #timeout\n    #callback\n\n    /**\n     * Constructor for ScheduledCommit\n     * @param {BaseAPI} API\n     * @param {number} when\n     * @param {string} callback\n     */\n    constructor(API: any, when: number, callback: string) {\n        this.#API = API\n        this.#timeout = setTimeout(this.wrapper.bind(this), when)\n        this.#callback = callback\n    }\n\n    /**\n     * Cancel any currently scheduled commit\n     */\n    cancel() {\n        this.#cancelled = true\n        if (this.#timeout) {\n            clearTimeout(this.#timeout)\n        }\n    }\n\n    /**\n     * Wrap the API commit call to check if the call has already been cancelled\n     */\n    wrapper() {\n        if (!this.#cancelled) {\n            this.#API.commit(this.#callback)\n        }\n    }\n}\n","// @flow\nimport BaseAPI from './BaseAPI'\nimport {\n    CMI,\n    CMIInteractionsCorrectResponsesObject,\n    CMIInteractionsObject,\n    CMIInteractionsObjectivesObject,\n    CMIObjectivesObject,\n    NAV,\n} from './cmi/scorm12_cmi'\nimport * as Utilities from './utilities'\nimport APIConstants from './constants/api_constants'\nimport ErrorCodes from './constants/error_codes'\n\nconst scorm12_constants = APIConstants.scorm12\nconst global_constants = APIConstants.global\nconst scorm12_error_codes = ErrorCodes.scorm12\n\n/**\n * API class for SCORM 1.2\n */\nexport default class Scorm12API extends BaseAPI {\n    /**\n     * Constructor for SCORM 1.2 API\n     * @param {object} settings\n     */\n    constructor(settings: {}) {\n        const finalSettings = {\n            ...{\n                mastery_override: false,\n            },\n            ...settings,\n        }\n\n        super(scorm12_error_codes, finalSettings)\n\n        this.cmi = new CMI()\n        this.nav = new NAV()\n\n        // Rename functions to match 1.2 Spec and expose to modules\n        this.LMSInitialize = this.lmsInitialize\n        this.LMSFinish = this.lmsFinish\n        this.LMSGetValue = this.lmsGetValue\n        this.LMSSetValue = this.lmsSetValue\n        this.LMSCommit = this.lmsCommit\n        this.LMSGetLastError = this.lmsGetLastError\n        this.LMSGetErrorString = this.lmsGetErrorString\n        this.LMSGetDiagnostic = this.lmsGetDiagnostic\n    }\n\n    /**\n     * lmsInitialize function from SCORM 1.2 Spec\n     *\n     * @return {string} bool\n     */\n    lmsInitialize() {\n        this.cmi.initialize()\n        return this.initialize('LMSInitialize', 'LMS was already initialized!', 'LMS is already finished!')\n    }\n\n    /**\n     * LMSFinish function from SCORM 1.2 Spec\n     *\n     * @return {string} bool\n     */\n    lmsFinish() {\n        const result = this.terminate('LMSFinish', true)\n\n        if (result === global_constants.SCORM_TRUE) {\n            if (this.nav.event !== '') {\n                if (this.nav.event === 'continue') {\n                    this.processListeners('SequenceNext')\n                } else {\n                    this.processListeners('SequencePrevious')\n                }\n            } else if (this.settings.autoProgress) {\n                this.processListeners('SequenceNext')\n            }\n        }\n\n        return result\n    }\n\n    /**\n     * LMSGetValue function from SCORM 1.2 Spec\n     *\n     * @param {string} CMIElement\n     * @return {string}\n     */\n    lmsGetValue(CMIElement) {\n        return this.getValue('LMSGetValue', false, CMIElement)\n    }\n\n    /**\n     * LMSSetValue function from SCORM 1.2 Spec\n     *\n     * @param {string} CMIElement\n     * @param {*} value\n     * @return {string}\n     */\n    lmsSetValue(CMIElement, value) {\n        return this.setValue('LMSSetValue', 'LMSCommit', false, CMIElement, value)\n    }\n\n    /**\n     * LMSCommit function from SCORM 1.2 Spec\n     *\n     * @return {string} bool\n     */\n    lmsCommit() {\n        return this.commit('LMSCommit', false)\n    }\n\n    /**\n     * LMSGetLastError function from SCORM 1.2 Spec\n     *\n     * @return {string}\n     */\n    lmsGetLastError() {\n        return this.getLastError('LMSGetLastError')\n    }\n\n    /**\n     * LMSGetErrorString function from SCORM 1.2 Spec\n     *\n     * @param {string} CMIErrorCode\n     * @return {string}\n     */\n    lmsGetErrorString(CMIErrorCode) {\n        return this.getErrorString('LMSGetErrorString', CMIErrorCode)\n    }\n\n    /**\n     * LMSGetDiagnostic function from SCORM 1.2 Spec\n     *\n     * @param {string} CMIErrorCode\n     * @return {string}\n     */\n    lmsGetDiagnostic(CMIErrorCode) {\n        return this.getDiagnostic('LMSGetDiagnostic', CMIErrorCode)\n    }\n\n    /**\n     * Sets a value on the CMI Object\n     *\n     * @param {string} CMIElement\n     * @param {*} value\n     * @return {string}\n     */\n    setCMIValue(CMIElement, value) {\n        return this._commonSetCMIValue('LMSSetValue', false, CMIElement, value)\n    }\n\n    /**\n     * Gets a value from the CMI Object\n     *\n     * @param {string} CMIElement\n     * @return {*}\n     */\n    getCMIValue(CMIElement) {\n        return this._commonGetCMIValue('getCMIValue', false, CMIElement)\n    }\n\n    /**\n     * Gets or builds a new child element to add to the array.\n     *\n     * @param {string} CMIElement\n     * @param {*} value\n     * @param {boolean} foundFirstIndex\n     * @return {object}\n     */\n    getChildElement(CMIElement, value, foundFirstIndex) {\n        let newChild\n\n        if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d+')) {\n            newChild = new CMIObjectivesObject()\n        } else if (\n            foundFirstIndex &&\n            this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+')\n        ) {\n            newChild = new CMIInteractionsCorrectResponsesObject()\n        } else if (foundFirstIndex && this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+')) {\n            newChild = new CMIInteractionsObjectivesObject()\n        } else if (!foundFirstIndex && this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+')) {\n            newChild = new CMIInteractionsObject()\n        }\n\n        return newChild\n    }\n\n    /**\n     * Validates Correct Response values\n     *\n     * @param {string} CMIElement\n     * @param {*} value\n     * @return {boolean}\n     */\n    validateCorrectResponse(CMIElement, value) {\n        return true\n    }\n\n    /**\n     * Returns the message that corresponds to errorNumber.\n     *\n     * @param {*} errorNumber\n     * @param {boolean }detail\n     * @return {string}\n     */\n    getLmsErrorMessageDetails(errorNumber, detail) {\n        let basicMessage = 'No Error'\n        let detailMessage = 'No Error'\n\n        // Set error number to string since inconsistent from modules if string or number\n        errorNumber = String(errorNumber)\n        if (scorm12_constants.error_descriptions[errorNumber]) {\n            basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage\n            detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage\n        }\n\n        return detail ? detailMessage : basicMessage\n    }\n\n    /**\n     * Replace the whole API with another\n     *\n     * @param {Scorm12API} newAPI\n     */\n    replaceWithAnotherScormAPI(newAPI) {\n        // Data Model\n        this.cmi = newAPI.cmi\n    }\n\n    /**\n     * Render the cmi object to the proper format for LMS commit\n     *\n     * @param {boolean} terminateCommit\n     * @return {object|Array}\n     */\n    renderCommitCMI(terminateCommit: boolean) {\n        const cmiExport = this.renderCMIToJSONObject()\n\n        if (terminateCommit) {\n            cmiExport.cmi.core.total_time = this.cmi.getCurrentTotalTime()\n            cmiExport.cmi.core.session_time = this.cmi.getCurrentSessionTime()\n        }\n\n        const result = []\n        const flattened = Utilities.flatten(cmiExport)\n        switch (this.settings.dataCommitFormat) {\n            case 'flattened':\n                return Utilities.flatten(cmiExport)\n            case 'params':\n                for (const item in flattened) {\n                    if ({}.hasOwnProperty.call(flattened, item)) {\n                        result.push(`${item}=${flattened[item]}`)\n                    }\n                }\n                return result\n            case 'json':\n            default:\n                return cmiExport\n        }\n    }\n\n    /**\n     * Attempts to store the data to the LMS\n     *\n     * @param {boolean} terminateCommit\n     * @return {string}\n     */\n    storeData(callbackName, terminateCommit, commitId) {\n        if (terminateCommit) {\n            const originalStatus = this.cmi.core.lesson_status\n            if (originalStatus === 'not attempted') {\n                this.cmi.core.lesson_status = 'completed'\n            }\n\n            if (this.cmi.core.lesson_mode === 'normal') {\n                if (this.cmi.core.credit === 'credit') {\n                    if (\n                        this.settings.mastery_override &&\n                        this.cmi.student_data.mastery_score !== '' &&\n                        this.cmi.core.score.raw !== ''\n                    ) {\n                        if (parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)) {\n                            this.cmi.core.lesson_status = 'passed'\n                        } else {\n                            this.cmi.core.lesson_status = 'failed'\n                        }\n                    }\n                }\n            } else if (this.cmi.core.lesson_mode === 'browse') {\n                if ((this.startingData?.cmi?.core?.lesson_status || '') === '' && originalStatus === 'not attempted') {\n                    this.cmi.core.lesson_status = 'browsed'\n                }\n            }\n        }\n\n        const commitObject = this.renderCommitCMI(terminateCommit || this.settings.alwaysSendTotalTime)\n\n        if (this.settings.lmsCommitUrl) {\n            const response = this.processHttpRequest(\n                callbackName,\n                this.settings.lmsCommitUrl,\n                commitObject,\n                terminateCommit,\n                commitId\n            )\n            return response\n        } else {\n            console.log(callbackName, terminateCommit ? '(final)' : '', commitObject)\n            return global_constants.SCORM_TRUE\n        }\n    }\n}\n","// @flow\nimport BaseAPI from './BaseAPI'\nimport {\n    ADL,\n    CMI,\n    CMICommentsObject,\n    CMIInteractionsCorrectResponsesObject,\n    CMIInteractionsObject,\n    CMIInteractionsObjectivesObject,\n    CMIObjectivesObject,\n} from './cmi/scorm2004_cmi'\nimport * as Utilities from './utilities'\nimport APIConstants from './constants/api_constants'\nimport ErrorCodes from './constants/error_codes'\nimport Responses from './constants/response_constants'\nimport ValidLanguages from './constants/language_constants'\nimport Regex from './constants/regex'\n\nconst scorm2004_constants = APIConstants.scorm2004\nconst global_constants = APIConstants.global\nconst scorm2004_error_codes = ErrorCodes.scorm2004\nconst correct_responses = Responses.correct\nconst scorm2004_regex = Regex.scorm2004\n\n/**\n * API class for SCORM 2004\n */\nexport default class Scorm2004API extends BaseAPI {\n    #version: '1.0'\n\n    /**\n     * Constructor for SCORM 2004 API\n     * @param {object} settings\n     */\n    constructor(settings: {}) {\n        const finalSettings = {\n            ...{\n                mastery_override: false,\n            },\n            ...settings,\n        }\n\n        super(scorm2004_error_codes, finalSettings)\n\n        this.cmi = new CMI()\n        this.adl = new ADL()\n\n        // Rename functions to match 2004 Spec and expose to modules\n        this.Initialize = this.lmsInitialize\n        this.Terminate = this.lmsTerminate\n        this.GetValue = this.lmsGetValue\n        this.SetValue = this.lmsSetValue\n        this.Commit = this.lmsCommit\n        this.GetLastError = this.lmsGetLastError\n        this.GetErrorString = this.lmsGetErrorString\n        this.GetDiagnostic = this.lmsGetDiagnostic\n    }\n\n    /**\n     * Getter for #version\n     * @return {string}\n     */\n    get version() {\n        return this.#version\n    }\n\n    /**\n     * @return {string} bool\n     */\n    lmsInitialize() {\n        this.cmi.initialize()\n        return this.initialize('Initialize')\n    }\n\n    /**\n     * @return {string} bool\n     */\n    lmsTerminate() {\n        const result = this.terminate('Terminate', true)\n\n        if (result === global_constants.SCORM_TRUE) {\n            if (this.adl.nav.request !== '_none_') {\n                switch (this.adl.nav.request) {\n                    case 'continue':\n                        this.processListeners('SequenceNext')\n                        break\n                    case 'previous':\n                        this.processListeners('SequencePrevious')\n                        break\n                    case 'choice':\n                        this.processListeners('SequenceChoice')\n                        break\n                    case 'exit':\n                        this.processListeners('SequenceExit')\n                        break\n                    case 'exitAll':\n                        this.processListeners('SequenceExitAll')\n                        break\n                    case 'abandon':\n                        this.processListeners('SequenceAbandon')\n                        break\n                    case 'abandonAll':\n                        this.processListeners('SequenceAbandonAll')\n                        break\n                }\n            } else if (this.settings.autoProgress) {\n                this.processListeners('SequenceNext')\n            }\n        }\n\n        return result\n    }\n\n    /**\n     * @param {string} CMIElement\n     * @return {string}\n     */\n    lmsGetValue(CMIElement) {\n        return this.getValue('GetValue', true, CMIElement)\n    }\n\n    /**\n     * @param {string} CMIElement\n     * @param {any} value\n     * @return {string}\n     */\n    lmsSetValue(CMIElement, value) {\n        return this.setValue('SetValue', 'Commit', true, CMIElement, value)\n    }\n\n    /**\n     * Orders LMS to store all content parameters\n     *\n     * @return {string} bool\n     */\n    lmsCommit() {\n        return this.commit('Commit')\n    }\n\n    /**\n     * Returns last error code\n     *\n     * @return {string}\n     */\n    lmsGetLastError() {\n        return this.getLastError('GetLastError')\n    }\n\n    /**\n     * Returns the errorNumber error description\n     *\n     * @param {(string|number)} CMIErrorCode\n     * @return {string}\n     */\n    lmsGetErrorString(CMIErrorCode) {\n        return this.getErrorString('GetErrorString', CMIErrorCode)\n    }\n\n    /**\n     * Returns a comprehensive description of the errorNumber error.\n     *\n     * @param {(string|number)} CMIErrorCode\n     * @return {string}\n     */\n    lmsGetDiagnostic(CMIErrorCode) {\n        return this.getDiagnostic('GetDiagnostic', CMIErrorCode)\n    }\n\n    /**\n     * Sets a value on the CMI Object\n     *\n     * @param {string} CMIElement\n     * @param {any} value\n     * @return {string}\n     */\n    setCMIValue(CMIElement, value) {\n        return this._commonSetCMIValue('SetValue', true, CMIElement, value)\n    }\n\n    /**\n     * Gets or builds a new child element to add to the array.\n     *\n     * @param {string} CMIElement\n     * @param {any} value\n     * @param {boolean} foundFirstIndex\n     * @return {any}\n     */\n    getChildElement(CMIElement, value, foundFirstIndex) {\n        let newChild\n\n        if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d+')) {\n            newChild = new CMIObjectivesObject()\n        } else if (\n            foundFirstIndex &&\n            this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+')\n        ) {\n            const parts = CMIElement.split('.')\n            const index = Number(parts[2])\n            const interaction = this.cmi.interactions.childArray[index]\n            if (this.isInitialized()) {\n                if (!interaction.type) {\n                    this.throwSCORMError(scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED)\n                } else {\n                    this.checkDuplicateChoiceResponse(interaction, value)\n\n                    const response_type = correct_responses[interaction.type]\n                    if (response_type) {\n                        this.checkValidResponseType(response_type, value, interaction.type)\n                    } else {\n                        this.throwSCORMError(\n                            scorm2004_error_codes.GENERAL_SET_FAILURE,\n                            'Incorrect Response Type: ' + interaction.type\n                        )\n                    }\n                }\n            }\n            if (this.lastError.errorCode === 0) {\n                newChild = new CMIInteractionsCorrectResponsesObject()\n            }\n        } else if (foundFirstIndex && this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+')) {\n            newChild = new CMIInteractionsObjectivesObject()\n        } else if (!foundFirstIndex && this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+')) {\n            newChild = new CMIInteractionsObject()\n        } else if (this.stringMatches(CMIElement, 'cmi\\\\.comments_from_learner\\\\.\\\\d+')) {\n            newChild = new CMICommentsObject()\n        } else if (this.stringMatches(CMIElement, 'cmi\\\\.comments_from_lms\\\\.\\\\d+')) {\n            newChild = new CMICommentsObject(true)\n        }\n\n        return newChild\n    }\n\n    /**\n     * Checks for valid response types\n     * @param {object} response_type\n     * @param {any} value\n     * @param {string} interaction_type\n     */\n    checkValidResponseType(response_type, value, interaction_type) {\n        let nodes = []\n        if (response_type?.delimiter) {\n            nodes = String(value).split(response_type.delimiter)\n        } else {\n            nodes[0] = value\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n            this.checkCorrectResponseValue(interaction_type, nodes, value)\n        } else if (nodes.length > response_type.max) {\n            this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE, 'Data Model Element Pattern Too Long')\n        }\n    }\n\n    /**\n     * Checks for duplicate 'choice' responses.\n     * @param {CMIInteractionsObject} interaction\n     * @param {any} value\n     */\n    checkDuplicateChoiceResponse(interaction, value) {\n        const interaction_count = interaction.correct_responses._count\n        if (interaction.type === 'choice') {\n            for (let i = 0; i < interaction_count && this.lastError.errorCode === 0; i++) {\n                const response = interaction.correct_responses.childArray[i]\n                if (response.pattern === value) {\n                    this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE)\n                }\n            }\n        }\n    }\n\n    /**\n     * Validate correct response.\n     * @param {string} CMIElement\n     * @param {*} value\n     */\n    validateCorrectResponse(CMIElement, value) {\n        const parts = CMIElement.split('.')\n        const index = Number(parts[2])\n        const pattern_index = Number(parts[4])\n        const interaction = this.cmi.interactions.childArray[index]\n\n        const interaction_count = interaction.correct_responses._count\n        this.checkDuplicateChoiceResponse(interaction, value)\n\n        const response_type = correct_responses[interaction.type]\n        if (typeof response_type.limit === 'undefined' || interaction_count <= response_type.limit) {\n            this.checkValidResponseType(response_type, value, interaction.type)\n\n            if (\n                (this.lastError.errorCode === 0 &&\n                    (!response_type.duplicate ||\n                        !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n                (this.lastError.errorCode === 0 && value === '')\n            ) {\n                // do nothing, we want the inverse\n            } else {\n                if (this.lastError.errorCode === 0) {\n                    this.throwSCORMError(\n                        scorm2004_error_codes.GENERAL_SET_FAILURE,\n                        'Data Model Element Pattern Already Exists'\n                    )\n                }\n            }\n        } else {\n            this.throwSCORMError(\n                scorm2004_error_codes.GENERAL_SET_FAILURE,\n                'Data Model Element Collection Limit Reached'\n            )\n        }\n    }\n\n    /**\n     * Gets a value from the CMI Object\n     *\n     * @param {string} CMIElement\n     * @return {*}\n     */\n    getCMIValue(CMIElement) {\n        return this._commonGetCMIValue('GetValue', true, CMIElement)\n    }\n\n    /**\n     * Returns the message that corresponds to errorNumber.\n     *\n     * @param {(string|number)} errorNumber\n     * @param {boolean} detail\n     * @return {string}\n     */\n    getLmsErrorMessageDetails(errorNumber, detail) {\n        let basicMessage = ''\n        let detailMessage = ''\n\n        // Set error number to string since inconsistent from modules if string or number\n        errorNumber = String(errorNumber)\n        if (scorm2004_constants.error_descriptions[errorNumber]) {\n            basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage\n            detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage\n        }\n\n        return detail ? detailMessage : basicMessage\n    }\n\n    /**\n     * Check to see if a correct_response value has been duplicated\n     * @param {CMIArray} correct_response\n     * @param {number} current_index\n     * @param {*} value\n     * @return {boolean}\n     */\n    checkDuplicatedPattern = (correct_response, current_index, value) => {\n        let found = false\n        const count = correct_response._count\n        for (let i = 0; i < count && !found; i++) {\n            if (i !== current_index && correct_response.childArray[i] === value) {\n                found = true\n            }\n        }\n        return found\n    }\n\n    /**\n     * Checks for a valid correct_response value\n     * @param {string} interaction_type\n     * @param {Array} nodes\n     * @param {*} value\n     */\n    checkCorrectResponseValue(interaction_type, nodes, value) {\n        const response = correct_responses[interaction_type]\n        const formatRegex = new RegExp(response.format)\n        for (let i = 0; i < nodes.length && this.lastError.errorCode === 0; i++) {\n            if (interaction_type.match('^(fill-in|long-fill-in|matching|performance|sequencing)$')) {\n                nodes[i] = this.removeCorrectResponsePrefixes(nodes[i])\n            }\n\n            if (response?.delimiter2) {\n                const values = nodes[i].split(response.delimiter2)\n                if (values.length === 2) {\n                    const matches = values[0].match(formatRegex)\n                    if (!matches) {\n                        this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH)\n                    } else {\n                        if (!values[1].match(new RegExp(response.format2))) {\n                            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH)\n                        }\n                    }\n                } else {\n                    this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH)\n                }\n            } else {\n                const matches = nodes[i].match(formatRegex)\n                if ((!matches && value !== '') || (!matches && interaction_type === 'true-false')) {\n                    this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH)\n                } else {\n                    if (interaction_type === 'numeric' && nodes.length > 1) {\n                        if (Number(nodes[0]) > Number(nodes[1])) {\n                            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH)\n                        }\n                    } else {\n                        if (nodes[i] !== '' && response.unique) {\n                            for (let j = 0; j < i && this.lastError.errorCode === 0; j++) {\n                                if (nodes[i] === nodes[j]) {\n                                    this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH)\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove prefixes from correct_response\n     * @param {string} node\n     * @return {*}\n     */\n    removeCorrectResponsePrefixes(node) {\n        let seenOrder = false\n        let seenCase = false\n        let seenLang = false\n\n        const prefixRegex = new RegExp('^({(lang|case_matters|order_matters)=([^}]+)})')\n        let matches = node.match(prefixRegex)\n        let langMatches = null\n        while (matches) {\n            switch (matches[2]) {\n                case 'lang':\n                    langMatches = node.match(scorm2004_regex.CMILangcr)\n                    if (langMatches) {\n                        const lang = langMatches[3]\n                        if (lang !== undefined && lang.length > 0) {\n                            if (ValidLanguages[lang.toLowerCase()] === undefined) {\n                                this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH)\n                            }\n                        }\n                    }\n                    seenLang = true\n                    break\n                case 'case_matters':\n                    if (!seenLang && !seenOrder && !seenCase) {\n                        if (matches[3] !== 'true' && matches[3] !== 'false') {\n                            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH)\n                        }\n                    }\n\n                    seenCase = true\n                    break\n                case 'order_matters':\n                    if (!seenCase && !seenLang && !seenOrder) {\n                        if (matches[3] !== 'true' && matches[3] !== 'false') {\n                            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH)\n                        }\n                    }\n\n                    seenOrder = true\n                    break\n                default:\n                    break\n            }\n            node = node.substr(matches[1].length)\n            matches = node.match(prefixRegex)\n        }\n\n        return node\n    }\n\n    /**\n     * Replace the whole API with another\n     * @param {Scorm2004API} newAPI\n     */\n    replaceWithAnotherScormAPI(newAPI) {\n        // Data Model\n        this.cmi = newAPI.cmi\n        this.adl = newAPI.adl\n    }\n\n    /**\n     * Render the cmi object to the proper format for LMS commit\n     *\n     * @param {boolean} terminateCommit\n     * @return {object|Array}\n     */\n    renderCommitCMI(terminateCommit: boolean) {\n        const cmiExport = this.renderCMIToJSONObject()\n\n        if (terminateCommit) {\n            cmiExport.cmi.total_time = this.cmi.getCurrentTotalTime()\n            cmiExport.cmi.session_time = this.cmi.getCurrentSessionTime()\n        }\n\n        const result = []\n        const flattened = Utilities.flatten(cmiExport)\n        switch (this.settings.dataCommitFormat) {\n            case 'flattened':\n                return Utilities.flatten(cmiExport)\n            case 'params':\n                for (const item in flattened) {\n                    if ({}.hasOwnProperty.call(flattened, item)) {\n                        result.push(`${item}=${flattened[item]}`)\n                    }\n                }\n                return result\n            case 'json':\n            default:\n                return cmiExport\n        }\n    }\n\n    /**\n     * Attempts to store the data to the LMS\n     *\n     * @param {boolean} terminateCommit\n     * @return {string}\n     */\n    storeData(callbackName, terminateCommit, commitId) {\n        if (terminateCommit) {\n            if (this.cmi.mode === 'normal') {\n                if (this.cmi.credit === 'credit') {\n                    if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n                        if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n                            console.debug('Setting Completion Status: Completed')\n                            this.cmi.completion_status = 'completed'\n                        } else {\n                            console.debug('Setting Completion Status: Incomplete')\n                            this.cmi.completion_status = 'incomplete'\n                        }\n                    }\n                    if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n                        if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n                            console.debug('Setting Success Status: Passed')\n                            this.cmi.success_status = 'passed'\n                        } else {\n                            console.debug('Setting Success Status: Failed')\n                            this.cmi.success_status = 'failed'\n                        }\n                    }\n                }\n            }\n        }\n\n        let navRequest = false\n        if (this.adl.nav.request !== this.startingData?.adl?.nav?.request && this.adl.nav.request !== '_none_') {\n            this.adl.nav.request = encodeURIComponent(this.adl.nav.request)\n            navRequest = true\n        }\n\n        const commitObject = this.renderCommitCMI(terminateCommit || this.settings.alwaysSendTotalTime)\n\n        if (this.settings.lmsCommitUrl) {\n            if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n                console.debug(callbackName, terminateCommit ? '(final)' : '', commitObject)\n            }\n            const result = this.processHttpRequest(\n                callbackName,\n                this.settings.lmsCommitUrl,\n                commitObject,\n                terminateCommit,\n                commitId\n            )\n\n            // check if this is a sequencing call, and then call the necessary JS\n            {\n                if (navRequest && result.navRequest !== undefined && result.navRequest !== '') {\n                    Function(`\"use strict\";(() => { ${result.navRequest} })()`)()\n                }\n            }\n            return result\n        } else {\n            console.log(callbackName, terminateCommit ? '(final)' : '', commitObject)\n            return global_constants.SCORM_TRUE\n        }\n    }\n}\n","import * as Scorm12CMI from './scorm12_cmi';\nimport {BaseCMI, CMIArray, CMIScore} from './common';\nimport APIConstants from '../constants/api_constants';\nimport Regex from '../constants/regex';\nimport ErrorCodes from '../constants/error_codes';\nimport {\n  check12ValidFormat,\n  throwReadOnlyError,\n} from './scorm12_cmi';\n\nconst aicc_constants = APIConstants.aicc;\nconst scorm12_constants = APIConstants.scorm12;\nconst aicc_regex = Regex.aicc;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super(aicc_constants.cmi_children);\n\n    if (initialized) this.initialize();\n\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'student_demographics': this.student_demographics,\n      'interactions': this.interactions,\n      'evaluation': this.evaluation,\n      'paths': this.paths,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * AICC Evaluation object\n */\nclass CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super();\n\n    this.comments = new CMIEvaluationComments();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments': this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n    });\n  }\n}\n\n/**\n * StudentPreferences class for AICC\n */\nclass AICCStudentPreferences extends Scorm12CMI.CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n\n    this.windows = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n      children: '',\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  #lesson_type = '';\n  #text_color = '';\n  #text_location = '';\n  #text_size = '';\n  #video = '';\n\n  /**\n   * Getter for #lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this.#lesson_type;\n  }\n\n  /**\n   * Setter for #lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (check12ValidFormat(lesson_type, aicc_regex.CMIString256)) {\n      this.#lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for #text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this.#text_color;\n  }\n\n  /**\n   * Setter for #text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (check12ValidFormat(text_color, aicc_regex.CMIString256)) {\n      this.#text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for #text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this.#text_location;\n  }\n\n  /**\n   * Setter for #text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (check12ValidFormat(text_location, aicc_regex.CMIString256)) {\n      this.#text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for #text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this.#text_size;\n  }\n\n  /**\n   * Setter for #text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (check12ValidFormat(text_size, aicc_regex.CMIString256)) {\n      this.#text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for #video\n   * @return {string}\n   */\n  get video(): string {\n    return this.#video;\n  }\n\n  /**\n   * Setter for #video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (check12ValidFormat(video, aicc_regex.CMIString256)) {\n      this.#video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'lesson_type': this.lesson_type,\n      'speed': this.speed,\n      'text': this.text,\n      'text_color': this.text_color,\n      'text_location': this.text_location,\n      'text_size': this.text_size,\n      'video': this.video,\n      'windows': this.windows,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * StudentData class for AICC\n */\nclass AICCCMIStudentData extends Scorm12CMI.CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n\n    this.tries = new CMITries();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.tries?.initialize();\n  }\n\n  #tries_during_lesson = '';\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson() {\n    return this.#tries_during_lesson;\n  }\n\n  /**\n   * Setter for #tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson) {\n    !this.initialized ?\n        this.#tries_during_lesson = tries_during_lesson :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n      'tries': this.tries,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super();\n  }\n\n  #_children = aicc_constants.student_demographics_children;\n  #city = '';\n  #class = '';\n  #company = '';\n  #country = '';\n  #experience = '';\n  #familiar_name = '';\n  #instructor_name = '';\n  #title = '';\n  #native_language = '';\n  #state = '';\n  #street_address = '';\n  #telephone = '';\n  #years_experience = '';\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city() {\n    return this.#city;\n  }\n\n  /**\n   * Setter for #city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city) {\n    !this.initialized ?\n        this.#city = city :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class() {\n    return this.#class;\n  }\n\n  /**\n   * Setter for #class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz) {\n    !this.initialized ?\n        this.#class = clazz :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company() {\n    return this.#company;\n  }\n\n  /**\n   * Setter for #company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company) {\n    !this.initialized ?\n        this.#company = company :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country() {\n    return this.#country;\n  }\n\n  /**\n   * Setter for #country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country) {\n    !this.initialized ?\n        this.#country = country :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience() {\n    return this.#experience;\n  }\n\n  /**\n   * Setter for #experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience) {\n    !this.initialized ?\n        this.#experience = experience :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name() {\n    return this.#familiar_name;\n  }\n\n  /**\n   * Setter for #familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name) {\n    !this.initialized ?\n        this.#familiar_name = familiar_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name() {\n    return this.#instructor_name;\n  }\n\n  /**\n   * Setter for #instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name) {\n    !this.initialized ?\n        this.#instructor_name = instructor_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title() {\n    return this.#title;\n  }\n\n  /**\n   * Setter for #title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title) {\n    !this.initialized ?\n        this.#title = title :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language() {\n    return this.#native_language;\n  }\n\n  /**\n   * Setter for #native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language) {\n    !this.initialized ?\n        this.#native_language = native_language :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state() {\n    return this.#state;\n  }\n\n  /**\n   * Setter for #state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state) {\n    !this.initialized ?\n        this.#state = state :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address() {\n    return this.#street_address;\n  }\n\n  /**\n   * Setter for #street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address) {\n    !this.initialized ?\n        this.#street_address = street_address :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone() {\n    return this.#telephone;\n  }\n\n  /**\n   * Setter for #telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone) {\n    !this.initialized ?\n        this.#telephone = telephone :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience() {\n    return this.#years_experience;\n  }\n\n  /**\n   * Setter for #years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience) {\n    !this.initialized ?\n        this.#years_experience = years_experience :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'city': this.city,\n      'class': this.class,\n      'company': this.company,\n      'country': this.country,\n      'experience': this.experience,\n      'familiar_name': this.familiar_name,\n      'instructor_name': this.instructor_name,\n      'title': this.title,\n      'native_language': this.native_language,\n      'state': this.state,\n      'street_address': this.street_address,\n      'telephone': this.telephone,\n      'years_experience': this.years_experience,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.paths object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({children: aicc_constants.paths_children});\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super();\n  }\n\n  #location_id = '';\n  #date = '';\n  #time = '';\n  #status = '';\n  #why_left = '';\n  #time_in_element = '';\n\n  /**\n   * Getter for #location_id\n   * @return {string}\n   */\n  get location_id() {\n    return this.#location_id;\n  }\n\n  /**\n   * Setter for #location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id) {\n    if (check12ValidFormat(location_id, aicc_regex.CMIString256)) {\n      this.#location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for #date\n   * @return {string}\n   */\n  get date() {\n    return this.#date;\n  }\n\n  /**\n   * Setter for #date\n   * @param {string} date\n   */\n  set date(date) {\n    if (check12ValidFormat(date, aicc_regex.CMIString256)) {\n      this.#date = date;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, aicc_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #why_left\n   * @return {string}\n   */\n  get why_left() {\n    return this.#why_left;\n  }\n\n  /**\n   * Setter for #why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left) {\n    if (check12ValidFormat(why_left, aicc_regex.CMIString256)) {\n      this.#why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for #time_in_element\n   * @return {string}\n   */\n  get time_in_element() {\n    return this.#time_in_element;\n  }\n\n  /**\n   * Setter for #time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element) {\n    if (check12ValidFormat(time_in_element, aicc_regex.CMITime)) {\n      this.#time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'location_id': this.location_id,\n      'date': this.date,\n      'time': this.time,\n      'status': this.status,\n      'why_left': this.why_left,\n      'time_in_element': this.time_in_element,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({children: aicc_constants.tries_children});\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: aicc_constants.score_children,\n          score_range: aicc_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidErrorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidTypeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n          invalidRangeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #status = '';\n  #time = '';\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, aicc_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'status': this.status,\n      'time': this.time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({children: aicc_constants.attempt_records_children});\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: aicc_constants.score_children,\n          score_range: aicc_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidErrorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidTypeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n          invalidRangeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #lesson_status = '';\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, aicc_regex.CMIStatus2)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'lesson_status': this.lesson_status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super();\n  }\n\n  #content = '';\n  #location = '';\n  #time = '';\n\n  /**\n   * Getter for #content\n   * @return {string}\n   */\n  get content() {\n    return this.#content;\n  }\n\n  /**\n   * Setter for #content\n   * @param {string} content\n   */\n  set content(content) {\n    if (check12ValidFormat(content, aicc_regex.CMIString256)) {\n      this.#content = content;\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check12ValidFormat(location, aicc_regex.CMIString256)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setting for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaulation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'content': this.content,\n      'location': this.location,\n      'time': this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport APIConstants from '../constants/api_constants';\nimport ErrorCodes from '../constants/error_codes';\nimport {ValidationError} from '../exceptions';\nimport Regex from '../constants/regex';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst scorm12_regex = Regex.scorm12;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {string} errorMessage\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkValidFormat(\n    value: String,\n    regexPattern: String,\n    errorCode: number,\n    errorMessage: String,\n    allowEmptyString?: boolean) {\n  const formatRegex = new RegExp(regexPattern);\n  const matches = value.match(formatRegex);\n  if (allowEmptyString && value === '') {\n    return true;\n  }\n  if (value === undefined || !matches || matches[0] === '') {\n    throw new ValidationError(errorCode, errorMessage);\n  }\n  return true;\n}\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {*} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {string} errorMessage\n * @return {boolean}\n */\nexport function checkValidRange(\n    value: any, rangePattern: String, errorCode: number, errorMessage: String) {\n  const ranges = rangePattern.split('#');\n  value = value * 1.0;\n  if (value >= ranges[0]) {\n    if ((ranges[1] === '*') || (value <= ranges[1])) {\n      return true;\n    } else {\n      throw new ValidationError(errorCode, errorMessage);\n    }\n  } else {\n    throw new ValidationError(errorCode, errorMessage);\n  }\n}\n\n/**\n * Base class for API cmi objects\n */\nexport class BaseCMI {\n  jsonString = false;\n  #initialized = false;\n  #start_time;\n\n  /**\n   * Constructor for BaseCMI, just marks the class as abstract\n   */\n  constructor() {\n    if (new.target === BaseCMI) {\n      throw new TypeError('Cannot construct BaseCMI instances directly');\n    }\n  }\n\n  /**\n   * Getter for #initialized\n   * @return {boolean}\n   */\n  get initialized() {\n    return this.#initialized;\n  }\n\n  /**\n   * Getter for #start_time\n   * @return {Number}\n   */\n  get start_time() {\n    return this.#start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    this.#initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime() {\n    this.#start_time = new Date().getTime();\n  }\n}\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  /**\n   * Constructor for *.score\n   * @param {string} score_children\n   * @param {string} score_range\n   * @param {string} max\n   * @param {number} invalidErrorCode\n   * @param {string} invalidErrorMessage\n   * @param {number} invalidTypeCode\n   * @param {string} invalidTypeMessage\n   * @param {number} invalidRangeCode\n   * @param {string} invalidRangeMessage\n   * @param {string} decimalRegex\n   */\n  constructor(\n      {\n        score_children,\n        score_range,\n        max,\n        invalidErrorCode,\n        invalidErrorMessage,\n        invalidTypeCode,\n        invalidTypeMessage,\n        invalidRangeCode,\n        invalidRangeMessage,\n        decimalRegex,\n      }) {\n    super();\n\n    this.#_children = score_children ||\n        scorm12_constants.score_children;\n    this.#_score_range = !score_range ? false : scorm12_regex.score_range;\n    this.#max = (max || max === '') ? max : '100';\n    this.#_invalid_error_code = invalidErrorCode ||\n        scorm12_error_codes.INVALID_SET_VALUE;\n    this.#_invalid_error_message = invalidErrorMessage ||\n        scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage;\n    this.#_invalid_type_code = invalidTypeCode ||\n        scorm12_error_codes.TYPE_MISMATCH;\n    this.#_invalid_type_message = invalidTypeMessage ||\n        scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage;\n    this.#_invalid_range_code = invalidRangeCode ||\n        scorm12_error_codes.VALUE_OUT_OF_RANGE;\n    this.#_invalid_range_message = invalidRangeMessage ||\n        scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage;\n    this.#_decimal_regex = decimalRegex ||\n        scorm12_regex.CMIDecimal;\n  }\n\n  #_children;\n  #_score_range;\n  #_invalid_error_code;\n  #_invalid_error_message;\n  #_invalid_type_code;\n  #_invalid_type_message;\n  #_invalid_range_code;\n  #_invalid_range_message;\n  #_decimal_regex;\n  #raw = '';\n  #min = '';\n  #max;\n\n  /**\n   * Getter for _children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#_invalid_error_code, this.#_invalid_error_message);\n  }\n\n  /**\n   * Getter for #raw\n   * @return {string}\n   */\n  get raw() {\n    return this.#raw;\n  }\n\n  /**\n   * Setter for #raw\n   * @param {string} raw\n   */\n  set raw(raw) {\n    if (checkValidFormat(raw, this.#_decimal_regex,\n        this.#_invalid_type_code, this.#_invalid_type_message) &&\n        (!this.#_score_range ||\n            checkValidRange(raw, this.#_score_range,\n                this.#_invalid_range_code, this.#_invalid_range_message))) {\n      this.#raw = raw;\n    }\n  }\n\n  /**\n   * Getter for #min\n   * @return {string}\n   */\n  get min() {\n    return this.#min;\n  }\n\n  /**\n   * Setter for #min\n   * @param {string} min\n   */\n  set min(min) {\n    if (checkValidFormat(min, this.#_decimal_regex,\n        this.#_invalid_type_code, this.#_invalid_type_message) &&\n        (!this.#_score_range ||\n            checkValidRange(min, this.#_score_range,\n                this.#_invalid_range_code, this.#_invalid_range_message))) {\n      this.#min = min;\n    }\n  }\n\n  /**\n   * Getter for #max\n   * @return {string}\n   */\n  get max() {\n    return this.#max;\n  }\n\n  /**\n   * Setter for #max\n   * @param {string} max\n   */\n  set max(max) {\n    if (checkValidFormat(max, this.#_decimal_regex,\n        this.#_invalid_type_code, this.#_invalid_type_message) &&\n        (!this.#_score_range ||\n            checkValidRange(max, this.#_score_range,\n                this.#_invalid_range_code, this.#_invalid_range_message))) {\n      this.#max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {{min: string, max: string, raw: string}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'raw': this.raw,\n      'min': this.min,\n      'max': this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  /**\n   * Constructor cmi *.n arrays\n   * @param {string} children\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   */\n  constructor({children, errorCode, errorMessage}) {\n    super();\n    this.#_children = children;\n    this.#errorCode = errorCode;\n    this.#errorMessage = errorMessage;\n    this.childArray = [];\n  }\n\n  #errorCode;\n  #errorMessage;\n  #_children;\n\n  /**\n   * Getter for _children\n   * @return {*}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#errorCode, this.#errorMessage);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count() {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count) {\n    throw new ValidationError(this.#errorCode, this.#errorMessage);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + ''] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport { BaseCMI, checkValidFormat, checkValidRange, CMIArray, CMIScore } from './common'\nimport APIConstants from '../constants/api_constants'\nimport ErrorCodes from '../constants/error_codes'\nimport Regex from '../constants/regex'\nimport { ValidationError } from '../exceptions'\nimport * as Utilities from '../utilities'\nimport * as Util from '../utilities'\n\nconst scorm12_constants = APIConstants.scorm12\nconst scorm12_regex = Regex.scorm12\nconst scorm12_error_codes = ErrorCodes.scorm12\n\n/**\n * Helper method for throwing Read Only error\n */\nexport function throwReadOnlyError() {\n    throw new ValidationError(\n        scorm12_error_codes.READ_ONLY_ELEMENT,\n        scorm12_constants.error_descriptions[scorm12_error_codes.READ_ONLY_ELEMENT].detailMessage\n    )\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nexport function throwWriteOnlyError() {\n    throw new ValidationError(\n        scorm12_error_codes.WRITE_ONLY_ELEMENT,\n        scorm12_constants.error_descriptions[scorm12_error_codes.WRITE_ONLY_ELEMENT].detailMessage\n    )\n}\n\n/**\n * Helper method for throwing Invalid Set error\n */\nfunction throwInvalidValueError() {\n    throw new ValidationError(\n        scorm12_error_codes.INVALID_SET_VALUE,\n        scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage\n    )\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(value: String, regexPattern: String, allowEmptyString?: boolean) {\n    return checkValidFormat(\n        value,\n        regexPattern,\n        scorm12_error_codes.TYPE_MISMATCH,\n        scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage,\n        allowEmptyString\n    )\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(value: any, rangePattern: String, allowEmptyString?: boolean) {\n    return checkValidRange(\n        value,\n        rangePattern,\n        scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n        allowEmptyString\n    )\n}\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseCMI {\n    #_children = ''\n    #_version = '3.4'\n    #launch_data = ''\n    #comments = ''\n    #comments_from_lms = ''\n\n    student_data = null\n\n    /**\n     * Constructor for the SCORM 1.2 cmi object\n     * @param {string} cmi_children\n     * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n     * @param {boolean} initialized\n     */\n    constructor(cmi_children, student_data, initialized: boolean) {\n        super()\n\n        if (initialized) this.initialize()\n\n        this.#_children = cmi_children ? cmi_children : scorm12_constants.cmi_children\n        this.core = new CMICore()\n        this.objectives = new CMIObjectives()\n        this.student_data = student_data ? student_data : new CMIStudentData()\n        this.student_preference = new CMIStudentPreference()\n        this.interactions = new CMIInteractions()\n    }\n\n    /**\n     * Called when the API has been initialized after the CMI has been created\n     */\n    initialize() {\n        super.initialize()\n        this.core?.initialize()\n        this.objectives?.initialize()\n        this.student_data?.initialize()\n        this.student_preference?.initialize()\n        this.interactions?.initialize()\n    }\n\n    /**\n     * toJSON for cmi\n     *\n     * @return {\n     *    {\n     *      suspend_data: string,\n     *      launch_data: string,\n     *      comments: string,\n     *      comments_from_lms: string,\n     *      core: CMICore,\n     *      objectives: CMIObjectives,\n     *      student_data: CMIStudentData,\n     *      student_preference: CMIStudentPreference,\n     *      interactions: CMIInteractions\n     *    }\n     *  }\n     */\n    toJSON() {\n        this.jsonString = true\n        const result = {\n            suspend_data: this.suspend_data,\n            launch_data: this.launch_data,\n            comments: this.comments,\n            comments_from_lms: this.comments_from_lms,\n            core: this.core,\n            objectives: this.objectives,\n            student_data: this.student_data,\n            student_preference: this.student_preference,\n            interactions: this.interactions,\n        }\n        delete this.jsonString\n        return result\n    }\n\n    /**\n     * Getter for #_version\n     * @return {string}\n     */\n    get _version() {\n        return this.#_version\n    }\n\n    /**\n     * Setter for #_version. Just throws an error.\n     * @param {string} _version\n     */\n    set _version(_version) {\n        throwInvalidValueError()\n    }\n\n    /**\n     * Getter for #_children\n     * @return {string}\n     */\n    get _children() {\n        return this.#_children\n    }\n\n    /**\n     * Setter for #_version. Just throws an error.\n     * @param {string} _children\n     */\n    set _children(_children) {\n        throwInvalidValueError()\n    }\n\n    /**\n     * Getter for #suspend_data\n     * @return {string}\n     */\n    get suspend_data() {\n        return this.core?.suspend_data\n    }\n\n    /**\n     * Setter for #suspend_data\n     * @param {string} suspend_data\n     */\n    set suspend_data(suspend_data) {\n        if (this.core) {\n            this.core.suspend_data = suspend_data\n        }\n    }\n\n    /**\n     * Getter for #launch_data\n     * @return {string}\n     */\n    get launch_data() {\n        return this.#launch_data\n    }\n\n    /**\n     * Setter for #launch_data. Can only be called before  initialization.\n     * @param {string} launch_data\n     */\n    set launch_data(launch_data) {\n        !this.initialized ? (this.#launch_data = launch_data) : throwReadOnlyError()\n    }\n\n    /**\n     * Getter for #comments\n     * @return {string}\n     */\n    get comments() {\n        return this.#comments\n    }\n\n    /**\n     * Setter for #comments\n     * @param {string} comments\n     */\n    set comments(comments) {\n        if (check12ValidFormat(comments, scorm12_regex.CMIString4096, true)) {\n            this.#comments = comments\n        }\n    }\n\n    /**\n     * Getter for #comments_from_lms\n     * @return {string}\n     */\n    get comments_from_lms() {\n        return this.#comments_from_lms\n    }\n\n    /**\n     * Setter for #comments_from_lms. Can only be called before  initialization.\n     * @param {string} comments_from_lms\n     */\n    set comments_from_lms(comments_from_lms) {\n        !this.initialized ? (this.#comments_from_lms = comments_from_lms) : throwReadOnlyError()\n    }\n\n    /**\n     * Adds the current session time to the existing total time.\n     *\n     * @return {string}\n     */\n    getCurrentTotalTime() {\n        return this.core.getCurrentTotalTime(this.start_time)\n    }\n\n    /**\n     * Get the current session time generated by the lms.\n     *\n     * @return {string}\n     */\n    getCurrentSessionTime() {\n        return this.core.getCurrentSessionTime(this.start_time)\n    }\n}\n\n/**\n * Class representing the cmi.core object\n * @extends BaseCMI\n */\nclass CMICore extends BaseCMI {\n    /**\n     * Constructor for cmi.core\n     */\n    constructor() {\n        super()\n\n        this.score = new CMIScore({\n            score_children: scorm12_constants.score_children,\n            score_range: scorm12_regex.score_range,\n            invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n            invalidErrorMessage:\n                scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n            invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n            invalidTypeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage,\n            invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n            invalidRangeMessage:\n                scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n        })\n    }\n\n    /**\n     * Called when the API has been initialized after the CMI has been created\n     */\n    initialize() {\n        super.initialize()\n        this.score?.initialize()\n    }\n\n    #_children = scorm12_constants.core_children\n    #student_id = ''\n    #student_name = ''\n    #lesson_location = ''\n    #credit = ''\n    #lesson_status = 'not attempted'\n    #entry = ''\n    #total_time = ''\n    #lesson_mode = 'normal'\n    #exit = ''\n    #session_time = '00:00:00'\n    #suspend_data = ''\n\n    /**\n     * Getter for #_children\n     * @return {string}\n     * @private\n     */\n    get _children() {\n        return this.#_children\n    }\n\n    /**\n     * Setter for #_children. Just throws an error.\n     * @param {string} _children\n     * @private\n     */\n    set _children(_children) {\n        throwInvalidValueError()\n    }\n\n    /**\n     * Getter for #student_id\n     * @return {string}\n     */\n    get student_id() {\n        return this.#student_id\n    }\n\n    /**\n     * Setter for #student_id. Can only be called before  initialization.\n     * @param {string} student_id\n     */\n    set student_id(student_id) {\n        !this.initialized ? (this.#student_id = student_id) : throwReadOnlyError()\n    }\n\n    /**\n     * Getter for #student_name\n     * @return {string}\n     */\n    get student_name() {\n        return this.#student_name\n    }\n\n    /**\n     * Setter for #student_name. Can only be called before  initialization.\n     * @param {string} student_name\n     */\n    set student_name(student_name) {\n        !this.initialized ? (this.#student_name = student_name) : throwReadOnlyError()\n    }\n\n    /**\n     * Getter for #lesson_location\n     * @return {string}\n     */\n    get lesson_location() {\n        return this.#lesson_location\n    }\n\n    /**\n     * Setter for #lesson_location\n     * @param {string} lesson_location\n     */\n    set lesson_location(lesson_location) {\n        if (check12ValidFormat(lesson_location, scorm12_regex.CMIString256, true)) {\n            this.#lesson_location = lesson_location\n        }\n    }\n\n    /**\n     * Getter for #credit\n     * @return {string}\n     */\n    get credit() {\n        return this.#credit\n    }\n\n    /**\n     * Setter for #credit. Can only be called before  initialization.\n     * @param {string} credit\n     */\n    set credit(credit) {\n        !this.initialized ? (this.#credit = credit) : throwReadOnlyError()\n    }\n\n    /**\n     * Getter for #lesson_status\n     * @return {string}\n     */\n    get lesson_status() {\n        return this.#lesson_status\n    }\n\n    /**\n     * Setter for #lesson_status\n     * @param {string} lesson_status\n     */\n    set lesson_status(lesson_status) {\n        if (this.initialized) {\n            if (check12ValidFormat(lesson_status, scorm12_regex.CMIStatus)) {\n                this.#lesson_status = lesson_status\n            }\n        } else {\n            if (check12ValidFormat(lesson_status, scorm12_regex.CMIStatus2)) {\n                this.#lesson_status = lesson_status\n            }\n        }\n    }\n\n    /**\n     * Getter for #entry\n     * @return {string}\n     */\n    get entry() {\n        return this.#entry\n    }\n\n    /**\n     * Setter for #entry. Can only be called before  initialization.\n     * @param {string} entry\n     */\n    set entry(entry) {\n        !this.initialized ? (this.#entry = entry) : throwReadOnlyError()\n    }\n\n    /**\n     * Getter for #total_time\n     * @return {string}\n     */\n    get total_time() {\n        return this.#total_time\n    }\n\n    /**\n     * Setter for #total_time. Can only be called before  initialization.\n     * @param {string} total_time\n     */\n    set total_time(total_time) {\n        !this.initialized ? (this.#total_time = total_time) : throwReadOnlyError()\n    }\n\n    /**\n     * Getter for #lesson_mode\n     * @return {string}\n     */\n    get lesson_mode() {\n        return this.#lesson_mode\n    }\n\n    /**\n     * Setter for #lesson_mode. Can only be called before  initialization.\n     * @param {string} lesson_mode\n     */\n    set lesson_mode(lesson_mode) {\n        !this.initialized ? (this.#lesson_mode = lesson_mode) : throwReadOnlyError()\n    }\n\n    /**\n     * Getter for #exit. Should only be called during JSON export.\n     * @return {*}\n     */\n    get exit() {\n        return !this.jsonString ? throwWriteOnlyError() : this.#exit\n    }\n\n    /**\n     * Setter for #exit\n     * @param {string} exit\n     */\n    set exit(exit) {\n        if (check12ValidFormat(exit, scorm12_regex.CMIExit, true)) {\n            this.#exit = exit\n        }\n    }\n\n    /**\n     * Getter for #session_time. Should only be called during JSON export.\n     * @return {*}\n     */\n    get session_time() {\n        return !this.jsonString ? throwWriteOnlyError() : this.#session_time\n    }\n\n    /**\n     * Setter for #session_time\n     * @param {string} session_time\n     */\n    set session_time(session_time) {\n        if (check12ValidFormat(session_time, scorm12_regex.CMITimespan)) {\n            this.#session_time = session_time\n        }\n    }\n\n    /**\n     * Getter for #suspend_data\n     * @return {string}\n     */\n    get suspend_data() {\n        return this.#suspend_data\n    }\n\n    /**\n     * Setter for #suspend_data\n     * @param {string} suspend_data\n     */\n    set suspend_data(suspend_data) {\n        if (check12ValidFormat(suspend_data, scorm12_regex.CMIString4096, true)) {\n            this.#suspend_data = suspend_data\n        }\n    }\n\n    /**\n     * Adds the current session time to the existing total time.\n     * @param {Number} start_time\n     * @return {string}\n     */\n    getCurrentTotalTime(start_time: Number) {\n        let sessionTime = this.#session_time\n        const startTime = start_time\n\n        if (typeof startTime !== 'undefined' && startTime !== null) {\n            const seconds = new Date().getTime() - startTime\n            sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000)\n        }\n\n        return Utilities.addHHMMSSTimeStrings(this.#total_time, sessionTime, new RegExp(scorm12_regex.CMITimespan))\n    }\n\n    /**\n     * Set the current session time.\n     * @param {Number} start_time\n     * @return {string}\n     */\n    getCurrentSessionTime(start_time: Number) {\n        let sessionTime = this.#session_time\n        const startTime = start_time\n\n        if (typeof startTime !== 'undefined' && startTime !== null) {\n            const seconds = new Date().getTime() - startTime\n            sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000)\n        }\n        return sessionTime\n    }\n\n    /**\n     * toJSON for cmi.core\n     *\n     * @return {\n     *    {\n     *      student_name: string,\n     *      entry: string,\n     *      exit: string,\n     *      score: CMIScore,\n     *      student_id: string,\n     *      lesson_mode: string,\n     *      lesson_location: string,\n     *      lesson_status: string,\n     *      credit: string,\n     *      session_time: *\n     *    }\n     *  }\n     */\n    toJSON() {\n        this.jsonString = true\n        const result = {\n            student_id: this.student_id,\n            student_name: this.student_name,\n            lesson_location: this.lesson_location,\n            credit: this.credit,\n            lesson_status: this.lesson_status,\n            entry: this.entry,\n            lesson_mode: this.lesson_mode,\n            exit: this.exit,\n            session_time: this.session_time,\n            score: this.score,\n        }\n        delete this.jsonString\n        return result\n    }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives object\n * @extends CMIArray\n */\nclass CMIObjectives extends CMIArray {\n    /**\n     * Constructor for cmi.objectives\n     */\n    constructor() {\n        super({\n            children: scorm12_constants.objectives_children,\n            errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n            errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n        })\n    }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n    #_children\n    #mastery_score = ''\n    #max_time_allowed = ''\n    #time_limit_action = ''\n\n    /**\n     * Constructor for cmi.student_data\n     * @param {string} student_data_children\n     */\n    constructor(student_data_children) {\n        super()\n\n        this.#_children = student_data_children ? student_data_children : scorm12_constants.student_data_children\n    }\n\n    /**\n     * Getter for #_children\n     * @return {*}\n     * @private\n     */\n    get _children() {\n        return this.#_children\n    }\n\n    /**\n     * Setter for #_children. Just throws an error.\n     * @param {string} _children\n     * @private\n     */\n    set _children(_children) {\n        throwInvalidValueError()\n    }\n\n    /**\n     * Getter for #master_score\n     * @return {string}\n     */\n    get mastery_score() {\n        return this.#mastery_score\n    }\n\n    /**\n     * Setter for #master_score. Can only be called before  initialization.\n     * @param {string} mastery_score\n     */\n    set mastery_score(mastery_score) {\n        !this.initialized ? (this.#mastery_score = mastery_score) : throwReadOnlyError()\n    }\n\n    /**\n     * Getter for #max_time_allowed\n     * @return {string}\n     */\n    get max_time_allowed() {\n        return this.#max_time_allowed\n    }\n\n    /**\n     * Setter for #max_time_allowed. Can only be called before  initialization.\n     * @param {string} max_time_allowed\n     */\n    set max_time_allowed(max_time_allowed) {\n        !this.initialized ? (this.#max_time_allowed = max_time_allowed) : throwReadOnlyError()\n    }\n\n    /**\n     * Getter for #time_limit_action\n     * @return {string}\n     */\n    get time_limit_action() {\n        return this.#time_limit_action\n    }\n\n    /**\n     * Setter for #time_limit_action. Can only be called before  initialization.\n     * @param {string} time_limit_action\n     */\n    set time_limit_action(time_limit_action) {\n        !this.initialized ? (this.#time_limit_action = time_limit_action) : throwReadOnlyError()\n    }\n\n    /**\n     * toJSON for cmi.student_data\n     *\n     * @return {\n     *    {\n     *      max_time_allowed: string,\n     *      time_limit_action: string,\n     *      mastery_score: string\n     *    }\n     *  }\n     */\n    toJSON() {\n        this.jsonString = true\n        const result = {\n            mastery_score: this.mastery_score,\n            max_time_allowed: this.max_time_allowed,\n            time_limit_action: this.time_limit_action,\n        }\n        delete this.jsonString\n        return result\n    }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n    #_children\n\n    /**\n     * Constructor for cmi.student_preference\n     * @param {string} student_preference_children\n     */\n    constructor(student_preference_children) {\n        super()\n\n        this.#_children = student_preference_children\n            ? student_preference_children\n            : scorm12_constants.student_preference_children\n    }\n\n    #audio = ''\n    #language = ''\n    #speed = ''\n    #text = ''\n\n    /**\n     * Getter for #_children\n     * @return {string}\n     * @private\n     */\n    get _children() {\n        return this.#_children\n    }\n\n    /**\n     * Setter for #_children. Just throws an error.\n     * @param {string} _children\n     * @private\n     */\n    set _children(_children) {\n        throwInvalidValueError()\n    }\n\n    /**\n     * Getter for #audio\n     * @return {string}\n     */\n    get audio() {\n        return this.#audio\n    }\n\n    /**\n     * Setter for #audio\n     * @param {string} audio\n     */\n    set audio(audio) {\n        if (\n            check12ValidFormat(audio, scorm12_regex.CMISInteger) &&\n            check12ValidRange(audio, scorm12_regex.audio_range)\n        ) {\n            this.#audio = audio\n        }\n    }\n\n    /**\n     * Getter for #language\n     * @return {string}\n     */\n    get language() {\n        return this.#language\n    }\n\n    /**\n     * Setter for #language\n     * @param {string} language\n     */\n    set language(language) {\n        if (check12ValidFormat(language, scorm12_regex.CMIString256)) {\n            this.#language = language\n        }\n    }\n\n    /**\n     * Getter for #speed\n     * @return {string}\n     */\n    get speed() {\n        return this.#speed\n    }\n\n    /**\n     * Setter for #speed\n     * @param {string} speed\n     */\n    set speed(speed) {\n        if (\n            check12ValidFormat(speed, scorm12_regex.CMISInteger) &&\n            check12ValidRange(speed, scorm12_regex.speed_range)\n        ) {\n            this.#speed = speed\n        }\n    }\n\n    /**\n     * Getter for #text\n     * @return {string}\n     */\n    get text() {\n        return this.#text\n    }\n\n    /**\n     * Setter for #text\n     * @param {string} text\n     */\n    set text(text) {\n        if (check12ValidFormat(text, scorm12_regex.CMISInteger) && check12ValidRange(text, scorm12_regex.text_range)) {\n            this.#text = text\n        }\n    }\n\n    /**\n     * toJSON for cmi.student_preference\n     *\n     * @return {\n     *    {\n     *      audio: string,\n     *      language: string,\n     *      speed: string,\n     *      text: string\n     *    }\n     *  }\n     */\n    toJSON() {\n        this.jsonString = true\n        const result = {\n            audio: this.audio,\n            language: this.language,\n            speed: this.speed,\n            text: this.text,\n        }\n        delete this.jsonString\n        return result\n    }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions object\n * @extends BaseCMI\n */\nclass CMIInteractions extends CMIArray {\n    /**\n     * Constructor for cmi.interactions\n     */\n    constructor() {\n        super({\n            children: scorm12_constants.interactions_children,\n            errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n            errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n        })\n    }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n    /**\n     * Constructor for cmi.interactions.n object\n     */\n    constructor() {\n        super()\n\n        this.objectives = new CMIArray({\n            errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n            errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n            children: scorm12_constants.objectives_children,\n        })\n        this.correct_responses = new CMIArray({\n            errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n            errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n            children: scorm12_constants.correct_responses_children,\n        })\n    }\n\n    /**\n     * Called when the API has been initialized after the CMI has been created\n     */\n    initialize() {\n        super.initialize()\n        this.objectives?.initialize()\n        this.correct_responses?.initialize()\n    }\n\n    #id = ''\n    #time = ''\n    #type = ''\n    #weighting = ''\n    #student_response = ''\n    #result = ''\n    #latency = ''\n\n    /**\n     * Getter for #id. Should only be called during JSON export.\n     * @return {*}\n     */\n    get id() {\n        return !this.jsonString ? throwWriteOnlyError() : this.#id\n    }\n\n    /**\n     * Setter for #id\n     * @param {string} id\n     */\n    set id(id) {\n        if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n            this.#id = id\n        }\n    }\n\n    /**\n     * Getter for #time. Should only be called during JSON export.\n     * @return {*}\n     */\n    get time() {\n        return !this.jsonString ? throwWriteOnlyError() : this.#time\n    }\n\n    /**\n     * Setter for #time\n     * @param {string} time\n     */\n    set time(time) {\n        if (check12ValidFormat(time, scorm12_regex.CMITime)) {\n            this.#time = time\n        }\n    }\n\n    /**\n     * Getter for #type. Should only be called during JSON export.\n     * @return {*}\n     */\n    get type() {\n        return !this.jsonString ? throwWriteOnlyError() : this.#type\n    }\n\n    /**\n     * Setter for #type\n     * @param {string} type\n     */\n    set type(type) {\n        if (check12ValidFormat(type, scorm12_regex.CMIType)) {\n            this.#type = type\n        }\n    }\n\n    /**\n     * Getter for #weighting. Should only be called during JSON export.\n     * @return {*}\n     */\n    get weighting() {\n        return !this.jsonString ? throwWriteOnlyError() : this.#weighting\n    }\n\n    /**\n     * Setter for #weighting\n     * @param {string} weighting\n     */\n    set weighting(weighting) {\n        if (\n            check12ValidFormat(weighting, scorm12_regex.CMIDecimal) &&\n            check12ValidRange(weighting, scorm12_regex.weighting_range)\n        ) {\n            this.#weighting = weighting\n        }\n    }\n\n    /**\n     * Getter for #student_response. Should only be called during JSON export.\n     * @return {*}\n     */\n    get student_response() {\n        return !this.jsonString ? throwWriteOnlyError() : this.#student_response\n    }\n\n    /**\n     * Setter for #student_response\n     * @param {string} student_response\n     */\n    set student_response(student_response) {\n        if (check12ValidFormat(student_response, scorm12_regex.CMIFeedback, true)) {\n            this.#student_response = student_response\n        }\n    }\n\n    /**\n     * Getter for #result. Should only be called during JSON export.\n     * @return {*}\n     */\n    get result() {\n        return !this.jsonString ? throwWriteOnlyError() : this.#result\n    }\n\n    /**\n     * Setter for #result\n     * @param {string} result\n     */\n    set result(result) {\n        if (check12ValidFormat(result, scorm12_regex.CMIResult)) {\n            this.#result = result\n        }\n    }\n\n    /**\n     * Getter for #latency. Should only be called during JSON export.\n     * @return {*}\n     */\n    get latency() {\n        return !this.jsonString ? throwWriteOnlyError() : this.#latency\n    }\n\n    /**\n     * Setter for #latency\n     * @param {string} latency\n     */\n    set latency(latency) {\n        if (check12ValidFormat(latency, scorm12_regex.CMITimespan)) {\n            this.#latency = latency\n        }\n    }\n\n    /**\n     * toJSON for cmi.interactions.n\n     *\n     * @return {\n     *    {\n     *      id: string,\n     *      time: string,\n     *      type: string,\n     *      weighting: string,\n     *      student_response: string,\n     *      result: string,\n     *      latency: string,\n     *      objectives: CMIArray,\n     *      correct_responses: CMIArray\n     *    }\n     *  }\n     */\n    toJSON() {\n        this.jsonString = true\n        const result = {\n            id: this.id,\n            time: this.time,\n            type: this.type,\n            weighting: this.weighting,\n            student_response: this.student_response,\n            result: this.result,\n            latency: this.latency,\n            objectives: this.objectives,\n            correct_responses: this.correct_responses,\n        }\n        delete this.jsonString\n        return result\n    }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n    /**\n     * Constructor for cmi.objectives.n\n     */\n    constructor() {\n        super()\n\n        this.score = new CMIScore({\n            score_children: scorm12_constants.score_children,\n            score_range: scorm12_regex.score_range,\n            invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n            invalidErrorMessage:\n                scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n            invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n            invalidTypeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage,\n            invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n            invalidRangeMessage:\n                scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n        })\n    }\n\n    #id = ''\n    #status = ''\n\n    /**\n     * Getter for #id\n     * @return {\"\"}\n     */\n    get id() {\n        return this.#id\n    }\n\n    /**\n     * Setter for #id\n     * @param {string} id\n     */\n    set id(id) {\n        if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n            this.#id = id\n        }\n    }\n\n    /**\n     * Getter for #status\n     * @return {\"\"}\n     */\n    get status() {\n        return this.#status\n    }\n\n    /**\n     * Setter for #status\n     * @param {string} status\n     */\n    set status(status) {\n        if (check12ValidFormat(status, scorm12_regex.CMIStatus2)) {\n            this.#status = status\n        }\n    }\n\n    /**\n     * toJSON for cmi.objectives.n\n     * @return {\n     *    {\n     *      id: string,\n     *      status: string,\n     *      score: CMIScore\n     *    }\n     *  }\n     */\n    toJSON() {\n        this.jsonString = true\n        const result = {\n            id: this.id,\n            status: this.status,\n            score: this.score,\n        }\n        delete this.jsonString\n        return result\n    }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n    /**\n     * Constructor for cmi.interactions.n.objectives.n\n     */\n    constructor() {\n        super()\n    }\n\n    #id = ''\n\n    /**\n     * Getter for #id\n     * @return {\"\"}\n     */\n    get id() {\n        return this.#id\n    }\n\n    /**\n     * Setter for #id\n     * @param {string} id\n     */\n    set id(id) {\n        if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n            this.#id = id\n        }\n    }\n\n    /**\n     * toJSON for cmi.interactions.n.objectives.n\n     * @return {\n     *    {\n     *      id: string\n     *    }\n     *  }\n     */\n    toJSON() {\n        this.jsonString = true\n        const result = {\n            id: this.id,\n        }\n        delete this.jsonString\n        return result\n    }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n    /**\n     * Constructor for cmi.interactions.correct_responses.n\n     */\n    constructor() {\n        super()\n    }\n\n    #pattern = ''\n\n    /**\n     * Getter for #pattern\n     * @return {string}\n     */\n    get pattern() {\n        return !this.jsonString ? throwWriteOnlyError() : this.#pattern\n    }\n\n    /**\n     * Setter for #pattern\n     * @param {string} pattern\n     */\n    set pattern(pattern) {\n        if (check12ValidFormat(pattern, scorm12_regex.CMIFeedback, true)) {\n            this.#pattern = pattern\n        }\n    }\n\n    /**\n     * toJSON for cmi.interactions.correct_responses.n\n     * @return {\n     *    {\n     *      pattern: string\n     *    }\n     *  }\n     */\n    toJSON() {\n        this.jsonString = true\n        const result = {\n            pattern: this.pattern,\n        }\n        delete this.jsonString\n        return result\n    }\n}\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n    /**\n     * Constructor for NAV object\n     */\n    constructor() {\n        super()\n    }\n\n    #event = ''\n\n    /**\n     * Getter for #event\n     * @return {string}\n     */\n    get event() {\n        return this.#event\n    }\n\n    /**\n     * Setter for #event\n     * @param {string} event\n     */\n    set event(event) {\n        if (check12ValidFormat(event, scorm12_regex.NAVEvent)) {\n            this.#event = event\n        }\n    }\n\n    /**\n     * toJSON for nav object\n     * @return {\n     *    {\n     *      event: string\n     *    }\n     *  }\n     */\n    toJSON() {\n        this.jsonString = true\n        const result = {\n            event: this.event,\n        }\n        delete this.jsonString\n        return result\n    }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport APIConstants from '../constants/api_constants';\nimport Regex from '../constants/regex';\nimport ErrorCodes from '../constants/error_codes';\nimport Responses from '../constants/response_constants';\nimport {ValidationError} from '../exceptions';\nimport * as Util from '../utilities';\n\nconst scorm2004_constants = APIConstants.scorm2004;\nconst scorm2004_error_codes = ErrorCodes.scorm2004;\nconst learner_responses = Responses.learner;\n\nconst scorm2004_regex = Regex.scorm2004;\n\n/**\n * Helper method for throwing Read Only error\n */\nfunction throwReadOnlyError() {\n  throw new ValidationError(\n      scorm2004_error_codes.READ_ONLY_ELEMENT,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage\n  );\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nfunction throwWriteOnlyError() {\n  throw new ValidationError(\n      scorm2004_error_codes.WRITE_ONLY_ELEMENT,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.WRITE_ONLY_ELEMENT].detailMessage\n  );\n}\n\n/**\n * Helper method for throwing Type Mismatch error\n */\nfunction throwTypeMismatchError() {\n  throw new ValidationError(\n      scorm2004_error_codes.TYPE_MISMATCH,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.TYPE_MISMATCH].detailMessage\n  );\n}\n\n/**\n * Helper method for throwing Dependency Not Established error\n */\nfunction throwDependencyNotEstablishedError() {\n  throw new ValidationError(\n      scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED].detailMessage\n  );\n}\n\n/**\n * Helper method for throwing Dependency Not Established error\n */\nfunction throwGeneralSetError() {\n  throw new ValidationError(\n      scorm2004_error_codes.GENERAL_SET_FAILURE,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.GENERAL_SET_FAILURE].detailMessage\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nfunction check2004ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm2004_error_codes.TYPE_MISMATCH,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.TYPE_MISMATCH].detailMessage,\n      allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nfunction check2004ValidRange(value: any, rangePattern: String) {\n  return checkValidRange(value, rangePattern,\n      scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.VALUE_OUT_OF_RANGE].detailMessage);\n}\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super();\n\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n\n    if (initialized) this.initialize();\n  }\n\n  #_version = '1.0';\n  #_children = scorm2004_constants.cmi_children;\n  #completion_status = 'unknown';\n  #completion_threshold = '';\n  #credit = 'credit';\n  #entry = '';\n  #exit = '';\n  #launch_data = '';\n  #learner_id = '';\n  #learner_name = '';\n  #location = '';\n  #max_time_allowed = '';\n  #mode = 'normal';\n  #progress_measure = '';\n  #scaled_passing_score = '';\n  #session_time = 'PT0H0M0S';\n  #success_status = 'unknown';\n  #suspend_data = '';\n  #time_limit_action = 'continue,no message';\n  #total_time = '';\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   * @private\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_threshold\n   * @return {string}\n   */\n  get completion_threshold() {\n    return this.#completion_threshold;\n  }\n\n  /**\n   * Setter for #completion_threshold. Can only be called before  initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold) {\n    !this.initialized ?\n        this.#completion_threshold = completion_threshold :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Setter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Getter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check2004ValidFormat(exit, scorm2004_regex.CMIExit, true)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_id\n   * @return {string}\n   */\n  get learner_id() {\n    return this.#learner_id;\n  }\n\n  /**\n   * Setter for #learner_id. Can only be called before  initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id) {\n    !this.initialized ? this.#learner_id = learner_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_name\n   * @return {string}\n   */\n  get learner_name() {\n    return this.#learner_name;\n  }\n\n  /**\n   * Setter for #learner_name. Can only be called before  initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name) {\n    !this.initialized ?\n        this.#learner_name = learner_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check2004ValidFormat(location, scorm2004_regex.CMIString1000)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #mode\n   * @return {string}\n   */\n  get mode() {\n    return this.#mode;\n  }\n\n  /**\n   * Setter for #mode. Can only be called before  initialization.\n   * @param {string} mode\n   */\n  set mode(mode) {\n    !this.initialized ? this.#mode = mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, scorm2004_regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score() {\n    return this.#scaled_passing_score;\n  }\n\n  /**\n   * Setter for #scaled_passing_score. Can only be called before  initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score) {\n    !this.initialized ?\n        this.#scaled_passing_score = scaled_passing_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check2004ValidFormat(session_time, scorm2004_regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check2004ValidFormat(suspend_data, scorm2004_regex.CMIString64000,\n        true)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime() {\n    let sessionTime = this.#session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== 'undefined' && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(\n        this.#total_time,\n        sessionTime,\n        scorm2004_regex.CMITimespan,\n    );\n  }\n\n  /**\n   * get session_time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentSessionTime() {\n    let sessionTime = this.#session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== 'undefined' && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return sessionTime\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments_from_learner': this.comments_from_learner,\n      'comments_from_lms': this.comments_from_lms,\n      'completion_status': this.completion_status,\n      'completion_threshold': this.completion_threshold,\n      'credit': this.credit,\n      'entry': this.entry,\n      'exit': this.exit,\n      'interactions': this.interactions,\n      'launch_data': this.launch_data,\n      'learner_id': this.learner_id,\n      'learner_name': this.learner_name,\n      'learner_preference': this.learner_preference,\n      'location': this.location,\n      'max_time_allowed': this.max_time_allowed,\n      'mode': this.mode,\n      'objectives': this.objectives,\n      'progress_measure': this.progress_measure,\n      'scaled_passing_score': this.scaled_passing_score,\n      'score': this.score,\n      'session_time': this.session_time,\n      'success_status': this.success_status,\n      'suspend_data': this.suspend_data,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nclass CMILearnerPreference extends BaseCMI {\n  #_children = scorm2004_constants.student_preference_children;\n  #audio_level = '1';\n  #language = '';\n  #delivery_speed = '1';\n  #audio_captioning = '0';\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #audio_level\n   * @return {string}\n   */\n  get audio_level() {\n    return this.#audio_level;\n  }\n\n  /**\n   * Setter for #audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level) {\n    if (check2004ValidFormat(audio_level, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(audio_level, scorm2004_regex.audio_range)) {\n      this.#audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check2004ValidFormat(language, scorm2004_regex.CMILang)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #delivery_speed\n   * @return {string}\n   */\n  get delivery_speed() {\n    return this.#delivery_speed;\n  }\n\n  /**\n   * Setter for #delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed) {\n    if (check2004ValidFormat(delivery_speed, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(delivery_speed, scorm2004_regex.speed_range)) {\n      this.#delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for #audio_captioning\n   * @return {string}\n   */\n  get audio_captioning() {\n    return this.#audio_captioning;\n  }\n\n  /**\n   * Setter for #audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning) {\n    if (check2004ValidFormat(audio_captioning, scorm2004_regex.CMISInteger) &&\n        check2004ValidRange(audio_captioning, scorm2004_regex.text_range)) {\n      this.#audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio_level': this.audio_level,\n      'language': this.language,\n      'delivery_speed': this.delivery_speed,\n      'audio_captioning': this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions object\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.objectives object\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n */\nclass CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\nclass CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  #id = '';\n  #type = '';\n  #timestamp = '';\n  #weighting = '';\n  #learner_response = '';\n  #result = '';\n  #latency = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.INVALID_SET_VALUE].detailMessage,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.INVALID_SET_VALUE].detailMessage,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #type\n   * @return {string}\n   */\n  get type() {\n    return this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(type, scorm2004_regex.CMIType)) {\n        this.#type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n        this.#timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for #weighting\n   * @return {string}\n   */\n  get weighting() {\n    return this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(weighting, scorm2004_regex.CMIDecimal)) {\n        this.#weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for #learner_response\n   * @return {string}\n   */\n  get learner_response() {\n    return this.#learner_response;\n  }\n\n  /**\n   * Setter for #learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response) {\n    if (this.initialized && (this.#type === '' || this.#id === '')) {\n      throwDependencyNotEstablishedError();\n    } else {\n      let nodes = [];\n      const response_type = learner_responses[this.type];\n      if (response_type) {\n        if (response_type?.delimiter) {\n          nodes = learner_response.split(response_type.delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if ((nodes.length > 0) && (nodes.length <= response_type.max)) {\n          const formatRegex = new RegExp(response_type.format);\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              const values = nodes[i].split(response_type.delimiter2);\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throwTypeMismatchError();\n                } else {\n                  if (!values[1].match(new RegExp(response_type.format2))) {\n                    throwTypeMismatchError();\n                  }\n                }\n              } else {\n                throwTypeMismatchError();\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throwTypeMismatchError();\n              } else {\n                if (nodes[i] !== '' && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throwTypeMismatchError();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throwGeneralSetError();\n        }\n\n        this.#learner_response = learner_response;\n      } else {\n        throwTypeMismatchError();\n      }\n    }\n  }\n\n  /**\n   * Getter for #result\n   * @return {string}\n   */\n  get result() {\n    return this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check2004ValidFormat(result, scorm2004_regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency\n   * @return {string}\n   */\n  get latency() {\n    return this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(latency, scorm2004_regex.CMITimespan)) {\n        this.#latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(description, scorm2004_regex.CMILangString250,\n          true)) {\n        this.#description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'type': this.type,\n      'objectives': this.objectives,\n      'timestamp': this.timestamp,\n      'weighting': this.weighting,\n      'learner_response': this.learner_response,\n      'result': this.result,\n      'latency': this.latency,\n      'description': this.description,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  #id = '';\n  #success_status = 'unknown';\n  #completion_status = 'unknown';\n  #progress_measure = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new Scorm2004CMIScore();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n        this.#success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n        this.#completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n          check2004ValidRange(progress_measure,\n              scorm2004_regex.progress_range)) {\n        this.#progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(description, scorm2004_regex.CMILangString250,\n          true)) {\n        this.#description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'success_status': this.success_status,\n      'completion_status': this.completion_status,\n      'progress_measure': this.progress_measure,\n      'description': this.description,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi *.score object\n */\nclass Scorm2004CMIScore extends CMIScore {\n  #scaled = '';\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super(\n        {\n          score_children: scorm2004_constants.score_children,\n          max: '',\n          invalidErrorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n          invalidErrorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage,\n          invalidTypeCode: scorm2004_error_codes.TYPE_MISMATCH,\n          invalidTypeMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.TYPE_MISMATCH].detailMessage,\n          invalidRangeCode: scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n          invalidRangeMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n          decimalRegex: scorm2004_regex.CMIDecimal,\n        });\n  }\n\n  /**\n   * Getter for #scaled\n   * @return {string}\n   */\n  get scaled() {\n    return this.#scaled;\n  }\n\n  /**\n   * Setter for #scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled) {\n    if (check2004ValidFormat(scaled, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(scaled, scorm2004_regex.scaled_range)) {\n      this.#scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'scaled': this.scaled,\n      'raw': super.raw,\n      'min': super.min,\n      'max': super.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\nexport class CMICommentsObject extends BaseCMI {\n  #comment = '';\n  #location = '';\n  #timestamp = '';\n  #readOnlyAfterInit;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit = false) {\n    super();\n    this.#comment = '';\n    this.#location = '';\n    this.#timestamp = '';\n    this.#readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Getter for #comment\n   * @return {string}\n   */\n  get comment() {\n    return this.#comment;\n  }\n\n  /**\n   * Setter for #comment\n   * @param {string} comment\n   */\n  set comment(comment) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(comment, scorm2004_regex.CMILangString4000,\n          true)) {\n        this.#comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(location, scorm2004_regex.CMIString250)) {\n        this.#location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n        this.#timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comment': this.comment,\n      'location': this.location,\n      'timestamp': this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  #id = '';\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  #pattern = '';\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check2004ValidFormat(pattern, scorm2004_regex.CMIFeedback)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super();\n\n    this.nav = new ADLNav();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: {\n   *        request: string\n   *      }\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'nav': this.nav,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav object\n */\nclass ADLNav extends BaseCMI {\n  #request = '_none_';\n\n  /**\n   * Constructor for adl.nav\n   */\n  constructor() {\n    super();\n\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Getter for #request\n   * @return {string}\n   */\n  get request() {\n    return this.#request;\n  }\n\n  /**\n   * Setter for #request\n   * @param {string} request\n   */\n  set request(request) {\n    if (check2004ValidFormat(request, scorm2004_regex.NAVEvent)) {\n      this.#request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'request': this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\nclass ADLNavRequestValid extends BaseCMI {\n  #continue = 'unknown';\n  #previous = 'unknown';\n  choice = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n  jump = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #continue\n   * @return {string}\n   */\n  get continue() {\n    return this.#continue;\n  }\n\n  /**\n   * Setter for #continue. Just throws an error.\n   * @param {*} _\n   */\n  set continue(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #previous\n   * @return {string}\n   */\n  get previous() {\n    return this.#previous;\n  }\n\n  /**\n   * Setter for #previous. Just throws an error.\n   * @param {*} _\n   */\n  set previous(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'previous': this.previous,\n      'continue': this.continue,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\n\nconst global = {\n  SCORM_TRUE: 'true',\n  SCORM_FALSE: 'false',\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n  LOG_LEVEL_DEBUG: 1,\n  LOG_LEVEL_INFO: 2,\n  LOG_LEVEL_WARNING: 3,\n  LOG_LEVEL_ERROR: 4,\n  LOG_LEVEL_NONE: 5,\n  NO_ERROR: {\n    errorCode: 0,\n    errorMessage: 'No error',\n  },\n};\n\nconst scorm12 = {\n  // Children lists\n  cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions',\n  core_children: 'student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time',\n  score_children: 'raw,min,max',\n  comments_children: 'content,location,time',\n  objectives_children: 'id,score,status',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio,language,speed,text',\n  interactions_children: 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency',\n\n  error_descriptions: {\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use LMSGetDiagnostic for more information',\n    },\n    '201': {\n      basicMessage: 'Invalid argument error',\n      detailMessage: 'Indicates that an argument represents an invalid data model element or is otherwise incorrect.',\n    },\n    '202': {\n      basicMessage: 'Element cannot have children',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    '203': {\n      basicMessage: 'Element not an array - cannot have count',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    '301': {\n      basicMessage: 'Not initialized',\n      detailMessage: 'Indicates that an API call was made before the call to lmsInitialize.',\n    },\n    '401': {\n      basicMessage: 'Not implemented error',\n      detailMessage: 'The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.',\n    },\n    '402': {\n      basicMessage: 'Invalid set value, element is a keyword',\n      detailMessage: 'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    '403': {\n      basicMessage: 'Element is read only',\n      detailMessage: 'LMSSetValue was called with a data model element that can only be read.',\n    },\n    '404': {\n      basicMessage: 'Element is write only',\n      detailMessage: 'LMSGetValue was called on a data model element that can only be written to.',\n    },\n    '405': {\n      basicMessage: 'Incorrect Data Type',\n      detailMessage: 'LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n\nconst aicc = {\n  ...scorm12, ...{\n    cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation',\n    student_preference_children: 'audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows',\n    student_data_children: 'attempt_number,tries,mastery_score,max_time_allowed,time_limit_action',\n    student_demographics_children: 'city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience',\n    tries_children: 'time,status,score',\n    attempt_records_children: 'score,lesson_status',\n    paths_children: 'location_id,date,time,status,why_left,time_in_element',\n  },\n};\n\nconst scorm2004 = {\n  // Children lists\n  cmi_children: '_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time',\n  comments_children: 'comment,timestamp,location',\n  score_children: 'max,raw,scaled,min',\n  objectives_children: 'progress_measure,completion_status,success_status,description,score,id',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio_level,audio_captioning,delivery_speed,language',\n  interactions_children: 'id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description',\n\n  error_descriptions: {\n    '0': {\n      basicMessage: 'No Error',\n      detailMessage: 'No error occurred, the previous API call was successful.',\n    },\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use GetDiagnostic for more information.',\n    },\n    '102': {\n      basicMessage: 'General Initialization Failure',\n      detailMessage: 'Call to Initialize failed for an unknown reason.',\n    },\n    '103': {\n      basicMessage: 'Already Initialized',\n      detailMessage: 'Call to Initialize failed because Initialize was already called.',\n    },\n    '104': {\n      basicMessage: 'Content Instance Terminated',\n      detailMessage: 'Call to Initialize failed because Terminate was already called.',\n    },\n    '111': {\n      basicMessage: 'General Termination Failure',\n      detailMessage: 'Call to Terminate failed for an unknown reason.',\n    },\n    '112': {\n      basicMessage: 'Termination Before Initialization',\n      detailMessage: 'Call to Terminate failed because it was made before the call to Initialize.',\n    },\n    '113': {\n      basicMessage: 'Termination After Termination',\n      detailMessage: 'Call to Terminate failed because Terminate was already called.',\n    },\n    '122': {\n      basicMessage: 'Retrieve Data Before Initialization',\n      detailMessage: 'Call to GetValue failed because it was made before the call to Initialize.',\n    },\n    '123': {\n      basicMessage: 'Retrieve Data After Termination',\n      detailMessage: 'Call to GetValue failed because it was made after the call to Terminate.',\n    },\n    '132': {\n      basicMessage: 'Store Data Before Initialization',\n      detailMessage: 'Call to SetValue failed because it was made before the call to Initialize.',\n    },\n    '133': {\n      basicMessage: 'Store Data After Termination',\n      detailMessage: 'Call to SetValue failed because it was made after the call to Terminate.',\n    },\n    '142': {\n      basicMessage: 'Commit Before Initialization',\n      detailMessage: 'Call to Commit failed because it was made before the call to Initialize.',\n    },\n    '143': {\n      basicMessage: 'Commit After Termination',\n      detailMessage: 'Call to Commit failed because it was made after the call to Terminate.',\n    },\n    '201': {\n      basicMessage: 'General Argument Error',\n      detailMessage: 'An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.',\n    },\n    '301': {\n      basicMessage: 'General Get Failure',\n      detailMessage: 'Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '351': {\n      basicMessage: 'General Set Failure',\n      detailMessage: 'Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '391': {\n      basicMessage: 'General Commit Failure',\n      detailMessage: 'Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '401': {\n      basicMessage: 'Undefined Data Model Element',\n      detailMessage: 'The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.',\n    },\n    '402': {\n      basicMessage: 'Unimplemented Data Model Element',\n      detailMessage: 'The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.',\n    },\n    '403': {\n      basicMessage: 'Data Model Element Value Not Initialized',\n      detailMessage: 'Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.',\n    },\n    '404': {\n      basicMessage: 'Data Model Element Is Read Only',\n      detailMessage: 'SetValue was called with a data model element that can only be read.',\n    },\n    '405': {\n      basicMessage: 'Data Model Element Is Write Only',\n      detailMessage: 'GetValue was called on a data model element that can only be written to.',\n    },\n    '406': {\n      basicMessage: 'Data Model Element Type Mismatch',\n      detailMessage: 'SetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Data Model Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n\nconst APIConstants = {\n  global: global,\n  scorm12: scorm12,\n  aicc: aicc,\n  scorm2004: scorm2004,\n};\n\nexport default APIConstants;\n","// @flow\nconst global = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nconst scorm12 = {\n  ...global, ...{\n    RETRIEVE_BEFORE_INIT: 301,\n    STORE_BEFORE_INIT: 301,\n    COMMIT_BEFORE_INIT: 301,\n    ARGUMENT_ERROR: 201,\n    CHILDREN_ERROR: 202,\n    COUNT_ERROR: 203,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 401,\n    VALUE_NOT_INITIALIZED: 301,\n    INVALID_SET_VALUE: 402,\n    READ_ONLY_ELEMENT: 403,\n    WRITE_ONLY_ELEMENT: 404,\n    TYPE_MISMATCH: 405,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nconst scorm2004 = {\n  ...global, ...{\n    INITIALIZATION_FAILED: 102,\n    INITIALIZED: 103,\n    TERMINATED: 104,\n    TERMINATION_FAILURE: 111,\n    TERMINATION_BEFORE_INIT: 112,\n    MULTIPLE_TERMINATIONS: 113,\n    RETRIEVE_BEFORE_INIT: 122,\n    RETRIEVE_AFTER_TERM: 123,\n    STORE_BEFORE_INIT: 132,\n    STORE_AFTER_TERM: 133,\n    COMMIT_BEFORE_INIT: 142,\n    COMMIT_AFTER_TERM: 143,\n    ARGUMENT_ERROR: 201,\n    GENERAL_GET_FAILURE: 301,\n    GENERAL_SET_FAILURE: 351,\n    GENERAL_COMMIT_FAILURE: 391,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 402,\n    VALUE_NOT_INITIALIZED: 403,\n    READ_ONLY_ELEMENT: 404,\n    WRITE_ONLY_ELEMENT: 405,\n    TYPE_MISMATCH: 406,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nconst ErrorCodes = {\n  scorm12: scorm12,\n  scorm2004: scorm2004,\n};\n\nexport default ErrorCodes;\n","const ValidLanguages = {\n  'aa': 'aa', 'ab': 'ab', 'ae': 'ae', 'af': 'af', 'ak': 'ak', 'am': 'am',\n  'an': 'an', 'ar': 'ar', 'as': 'as', 'av': 'av', 'ay': 'ay', 'az': 'az',\n  'ba': 'ba', 'be': 'be', 'bg': 'bg', 'bh': 'bh', 'bi': 'bi', 'bm': 'bm',\n  'bn': 'bn', 'bo': 'bo', 'br': 'br', 'bs': 'bs', 'ca': 'ca', 'ce': 'ce',\n  'ch': 'ch', 'co': 'co', 'cr': 'cr', 'cs': 'cs', 'cu': 'cu', 'cv': 'cv',\n  'cy': 'cy', 'da': 'da', 'de': 'de', 'dv': 'dv', 'dz': 'dz', 'ee': 'ee',\n  'el': 'el', 'en': 'en', 'eo': 'eo', 'es': 'es', 'et': 'et', 'eu': 'eu',\n  'fa': 'fa', 'ff': 'ff', 'fi': 'fi', 'fj': 'fj', 'fo': 'fo', 'fr': 'fr',\n  'fy': 'fy', 'ga': 'ga', 'gd': 'gd', 'gl': 'gl', 'gn': 'gn', 'gu': 'gu',\n  'gv': 'gv', 'ha': 'ha', 'he': 'he', 'hi': 'hi', 'ho': 'ho', 'hr': 'hr',\n  'ht': 'ht', 'hu': 'hu', 'hy': 'hy', 'hz': 'hz', 'ia': 'ia', 'id': 'id',\n  'ie': 'ie', 'ig': 'ig', 'ii': 'ii', 'ik': 'ik', 'io': 'io', 'is': 'is',\n  'it': 'it', 'iu': 'iu', 'ja': 'ja', 'jv': 'jv', 'ka': 'ka', 'kg': 'kg',\n  'ki': 'ki', 'kj': 'kj', 'kk': 'kk', 'kl': 'kl', 'km': 'km', 'kn': 'kn',\n  'ko': 'ko', 'kr': 'kr', 'ks': 'ks', 'ku': 'ku', 'kv': 'kv', 'kw': 'kw',\n  'ky': 'ky', 'la': 'la', 'lb': 'lb', 'lg': 'lg', 'li': 'li', 'ln': 'ln',\n  'lo': 'lo', 'lt': 'lt', 'lu': 'lu', 'lv': 'lv', 'mg': 'mg', 'mh': 'mh',\n  'mi': 'mi', 'mk': 'mk', 'ml': 'ml', 'mn': 'mn', 'mo': 'mo', 'mr': 'mr',\n  'ms': 'ms', 'mt': 'mt', 'my': 'my', 'na': 'na', 'nb': 'nb', 'nd': 'nd',\n  'ne': 'ne', 'ng': 'ng', 'nl': 'nl', 'nn': 'nn', 'no': 'no', 'nr': 'nr',\n  'nv': 'nv', 'ny': 'ny', 'oc': 'oc', 'oj': 'oj', 'om': 'om', 'or': 'or',\n  'os': 'os', 'pa': 'pa', 'pi': 'pi', 'pl': 'pl', 'ps': 'ps', 'pt': 'pt',\n  'qu': 'qu', 'rm': 'rm', 'rn': 'rn', 'ro': 'ro', 'ru': 'ru', 'rw': 'rw',\n  'sa': 'sa', 'sc': 'sc', 'sd': 'sd', 'se': 'se', 'sg': 'sg', 'sh': 'sh',\n  'si': 'si', 'sk': 'sk', 'sl': 'sl', 'sm': 'sm', 'sn': 'sn', 'so': 'so',\n  'sq': 'sq', 'sr': 'sr', 'ss': 'ss', 'st': 'st', 'su': 'su', 'sv': 'sv',\n  'sw': 'sw', 'ta': 'ta', 'te': 'te', 'tg': 'tg', 'th': 'th', 'ti': 'ti',\n  'tk': 'tk', 'tl': 'tl', 'tn': 'tn', 'to': 'to', 'tr': 'tr', 'ts': 'ts',\n  'tt': 'tt', 'tw': 'tw', 'ty': 'ty', 'ug': 'ug', 'uk': 'uk', 'ur': 'ur',\n  'uz': 'uz', 've': 've', 'vi': 'vi', 'vo': 'vo', 'wa': 'wa', 'wo': 'wo',\n  'xh': 'xh', 'yi': 'yi', 'yo': 'yo', 'za': 'za', 'zh': 'zh', 'zu': 'zu',\n  'aar': 'aar', 'abk': 'abk', 'ave': 'ave', 'afr': 'afr', 'aka': 'aka',\n  'amh': 'amh', 'arg': 'arg', 'ara': 'ara', 'asm': 'asm', 'ava': 'ava',\n  'aym': 'aym', 'aze': 'aze', 'bak': 'bak', 'bel': 'bel', 'bul': 'bul',\n  'bih': 'bih', 'bis': 'bis', 'bam': 'bam', 'ben': 'ben', 'tib': 'tib',\n  'bod': 'bod', 'bre': 'bre', 'bos': 'bos', 'cat': 'cat', 'che': 'che',\n  'cha': 'cha', 'cos': 'cos', 'cre': 'cre', 'cze': 'cze', 'ces': 'ces',\n  'chu': 'chu', 'chv': 'chv', 'wel': 'wel', 'cym': 'cym', 'dan': 'dan',\n  'ger': 'ger', 'deu': 'deu', 'div': 'div', 'dzo': 'dzo', 'ewe': 'ewe',\n  'gre': 'gre', 'ell': 'ell', 'eng': 'eng', 'epo': 'epo', 'spa': 'spa',\n  'est': 'est', 'baq': 'baq', 'eus': 'eus', 'per': 'per', 'fas': 'fas',\n  'ful': 'ful', 'fin': 'fin', 'fij': 'fij', 'fao': 'fao', 'fre': 'fre',\n  'fra': 'fra', 'fry': 'fry', 'gle': 'gle', 'gla': 'gla', 'glg': 'glg',\n  'grn': 'grn', 'guj': 'guj', 'glv': 'glv', 'hau': 'hau', 'heb': 'heb',\n  'hin': 'hin', 'hmo': 'hmo', 'hrv': 'hrv', 'hat': 'hat', 'hun': 'hun',\n  'arm': 'arm', 'hye': 'hye', 'her': 'her', 'ina': 'ina', 'ind': 'ind',\n  'ile': 'ile', 'ibo': 'ibo', 'iii': 'iii', 'ipk': 'ipk', 'ido': 'ido',\n  'ice': 'ice', 'isl': 'isl', 'ita': 'ita', 'iku': 'iku', 'jpn': 'jpn',\n  'jav': 'jav', 'geo': 'geo', 'kat': 'kat', 'kon': 'kon', 'kik': 'kik',\n  'kua': 'kua', 'kaz': 'kaz', 'kal': 'kal', 'khm': 'khm', 'kan': 'kan',\n  'kor': 'kor', 'kau': 'kau', 'kas': 'kas', 'kur': 'kur', 'kom': 'kom',\n  'cor': 'cor', 'kir': 'kir', 'lat': 'lat', 'ltz': 'ltz', 'lug': 'lug',\n  'lim': 'lim', 'lin': 'lin', 'lao': 'lao', 'lit': 'lit', 'lub': 'lub',\n  'lav': 'lav', 'mlg': 'mlg', 'mah': 'mah', 'mao': 'mao', 'mri': 'mri',\n  'mac': 'mac', 'mkd': 'mkd', 'mal': 'mal', 'mon': 'mon', 'mol': 'mol',\n  'mar': 'mar', 'may': 'may', 'msa': 'msa', 'mlt': 'mlt', 'bur': 'bur',\n  'mya': 'mya', 'nau': 'nau', 'nob': 'nob', 'nde': 'nde', 'nep': 'nep',\n  'ndo': 'ndo', 'dut': 'dut', 'nld': 'nld', 'nno': 'nno', 'nor': 'nor',\n  'nbl': 'nbl', 'nav': 'nav', 'nya': 'nya', 'oci': 'oci', 'oji': 'oji',\n  'orm': 'orm', 'ori': 'ori', 'oss': 'oss', 'pan': 'pan', 'pli': 'pli',\n  'pol': 'pol', 'pus': 'pus', 'por': 'por', 'que': 'que', 'roh': 'roh',\n  'run': 'run', 'rum': 'rum', 'ron': 'ron', 'rus': 'rus', 'kin': 'kin',\n  'san': 'san', 'srd': 'srd', 'snd': 'snd', 'sme': 'sme', 'sag': 'sag',\n  'slo': 'slo', 'sin': 'sin', 'slk': 'slk', 'slv': 'slv', 'smo': 'smo',\n  'sna': 'sna', 'som': 'som', 'alb': 'alb', 'sqi': 'sqi', 'srp': 'srp',\n  'ssw': 'ssw', 'sot': 'sot', 'sun': 'sun', 'swe': 'swe', 'swa': 'swa',\n  'tam': 'tam', 'tel': 'tel', 'tgk': 'tgk', 'tha': 'tha', 'tir': 'tir',\n  'tuk': 'tuk', 'tgl': 'tgl', 'tsn': 'tsn', 'ton': 'ton', 'tur': 'tur',\n  'tso': 'tso', 'tat': 'tat', 'twi': 'twi', 'tah': 'tah', 'uig': 'uig',\n  'ukr': 'ukr', 'urd': 'urd', 'uzb': 'uzb', 'ven': 'ven', 'vie': 'vie',\n  'vol': 'vol', 'wln': 'wln', 'wol': 'wol', 'xho': 'xho', 'yid': 'yid',\n  'yor': 'yor', 'zha': 'zha', 'chi': 'chi', 'zho': 'zho', 'zul': 'zul',\n};\n\nexport default ValidLanguages;\n","// @flow\n\nconst scorm12 = {\n  CMIString256: '^.{0,255}$',\n  CMIString4096: '^.{0,4096}$',\n  CMITime: '^(?:(?:([01]?\\\\d|2[0-3]):)?([0-5]?\\\\d):)?([0-5]?\\\\d)(?:\\.(\\\\d+)?)?$', // eslint-disable-line\n  CMITimespan: '^([0-9]{2,}):([0-9]{2}):([0-9]{2})(\\.[0-9]{1,2})?$', // eslint-disable-line\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{0,3})(\\.[0-9]*)?$', // eslint-disable-line\n  CMIIdentifier: '^[\\\\u0021-\\\\u007E\\\\s]{0,255}$',\n  CMIFeedback: '^.{0,255}$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMIStatus: '^(passed|completed|failed|incomplete|browsed)$',\n  CMIStatus2: '^(passed|completed|failed|incomplete|browsed|not attempted)$',\n  CMIExit: '^(time-out|suspend|logout|)$',\n  CMIType: '^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$',\n  CMIResult: '^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$', // eslint-disable-line\n  NAVEvent: '^(previous|continue)$',\n\n  // Data ranges\n  score_range: '0#100',\n  audio_range: '-1#100',\n  speed_range: '-100#100',\n  weighting_range: '-100#100',\n  text_range: '-1#1',\n};\n\nconst aicc = {\n  ...scorm12, ...{\n    CMIIdentifier: '^\\\\w{1,255}$',\n  },\n};\n\nconst scorm2004 = {\n  CMIString200: '^[\\\\u0000-\\\\uFFFF]{0,200}$',\n  CMIString250: '^[\\\\u0000-\\\\uFFFF]{0,250}$',\n  CMIString1000: '^[\\\\u0000-\\\\uFFFF]{0,1000}$',\n  CMIString4000: '^[\\\\u0000-\\\\uFFFF]{0,4000}$',\n  CMIString64000: '^[\\\\u0000-\\\\uFFFF]{0,64000}$',\n  CMILang: '^([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?$|^$', // eslint-disable-line\n  CMILangString250: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,250}$)?$', // eslint-disable-line\n  CMILangcr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\}))(.*?)$', // eslint-disable-line\n  CMILangString250cr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\})?(.{0,250})?)?$', // eslint-disable-line\n  CMILangString4000: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,4000}$)?$', // eslint-disable-line\n  CMITime: '^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,2})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$',\n  CMITimespan: '^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$',\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$',\n  CMIIdentifier: '^\\\\S{1,250}[a-zA-Z0-9]$',\n  CMIShortIdentifier: '^[\\\\w\\\\.\\\\-\\\\_]{1,250}$', // eslint-disable-line\n  CMILongIdentifier: '^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$', // need to re-examine this\n  CMIFeedback: '^.*$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n  CMIIndexStore: '.N(\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMICStatus: '^(completed|incomplete|not attempted|unknown)$',\n  CMISStatus: '^(passed|failed|unknown)$',\n  CMIExit: '^(time-out|suspend|logout|normal)$',\n  CMIType: '^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$',\n  CMIResult: '^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$',\n  NAVEvent: '^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|\\{target=\\\\S{0,200}[a-zA-Z0-9]\\}choice|jump)$', // eslint-disable-line\n  NAVBoolean: '^(unknown|true|false$)',\n  NAVTarget: '^(previous|continue|choice.{target=\\\\S{0,200}[a-zA-Z0-9]})$',\n\n  // Data ranges\n  scaled_range: '-1#1',\n  audio_range: '0#*',\n  speed_range: '0#*',\n  text_range: '-1#1',\n  progress_range: '0#1',\n};\n\nconst Regex = {\n  aicc: aicc,\n  scorm12: scorm12,\n  scorm2004: scorm2004,\n};\n\nexport default Regex;\n","// @flow\nimport Regex from './regex';\n\nconst scorm2004_regex = Regex.scorm2004;\n\nconst learner = {\n  'true-false': {\n    format: '^true$|^false$',\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'choice': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n  },\n  'fill-in': {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'long-fill-in': {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'matching': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'performance': {\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'sequencing': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'likert': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'numeric': {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'other': {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n};\n\nconst correct = {\n  'true-false': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: '^true$|^false$',\n    limit: 1,\n  },\n  'choice': {\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'fill-in': {\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  'long-fill-in': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  'matching': {\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  'performance': {\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n  },\n  'sequencing': {\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'likert': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  'numeric': {\n    max: 2,\n    delimiter: '[:]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  'other': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nconst Responses = {\n  learner: learner,\n  correct: correct,\n};\n\nexport default Responses;\n","// @flow\n\n/**\n * Data Validation Exception\n */\nexport class ValidationError extends Error {\n  /**\n   * Constructor to take in an error message and code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number, ...rest) {\n    super(...rest);\n    this.#errorCode = errorCode;\n  }\n\n  #errorCode;\n\n  /**\n   * Getter for #errorCode\n   * @return {number}\n   */\n  get errorCode() {\n    return this.#errorCode;\n  }\n}\n","import Scorm2004API from './Scorm2004API';\nimport Scorm12API from './Scorm12API';\nimport AICC from './AICC';\n\nwindow.Scorm12API = Scorm12API;\nwindow.Scorm2004API = Scorm2004API;\nwindow.AICC = AICC;\n","// @flow\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\nconst designations = [\n  ['D', SECONDS_PER_DAY],\n  ['H', SECONDS_PER_HOUR],\n  ['M', SECONDS_PER_MINUTE],\n  ['S', SECONDS_PER_SECOND],\n];\n\n/**\n * Converts a Number to a String of HH:MM:SS\n *\n * @param {Number} totalSeconds\n * @return {string}\n */\nexport function getSecondsAsHHMMSS(totalSeconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return '00:00:00';\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = '';\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n    msStr = '.' + msStr.split('.')[1];\n  }\n\n  return (hours + ':' + minutes + ':' + seconds).replace(/\\b\\d\\b/g,\n      '0$&') + msStr;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {Number} seconds\n * @return {String}\n */\nexport function getSecondsAsISODuration(seconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return 'PT0S';\n  }\n\n  let duration = 'P';\n  let remainder = seconds;\n\n  designations.forEach(([sign, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n\n    remainder = remainder % current_seconds;\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (sign === 'S' && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      if ((duration.indexOf('D') > 0 ||\n          sign === 'H' || sign === 'M' || sign === 'S') &&\n          duration.indexOf('T') === -1) {\n        duration += 'T';\n      }\n      duration += `${value}${sign}`;\n    }\n  });\n\n  return duration;\n}\n\n/**\n * Calculate the number of seconds from HH:MM:SS.DDDDDD\n *\n * @param {string} timeString\n * @param {RegExp} timeRegex\n * @return {number}\n */\nexport function getTimeAsSeconds(timeString: String, timeRegex: RegExp) {\n  if (!timeString || typeof timeString !== 'string' ||\n      !timeString.match(timeRegex)) {\n    return 0;\n  }\n  const parts = timeString.split(':');\n  const hours = Number(parts[0]);\n  const minutes = Number(parts[1]);\n  const seconds = Number(parts[2]);\n  return (hours * 3600) + (minutes * 60) + seconds;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {string} duration\n * @param {RegExp} durationRegex\n * @return {number}\n */\nexport function getDurationAsSeconds(duration: String, durationRegex: RegExp) {\n  if (!duration || !duration.match(durationRegex)) {\n    return 0;\n  }\n\n  const [, years, months, , days, hours, minutes, seconds] = new RegExp(\n      durationRegex).exec(duration) || [];\n\n  let result = 0.0;\n\n  result += (Number(seconds) * 1.0 || 0.0);\n  result += (Number(minutes) * 60.0 || 0.0);\n  result += (Number(hours) * 3600.0 || 0.0);\n  result += (Number(days) * (60 * 60 * 24.0) || 0.0);\n  result += (Number(years) * (60 * 60 * 24 * 365.0) || 0.0);\n\n  return result;\n}\n\n/**\n * Adds together two ISO8601 Duration strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} durationRegex\n * @return {string}\n */\nexport function addTwoDurations(\n    first: String,\n    second: String,\n    durationRegex: RegExp) {\n  return getSecondsAsISODuration(\n      getDurationAsSeconds(first, durationRegex) +\n      getDurationAsSeconds(second, durationRegex),\n  );\n}\n\n/**\n * Add together two HH:MM:SS.DD strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} timeRegex\n * @return {string}\n */\nexport function addHHMMSSTimeStrings(\n    first: String,\n    second: String,\n    timeRegex: RegExp) {\n  return getSecondsAsHHMMSS(\n      getTimeAsSeconds(first, timeRegex) +\n      getTimeAsSeconds(\n          second, timeRegex),\n  );\n}\n\n/**\n * Flatten a JSON object down to string paths for each values\n * @param {object} data\n * @return {object}\n */\nexport function flatten(data) {\n  const result = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur, prop) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      for (let i = 0, l = cur.length; i < l; i++) {\n        recurse(cur[i], prop + '[' + i + ']');\n        if (l === 0) result[prop] = [];\n      }\n    } else {\n      let isEmpty = true;\n      for (const p in cur) {\n        if ({}.hasOwnProperty.call(cur, p)) {\n          isEmpty = false;\n          recurse(cur[p], prop ? prop + '.' + p : p);\n        }\n      }\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, '');\n  return result;\n}\n\n/**\n * Un-flatten a flat JSON object\n * @param {object} data\n * @return {object}\n */\nexport function unflatten(data) {\n  'use strict';\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const regex = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n  const result = {};\n  for (const p in data) {\n    if ({}.hasOwnProperty.call(data, p)) {\n      let cur = result;\n      let prop = '';\n      let m = regex.exec(p);\n      while (m) {\n        cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n        prop = m[2] || m[1];\n        m = regex.exec(p);\n      }\n      cur[prop] = data[p];\n    }\n  }\n  return result[''] || result;\n}\n\n/**\n * Counts the number of decimal places\n * @param {number} num\n * @return {number}\n */\nexport function countDecimals(num: number) {\n  if (Math.floor(num) === num || String(num).indexOf('.') < 0) return 0;\n  const parts = num.toString().split('.')[1];\n  return parts.length || 0;\n}\n"]}