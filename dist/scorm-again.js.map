{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/lodash.debounce/index.js","src/AICC.js","src/BaseAPI.js","src/Scorm12API.js","src/Scorm2004API.js","src/cmi/aicc_cmi.js","src/cmi/common.js","src/cmi/scorm12_cmi.js","src/cmi/scorm2004_cmi.js","src/constants/api_constants.js","src/constants/error_codes.js","src/constants/language_constants.js","src/constants/regex.js","src/constants/response_constants.js","src/exceptions.js","src/exports.js","src/utilities.js"],"names":["debounce","func","wait","options","invokeFunc","time","args","lastArgs","thisArg","lastThis","undefined","lastInvokeTime","result","apply","leadingEdge","timerId","setTimeout","timerExpired","leading","remainingWait","timeSinceLastCall","lastCallTime","timeSinceLastInvoke","maxing","nativeMin","maxWait","shouldInvoke","now","trailingEdge","trailing","cancel","clearTimeout","flush","debounced","isInvoking","arguments","this","TypeError","FUNC_ERROR_TEXT","toNumber","isObject","nativeMax","value","type","isObjectLike","isSymbol","objectToString","call","symbolTag","NAN","other","valueOf","replace","reTrim","isBinary","reIsBinary","test","reIsOctal","freeParseInt","slice","reIsBadHex","parseInt","freeGlobal","global","Object","freeSelf","self","root","Function","objectProto","prototype","toString","Math","max","min","Date","module","exports","_Scorm12API2","_interopRequireDefault","require","_aicc_cmi","_scorm12_cmi","AICC","settings","_this","_classCallCheck","finalSettings","_objectSpread","mastery_override","_super","cmi","CMI","nav","NAV","CMIElement","foundFirstIndex","newChild","_get","_getPrototypeOf","stringMatches","CMIEvaluationCommentsObject","CMITriesObject","CMIAttemptRecordsObject","newAPI","Scorm12API","_common","_exceptions","_error_codes2","_api_constants","_utilities","_lodash","global_constants","APIConstants","scorm12_error_codes","ErrorCodes","scorm12","BaseAPI","error_codes","_timeout","set","writable","_error_codes","_settings","autocommit","autocommitSeconds","asyncCommit","sendBeaconCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","LOG_LEVEL_ERROR","selfReportSessionTime","alwaysSendTotalTime","responseHandler","xhr","JSON","parse","responseText","hasOwnProperty","status","SCORM_TRUE","errorCode","SCORM_FALSE","requestHandler","params","_defineProperty","constructor","currentState","STATE_NOT_INITIALIZED","lastError","NO_ERROR","listenerArray","_classPrivateFieldSet","apiLogLevel","callbackName","initializeMessage","terminationMessage","returnValue","isInitialized","throwSCORMError","_classPrivateFieldGet","INITIALIZED","isTerminated","TERMINATED","setStartTime","STATE_INITIALIZED","processListeners","apiLog","LOG_LEVEL_INFO","clearSCORMError","checkTerminated","checkState","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","STATE_TERMINATED","storeData","e","ValidationError","errorMessage","message","console","error","GENERAL","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","getCMIValue","commitCallback","String","STORE_BEFORE_INIT","STORE_AFTER_TERM","setCMIValue","scheduleCommit","concat","clearScheduledCommit","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","CMIErrorCode","getLmsErrorMessageDetails","beforeInitError","afterTermError","isNotInitialized","functionName","logMessage","messageLevel","formatMessage","LOG_LEVEL_WARNING","warn","info","LOG_LEVEL_DEBUG","debug","log","logObject","date","toISOString","messageString","fillChars","length","j","str","tester","match","refObject","attribute","getOwnPropertyDescriptor","getPrototypeOf","_errorNumber","_detail","Error","_CMIElement","_value","methodName","scorm2004","structure","split","invalidErrorMessage","invalidErrorCode","UNDEFINED_DATA_MODEL","i","substr","_isTargetValid","READ_ONLY_ELEMENT","_checkObjectHasProperty","validateCorrectResponse","CMIArray","index","isNaN","item","childArray","getChildElement","initialized","initialize","push","_foundFirstIndex","uninitializedErrorMessage","target","VALUE_NOT_INITIALIZED","CHILDREN_ERROR","COUNT_ERROR","listenerName","callback","listenerFunctions","listenerSplit","_ret","v","removeIndex","findIndex","obj","splice","_typeof","_this2","_ret2","filter","listener","functionsMatch","listenerHasCMIElement","CMIElementsMatch","substring","indexOf","errorNumber","success","_calculateTotalTime","json","testPattern","a","c","a_pattern","c_match","a_match","a_num","Number","c_num","_this3","int_pattern","obj_pattern","keys","map","key","sort","_ref","_ref2","_ref3","_slicedToArray","_ref4","forEach","element","loadFromJSON","unflatten","startingData","currentCMIElement","stringify","renderCMIToJSONString","_terminateCommit","url","_this4","immediate","process","genericError","blob","stringParams","headers","Array","join","Blob","navigator","sendBeacon","httpReq","XMLHttpRequest","open","setRequestHeader","send","onload","onerror","_result","_result2","when","ScheduledCommit","API","_API","_cancelled","_timeout2","_callback","wrapper","bind","commit","_BaseAPI2","Utilities","_interopRequireWildcard","scorm12_constants","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","terminate","event","getValue","setValue","getLastError","getErrorString","getDiagnostic","_commonSetCMIValue","_commonGetCMIValue","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","detail","basicMessage","detailMessage","error_descriptions","terminateCommit","cmiExport","renderCMIToJSONObject","core","total_time","getCurrentTotalTime","session_time","getCurrentSessionTime","flattened","flatten","originalStatus","lesson_status","lesson_mode","credit","student_data","mastery_score","score","raw","parseFloat","_this$startingData","_this$startingData$cm","_this$startingData$cm2","commitObject","renderCommitCMI","processHttpRequest","_scorm2004_cmi","_response_constants","_language_constants","_regex","scorm2004_constants","scorm2004_error_codes","correct_responses","Responses","correct","scorm2004_regex","Regex","Scorm2004API","_version","_assertThisInitialized","correct_response","current_index","found","count","_count","adl","ADL","Initialize","Terminate","lmsTerminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","request","parts","interaction","interactions","checkDuplicateChoiceResponse","response_type","checkValidResponseType","GENERAL_SET_FAILURE","DEPENDENCY_NOT_ESTABLISHED","CMICommentsObject","interaction_type","nodes","delimiter","checkCorrectResponseValue","interaction_count","response","pattern","pattern_index","limit","duplicate","checkDuplicatedPattern","formatRegex","RegExp","format","removeCorrectResponsePrefixes","delimiter2","values","matches","format2","TYPE_MISMATCH","unique","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","CMILangcr","lang","ValidLanguages","toLowerCase","_this$startingData$ad","_this$startingData$ad2","mode","completion_threshold","progress_measure","completion_status","scaled_passing_score","scaled","success_status","navRequest","encodeURIComponent","Scorm12CMI","aicc_constants","aicc","aicc_regex","cmi_children","student_preference","AICCStudentPreferences","AICCCMIStudentData","student_demographics","CMIStudentDemographics","evaluation","CMIEvaluation","paths","CMIPaths","_this$student_prefere","_this$student_data","_this$student_demogra","_this$evaluation","_this$paths","jsonString","suspend_data","launch_data","comments","comments_from_lms","objectives","_super2","CMIEvaluationComments","_this$comments","BaseCMI","_super3","children","comments_children","INVALID_SET_VALUE","_super4","student_preference_children","_lesson_type","_text_color","_text_location","_text_size","_video","windows","_this$windows","lesson_type","check12ValidFormat","CMIString256","text_color","text_location","text_size","video","audio","language","speed","text","CMIStudentPreference","_super5","student_data_children","_tries_during_lesson","tries","CMITries","_this$tries","tries_during_lesson","throwReadOnlyError","max_time_allowed","time_limit_action","CMIStudentData","_this5","_super6","_children","student_demographics_children","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","class","_super7","paths_children","CMIPathsObject","_this6","_super8","_location_id","_date","_time","_status","_why_left","_time_in_element","location_id","CMITime","CMIStatus2","why_left","time_in_element","_super9","tries_children","_this7","_super10","_status2","_time2","CMIScore","score_children","score_range","invalidTypeCode","invalidTypeMessage","invalidRangeCode","VALUE_OUT_OF_RANGE","invalidRangeMessage","_this$score","CMIAttemptRecords","_super11","attempt_records_children","_this8","_super12","_lesson_status","_this$score2","_this9","_super13","_content","_location","_time3","content","location","checkValidFormat","regexPattern","allowEmptyString","checkValidRange","rangePattern","ranges","scorm12_regex","_initialized","_start_time","getTime","decimalRegex","_children2","_score_range","_invalid_error_code","_invalid_error_message","_invalid_type_code","_invalid_type_message","_invalid_range_code","_invalid_range_message","_decimal_regex","_raw","_min","_max","CMIDecimal","_errorCode","_errorMessage","_children3","throwWriteOnlyError","WRITE_ONLY_ELEMENT","throwInvalidValueError","check12ValidRange","_version2","_launch_data","_comments","_comments_from_lms","CMICore","CMIObjectives","CMIInteractions","_this$core","_this$objectives","_this$interactions","_this$core2","CMIString4096","start_time","core_children","_student_id","_student_name","_lesson_location","_credit","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","student_id","student_name","lesson_location","CMIStatus","entry","exit","CMIExit","CMITimespan","sessionTime","startTime","seconds","Util","getSecondsAsHHMMSS","addHHMMSSTimeStrings","objectives_children","_children4","_mastery_score","_max_time_allowed","_time_limit_action","_children5","_audio","_language","_speed","_text","CMISInteger","audio_range","speed_range","text_range","interactions_children","_id","_type","_weighting","_student_response","_latency","correct_responses_children","_this$objectives2","_this$correct_respons","id","CMIIdentifier","CMIType","weighting","weighting_range","student_response","CMIFeedback","CMIResult","latency","_id2","_id3","_pattern","_event","NAVEvent","throwTypeMismatchError","throwDependencyNotEstablishedError","throwGeneralSetError","check2004ValidFormat","check2004ValidRange","learner_responses","learner","_completion_status","_completion_threshold","_learner_id","_learner_name","_mode","_progress_measure","_scaled_passing_score","_success_status","learner_preference","CMILearnerPreference","Scorm2004CMIScore","comments_from_learner","CMICommentsFromLearner","CMICommentsFromLMS","_this$learner_prefere","_this$comments_from_l","_this$comments_from_l2","CMICStatus","learner_id","learner_name","CMIString1000","progress_range","CMISStatus","CMIString64000","getSecondsAsISODuration","addTwoDurations","_audio_level","_delivery_speed","_audio_captioning","audio_level","CMILang","delivery_speed","audio_captioning","_timestamp","_learner_response","_description","CMILongIdentifier","timestamp","learner_response","description","CMILangString250","_success_status2","_completion_status2","_progress_measure2","_description2","_scaled","scaled_range","readOnlyAfterInit","_comment","_location2","_timestamp2","_readOnlyAfterInit","comment","CMILangString4000","CMIString250","ADLNav","_this$nav","_this10","_super14","_request","request_valid","ADLNavRequestValid","_this$request_valid","_this11","_super15","_continue","_previous","_temp","_target","_temp2","_","previous","continue","LOG_LEVEL_NONE","101","201","202","203","301","401","402","403","404","405","407","408","0","102","103","104","111","112","113","122","123","132","133","142","143","351","391","406","INITIALIZATION_FAILED","TERMINATION_FAILURE","ARGUMENT_ERROR","GENERAL_GET_FAILURE","GENERAL_COMMIT_FAILURE","UNIMPLEMENTED_ELEMENT","MULTIPLE_TERMINATIONS","aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mo","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","sh","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu","aar","abk","ave","afr","aka","amh","arg","ara","asm","ava","aym","aze","bak","bel","bul","bih","bis","bam","ben","tib","bod","bre","bos","cat","che","cha","cos","cre","cze","ces","chu","chv","wel","cym","dan","ger","deu","div","dzo","ewe","gre","ell","eng","epo","spa","est","baq","eus","per","fas","ful","fin","fij","fao","fre","fra","fry","gle","gla","glg","grn","guj","glv","hau","heb","hin","hmo","hrv","hat","hun","arm","hye","her","ina","ind","ile","ibo","iii","ipk","ido","ice","isl","ita","iku","jpn","jav","geo","kat","kon","kik","kua","kaz","kal","khm","kan","kor","kau","kas","kur","kom","cor","kir","lat","ltz","lug","lim","lin","lao","lit","lub","lav","mlg","mah","mao","mri","mac","mkd","mal","mon","mol","mar","may","msa","mlt","bur","mya","nau","nob","nde","nep","ndo","dut","nld","nno","nor","nbl","nya","oci","oji","orm","ori","oss","pan","pli","pol","pus","por","que","roh","run","rum","ron","rus","kin","san","srd","snd","sme","sag","slo","sin","slk","slv","smo","sna","som","alb","sqi","srp","ssw","sot","sun","swe","swa","tam","tel","tgk","tha","tir","tuk","tgl","tsn","ton","tur","tso","tat","twi","tah","uig","ukr","urd","uzb","ven","vie","vol","wln","wol","xho","yid","yor","zha","chi","zho","zul","CMIInteger","CMIIndex","CMIString200","CMIString4000","CMILangString250cr","CMIShortIdentifier","CMIIndexStore","NAVBoolean","NAVTarget","true-false","choice","fill-in","long-fill-in","matching","performance","sequencing","likert","numeric","_len","rest","_key","_Scorm2004API","_Scorm12API","_AICC","window","totalSeconds","hours","floor","SECONDS_PER_HOUR","dateObj","minutes","getUTCMinutes","getSeconds","msStr","countDecimals","toFixed","duration","remainder","designations","sign","current_seconds","getTimeAsSeconds","timeString","timeRegex","getDurationAsSeconds","durationRegex","exec","years","days","first","second","data","recurse","cur","prop","isArray","l","isEmpty","p","regex","m","num","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_DAY"],"mappings":"AAAA;;ACkIA,QAASA,UAASC,EAAMC,EAAMC,GAuB5B,QAASC,GAAWC,GAClB,GAAIC,GAAOC,EACPC,EAAUC,CAKd,OAHAF,GAAWE,MAAWC,GACtBC,EAAiBN,EACjBO,EAASX,EAAKY,MAAML,EAASF,GAI/B,QAASQ,GAAYT,GAMnB,MAJAM,GAAiBN,EAEjBU,EAAUC,WAAWC,EAAcf,GAE5BgB,EAAUd,EAAWC,GAAQO,EAGtC,QAASO,GAAcd,GACrB,GAAIe,GAAoBf,EAAOgB,EAC3BC,EAAsBjB,EAAOM,EAC7BC,EAASV,EAAOkB,CAEpB,OAAOG,GAASC,UAAUZ,EAAQa,EAAUH,GAAuBV,EAGrE,QAASc,GAAarB,GACpB,GAAIe,GAAoBf,EAAOgB,EAC3BC,EAAsBjB,EAAOM,CAKjC,YAAyBD,KAAjBW,GAA+BD,GAAqBlB,GACzDkB,EAAoB,GAAOG,GAAUD,GAAuBG,EAGjE,QAASR,KACP,GAAIZ,GAAOsB,KACX,IAAID,EAAarB,GACf,MAAOuB,GAAavB,EAGtBU,GAAUC,WAAWC,EAAcE,EAAcd,IAGnD,QAASuB,GAAavB,GAKpB,MAJAU,OAAUL,GAINmB,GAAYtB,EACPH,EAAWC,IAEpBE,EAAWE,MAAWC,GACfE,GAGT,QAASkB,SACSpB,KAAZK,GACFgB,aAAahB,GAEfJ,EAAiB,EACjBJ,EAAWc,EAAeZ,EAAWM,MAAUL,GAGjD,QAASsB,KACP,WAAmBtB,KAAZK,EAAwBH,EAASgB,EAAaD,OAGvD,QAASM,KACP,GAAI5B,GAAOsB,MACPO,EAAaR,EAAarB,EAM9B,IAJAE,EAAW4B,UACX1B,EAAW2B,KACXf,EAAehB,EAEX6B,EAAY,CACd,OAAgBxB,KAAZK,EACF,MAAOD,GAAYO,EAErB,IAAIE,EAGF,MADAR,GAAUC,WAAWC,EAAcf,GAC5BE,EAAWiB,GAMtB,WAHgBX,KAAZK,IACFA,EAAUC,WAAWC,EAAcf,IAE9BU,EAlHT,GAAIL,GACAE,EACAgB,EACAb,EACAG,EACAM,EACAV,EAAiB,EACjBO,GAAU,EACVK,GAAS,EACTM,GAAW,CAEf,IAAmB,kBAAR5B,GACT,KAAM,IAAIoC,WAAUC,gBA0GtB,OAxGApC,GAAOqC,SAASrC,IAAS,EACrBsC,SAASrC,KACXe,IAAYf,EAAQe,QACpBK,EAAS,WAAapB,GACtBsB,EAAUF,EAASkB,UAAUF,SAASpC,EAAQsB,UAAY,EAAGvB,GAAQuB,EACrEI,EAAW,YAAc1B,KAAYA,EAAQ0B,SAAWA,GAiG1DI,EAAUH,OAASA,EACnBG,EAAUD,MAAQA,EACXC,EA4BT,QAASO,UAASE,GAChB,GAAIC,SAAcD,EAClB,SAASA,IAAkB,UAARC,GAA4B,YAARA,GA2BzC,QAASC,cAAaF,GACpB,QAASA,GAAyB,gBAATA,GAoB3B,QAASG,UAASH,GAChB,MAAuB,gBAATA,IACXE,aAAaF,IAAUI,eAAeC,KAAKL,IAAUM,UA0B1D,QAAST,UAASG,GAChB,GAAoB,gBAATA,GACT,MAAOA,EAET,IAAIG,SAASH,GACX,MAAOO,IAET,IAAIT,SAASE,GAAQ,CACnB,GAAIQ,GAAgC,kBAAjBR,GAAMS,QAAwBT,EAAMS,UAAYT,CACnEA,GAAQF,SAASU,GAAUA,EAAQ,GAAMA,EAE3C,GAAoB,gBAATR,GACT,MAAiB,KAAVA,EAAcA,GAASA,CAEhCA,GAAQA,EAAMU,QAAQC,OAAQ,GAC9B,IAAIC,GAAWC,WAAWC,KAAKd,EAC/B,OAAQY,IAAYG,UAAUD,KAAKd,GAC/BgB,aAAahB,EAAMiB,MAAM,GAAIL,EAAW,EAAI,GAC3CM,WAAWJ,KAAKd,GAASO,KAAOP,EA3WvC,GAAIJ,iBAAkB,sBAGlBW,IAAM,IAGND,UAAY,kBAGZK,OAAS,aAGTO,WAAa,qBAGbL,WAAa,aAGbE,UAAY,cAGZC,aAAeG,SAGfC,WAA8B,gBAAVC,SAAsBA,QAAUA,OAAOC,SAAWA,QAAUD,OAGhFE,SAA0B,gBAARC,OAAoBA,MAAQA,KAAKF,SAAWA,QAAUE,KAGxEC,KAAOL,YAAcG,UAAYG,SAAS,iBAG1CC,YAAcL,OAAOM,UAOrBxB,eAAiBuB,YAAYE,SAG7B9B,UAAY+B,KAAKC,IACjBjD,UAAYgD,KAAKE,IAkBjB/C,IAAM,WACR,MAAOwC,MAAKQ,KAAKhD,MA+SnBiD,QAAOC,QAAU7E;;;;wqGCvXjB,IAAA8E,cAAAC,uBAAAC,QAAA,iBACAC,UAAAD,QAAA,kBAMAE,aAAAF,QAAA,qBAKqBG,iBAKnB,QAAAA,GAAYC,GAAc,GAAAC,EAAAC,iBAAAlD,KAAA+C,EACxB,IAAMI,GAAaC,cAAAA,kBAEfC,kBAAkB,IACdL,EAJgB,OAOxBC,GAAAK,EAAA3C,KAAAX,KAAMmD,GAENF,EAAKM,IAAM,GAAIC,WAAAA,IACfP,EAAKQ,IAAM,GAAIC,cAAAA,IAVST,2FAqB1B,SAAgBU,EAAYrD,EAAOsD,GACjC,GAAIC,GAAQC,KAAAC,gBAAAhB,EAAAb,WAAA,kBAAAlC,MAAAW,KAAAX,KAAyB2D,EAAYrD,EAAOsD,EAcxD,OAZKC,KACC7D,KAAKgE,cAAcL,EAAY,sCACjCE,EAAW,GAAII,WAAAA,4BACNjE,KAAKgE,cAAcL,EAC1B,qCACFE,EAAW,GAAIK,WAAAA,eACNlE,KAAKgE,cAAcL,EAC1B,iDACFE,EAAW,GAAIM,WAAAA,0BAIZN,4CAQT,SAA2BO,GAEzBpE,KAAKuD,IAAMa,EAAOb,IAClBvD,KAAKyD,IAAMW,EAAOX,WApDYY,aAAAA;;gxGCZlC,IAAAC,SAAA1B,QAAA,gBACA2B,YAAA3B,QAAA,gBACA4B,cAAA7B,uBAAAC,QAAA,4BACA6B,eAAA9B,uBAAAC,QAAA,8BACA8B,WAAA9B,QAAA,eACA+B,QAAAhC,uBAAAC,QAAA,oBAEMgC,iBAAmBC,eAAAA,QAAalD,OAChCmD,oBAAsBC,cAAAA,QAAWC,4EAMlBC,mBA6CjB,QAAAA,GAAYC,EAAalC,GACrB,GAD+BE,gBAAAlD,KAAAiF,GAAAE,SAAAC,IAAApF,MAAAqF,UAAA,EAAA/E,UAAA,KAAAgF,aAAAF,IAAApF,MAAAqF,UAAA,EAAA/E,UAAA,KAAAiF,UAAAH,IAAApF,MAAAqF,UAAA,EAAA/E,OAzC/BkF,YAAY,EACZC,kBAAmB,GACnBC,aAAa,EACbC,kBAAkB,EAClBC,cAAc,EACdC,iBAAkB,OAClBC,sBAAuB,iCACvBC,cAAc,EACdC,SAAUpB,iBAAiBqB,gBAC3BC,uBAAuB,EACvBC,qBAAqB,EACrBC,gBAAiB,SAAUC,GACvB,GAAI7H,EAcJ,YAbmB,KAAR6H,IAEQ,QADf7H,EAAS8H,KAAKC,MAAMF,EAAIG,mBACGC,eAAe9F,KAAKnC,EAAQ,YACnDA,KACmB,MAAf6H,EAAIK,QACJlI,EAAOA,OAASoG,iBAAiB+B,WACjCnI,EAAOoI,UAAY,IAEnBpI,EAAOA,OAASoG,iBAAiBiC,YACjCrI,EAAOoI,UAAY,OAIxBpI,GAEXsI,eAAgB,SAAUC,GACtB,MAAOA,OAYoBC,gBAAAhH,KAAA,UAAA,IAAAgH,gBAAAhH,KAAA,mBAAA,KAC3BA,eAAAiF,GAAAjF,KAAAiH,gBAAA,MAAehC,EACf,KAAM,IAAIhF,WAAU,8CAExBD,MAAKkH,aAAetC,iBAAiBuC,sBACrCnH,KAAKoH,UAAYxC,iBAAiByC,SAClCrH,KAAKsH,iBAELC,sBAAAvH,KAAAmF,SAAgB,MAChBoC,sBAAAvH,KAAAsF,aAAoBJ,GAEpBlF,KAAKgD,SAAWA,EAChBhD,KAAKwH,YAAcxH,KAAKgD,SAASgD,SACjChG,KAAKkG,sBAAwBlG,KAAKgD,SAASkD,qEAU/C,SAAWuB,EAAsBC,EAA4BC,GACzD,GAAIC,GAAchD,iBAAiBiC,WAoBnC,OAlBI7G,MAAK6H,gBACL7H,KAAK8H,gBAAgBC,sBAAA/H,KAAAsF,cAAkB0C,YAAaN,GAC7C1H,KAAKiI,eACZjI,KAAK8H,gBAAgBC,sBAAA/H,KAAAsF,cAAkB4C,WAAYP,IAE/C3H,KAAKkG,uBACLlG,KAAKuD,IAAI4E,eAGbnI,KAAKkH,aAAetC,iBAAiBwD,kBACrCpI,KAAKoH,UAAYxC,iBAAiByC,SAClCO,EAAchD,iBAAiB+B,WAC/B3G,KAAKqI,iBAAiBZ,IAG1BzH,KAAKsI,OAAOb,EAAc,KAAM,aAAeG,EAAahD,iBAAiB2D,gBAC7EvI,KAAKwI,gBAAgBZ,GAEdA,2BAOX,WACI,MAAAG,uBAAO/H,KAAPsF,oCAOJ,WACI,MAAAyC,uBAAO/H,KAAPuF,gBAOJ,SAAavC,GACTuE,sBAAAvH,KAAAuF,UAAAnC,cAAAA,iBAAA2E,sBAAsB/H,KAAtBuF,YAAyCvC,6BAS7C,SAAUyE,EAAsBgB,GAC5B,GAAIb,GAAchD,iBAAiBiC,WAEnC,IACI7G,KAAK0I,WACDD,EACAV,sBAAA/H,KAAAsF,cAAkBqD,wBAClBZ,sBAAA/H,KAAAsF,cAAkBsD,sBAExB,CACE5I,KAAKkH,aAAetC,iBAAiBiE,gBAErC,KACI,GAAMrK,GAASwB,KAAK8I,UAAUrB,GAAc,IAEvCzH,KAAKgD,SAAS2C,mBACd3F,KAAKgD,SAAS0C,iBACa,KAArBlH,EAAOoI,WACdpI,EAAOoI,UAAY,GAEnB5G,KAAK8H,gBAAgBtJ,EAAOoI,WAEhCgB,MACsB,KAAXpJ,GAA0BA,EAAOA,OAASA,EAAOA,OAASoG,iBAAiBiC,YAElF4B,IAAiBzI,KAAKoH,UAAYxC,iBAAiByC,UAEvDO,EAAchD,iBAAiB+B,WAC/B3G,KAAKqI,iBAAiBZ,GACxB,MAAOsB,GACDA,YAAaC,aAAAA,iBACbhJ,KAAKoH,WACDR,UAAWmC,EAAEnC,UACbqC,aAAcF,EAAEG,SAEpBtB,EAAchD,iBAAiBiC,cAE3BkC,EAAEG,QACFC,QAAQC,MAAML,EAAEG,SAEhBC,QAAQC,MAAML,GAElB/I,KAAK8H,gBAAgBC,sBAAA/H,KAAAsF,cAAkB+D,WAQnD,MAHArJ,MAAKsI,OAAOb,EAAc,KAAM,aAAeG,EAAahD,iBAAiB2D,gBAC7EvI,KAAKwI,gBAAgBZ,GAEdA,0BAWX,SAASH,EAAsBgB,EAA0B9E,GACrD,GAAIiE,EAiBJ,OAdI5H,MAAK0I,WACDD,EACAV,sBAAA/H,KAAAsF,cAAkBgE,qBAClBvB,sBAAA/H,KAAAsF,cAAkBiE,uBAGlBd,IAAiBzI,KAAKoH,UAAYxC,iBAAiByC,UACvDO,EAAc5H,KAAKwJ,YAAY7F,GAC/B3D,KAAKqI,iBAAiBZ,EAAc9D,IAGxC3D,KAAKsI,OAAOb,EAAc9D,EAAY,aAAeiE,EAAahD,iBAAiB2D,gBACnFvI,KAAKwI,gBAAgBZ,GAEdA,0BAaX,SAASH,EAAsBgC,EAAwBhB,EAA0B9E,EAAYrD,OAC3EhC,KAAVgC,IACAA,EAAQoJ,OAAOpJ,GAEnB,IAAIsH,GAAchD,iBAAiBiC,WAEnC,IAAI7G,KAAK0I,WAAWD,EAAiBV,sBAAA/H,KAAAsF,cAAkBqE,kBAAmB5B,sBAAA/H,KAAAsF,cAAkBsE,kBAAmB,CACvGnB,IAAiBzI,KAAKoH,UAAYxC,iBAAiByC,SACvD,KACIO,EAAc5H,KAAK6J,YAAYlG,EAAYrD,GAC7C,MAAOyI,GACDA,YAAaC,aAAAA,iBACbhJ,KAAKoH,WACDR,UAAWmC,EAAEnC,UACbqC,aAAcF,EAAEG,SAEpBtB,EAAchD,iBAAiBiC,cAE3BkC,EAAEG,QACFC,QAAQC,MAAML,EAAEG,SAEhBC,QAAQC,MAAML,GAElB/I,KAAK8H,gBAAgBC,sBAAA/H,KAAAsF,cAAkB+D,UAG/CrJ,KAAKqI,iBAAiBZ,EAAc9D,EAAYrD,GAuBpD,WApBoBhC,KAAhBsJ,IACAA,EAAchD,iBAAiBiC,aAKM,MAArC6C,OAAO1J,KAAKoH,UAAUR,YAClB5G,KAAKgD,SAASwC,aAAcuC,sBAAC/H,KAADmF,WAC5BnF,KAAK8J,eAAiD,IAAlC9J,KAAKgD,SAASyC,kBAA0BgE,GAIpEzJ,KAAKsI,OACDb,EADJ,GAAAsC,OAEOpG,EAFP,OAAAoG,OAEuBzJ,GACnB,aAAesH,EACfhD,iBAAiB2D,gBAErBvI,KAAKwI,gBAAgBZ,GAEdA,wBASX,SAAOH,EAAsBgB,GACzBzI,KAAKgK,sBAEL,IAAIpC,GAAchD,iBAAiBiC,WAEnC,IACI7G,KAAK0I,WAAWD,EAAiBV,sBAAA/H,KAAAsF,cAAkB2E,mBAAoBlC,sBAAA/H,KAAAsF,cAAkB4E,mBAEzF,IACI,GAAM1L,GAASwB,KAAK8I,UAAUrB,GAAc,IAEvCzH,KAAKgD,SAAS2C,mBACd3F,KAAKgD,SAAS0C,aACflH,EAAOoI,WACPpI,EAAOoI,UAAY,GAEnB5G,KAAK8H,gBAAgBtJ,EAAOoI,WAEhCgB,MACsB,KAAXpJ,GAA0BA,EAAOA,OAASA,EAAOA,OAASoG,iBAAiBiC,YAKlF4B,IAAiBzI,KAAKoH,UAAYxC,iBAAiByC,UAEvDrH,KAAKqI,iBAAiBZ,GACxB,MAAOsB,GACDA,YAAaC,aAAAA,iBACbhJ,KAAKoH,WACDR,UAAWmC,EAAEnC,UACbqC,aAAcF,EAAEG,SAEpBtB,EAAchD,iBAAiBiC,cAE3BkC,EAAEG,QACFC,QAAQC,MAAML,EAAEG,SAEhBC,QAAQC,MAAML,GAElB/I,KAAK8H,gBAAgBC,sBAAA/H,KAAAsF,cAAkB+D,UAQnD,MAHArJ,MAAKsI,OAAOb,EAAc,KAAM,aAAeG,EAAahD,iBAAiB2D,gBAC7EvI,KAAKwI,gBAAgBZ,GAEdA,8BAQX,SAAaH,GACT,GAAMG,GAAc8B,OAAO1J,KAAKoH,UAAUR,UAM1C,OAJA5G,MAAKqI,iBAAiBZ,GAEtBzH,KAAKsI,OAAOb,EAAc,KAAM,aAAeG,EAAahD,iBAAiB2D,gBAEtEX,gCAUX,SAAeH,EAAsB0C,GACjC,GAAIvC,GAAc,EASlB,OAPqB,QAAjBuC,GAA0C,KAAjBA,IACzBvC,EAAc5H,KAAKoK,0BAA0BD,GAC7CnK,KAAKqI,iBAAiBZ,IAG1BzH,KAAKsI,OAAOb,EAAc,KAAM,aAAeG,EAAahD,iBAAiB2D,gBAEtEX,+BAUX,SAAcH,EAAsB0C,GAChC,GAAIvC,GAAc,EASlB,OAPqB,QAAjBuC,GAA0C,KAAjBA,IACzBvC,EAAc5H,KAAKoK,0BAA0BD,GAAc,GAC3DnK,KAAKqI,iBAAiBZ,IAG1BzH,KAAKsI,OAAOb,EAAc,KAAM,aAAeG,EAAahD,iBAAiB2D,gBAEtEX,4BAWX,SAAWa,EAA0B4B,EAAyBC,GAC1D,MAAItK,MAAKuK,oBACLvK,KAAK8H,gBAAgBuC,IACd,IACA5B,IAAmBzI,KAAKiI,iBAC/BjI,KAAK8H,gBAAgBwC,IACd,yBAcf,SAAOE,EAAsB7G,EAAoB8G,EAAoBC,GAGjE,GAFAD,EAAazK,KAAK2K,cAAcH,EAAc7G,EAAY8G,GAEtDC,GAAgB1K,KAAKwH,YACrB,OAAQkD,GACJ,IAAK9F,kBAAiBqB,gBAClBkD,QAAQC,MAAMqB,EACd,MACJ,KAAK7F,kBAAiBgG,kBAClBzB,QAAQ0B,KAAKJ,EACb,MACJ,KAAK7F,kBAAiB2D,eAClBY,QAAQ2B,KAAKL,EACb,MACJ,KAAK7F,kBAAiBmG,gBACd5B,QAAQ6B,MACR7B,QAAQ6B,MAAMP,GAEdtB,QAAQ8B,IAAIR,GAK5B,GAAMS,IACFC,MAAM,GAAI5I,OAAO6I,cACjBlC,QAASuB,EACTrB,MAAK,IAAAW,OAAM/J,KAAKoH,UAAU6B,aAArB,KAETjJ,MAAKqI,iBAAiB,SAAU1E,EAAYuH,gCAWhD,SAAcV,EAAsB7G,EAAoBuF,GACpDvF,EAAaA,GAAc,EAC3B,IACI0H,GAAgB,EAEpBA,IAAiBb,EAEb7G,IACA0H,GAAiB,MAKrBA,IAAiB1H,CAIjB,KAAK,GAFC2H,GAJuB,GAIYD,EAAcE,OAE9CC,EAAI,EAAGA,EAAIF,EAAWE,IAC3BH,GAAiB,GAOrB,OAJInC,KACAmC,GAAiBnC,GAGdmC,+BAUX,SAAcI,EAAaC,GACvB,MAAOD,IAAOC,GAAUD,EAAIE,MAAMD,0CAUtC,SAAwBE,EAAWC,GAC/B,MACIjK,QAAO6E,eAAe9F,KAAKiL,EAAWC,IACtCjK,OAAOkK,yBAAyBlK,OAAOmK,eAAeH,GAAYC,IAClEA,IAAaD,4CAarB,SAA0BI,EAAcC,GACpC,KAAM,IAAIC,OAAM,4FAWpB,SAAYC,GACR,KAAM,IAAID,OAAM,8EAYpB,SAAYC,EAAaC,GACrB,KAAM,IAAIF,OAAM,qFAYpB,SAAmBG,EAAoBC,EAAoB3I,EAAYrD,GACnE,IAAKqD,GAA6B,KAAfA,EACf,MAAOiB,kBAAiBiC,WAW5B,KAAK,GARC0F,GAAY5I,EAAW6I,MAAM,KAC/BZ,EAAY5L,KACZ4H,EAAchD,iBAAiBiC,YAC/BjD,GAAkB,EAEhB6I,EAAmB,oCAAA1C,OAAuCsC,EAAvC,MAAAtC,OAAsDpG,EAAtD,8CACnB+I,EAAmBJ,EAAYvE,sBAAA/H,KAAAsF,cAAkBqH,qBAAuB5E,sBAAA/H,KAAAsF,cAAkB+D,QAEvFuD,EAAI,EAAGA,EAAIL,EAAUhB,OAAQqB,IAAK,CACvC,GAAMf,GAAYU,EAAUK,EAC5B,IAAIA,IAAML,EAAUhB,OAAS,EAErBe,GAC2B,aAA3BT,EAAUgB,OAAO,EAAG,IACe,kBAA5BjB,GAAUkB,eAEjB9M,KAAK8H,gBAAgBC,sBAAA/H,KAAAsF,cAAkByH,mBAC/B/M,KAAKgN,wBAAwBpB,EAAWC,IAG5C7L,KAAK6H,iBAAmB7H,KAAKgE,cAAcL,EAAY,gCACvD3D,KAAKiN,wBAAwBtJ,EAAYrD,GAGxCgM,GAA0C,IAA7BtM,KAAKoH,UAAUR,YAC7BgF,EAAUC,GAAavL,EACvBsH,EAAchD,iBAAiB+B,aARnC3G,KAAK8H,gBAAgB4E,EAAkBD,OAWxC,CAEH,KADAb,EAAYA,EAAUC,IACN,CACZ7L,KAAK8H,gBAAgB4E,EAAkBD,EACvC,OAGJ,GAAIb,YAAqBsB,SAAAA,SAAU,CAC/B,GAAMC,GAAQ1L,SAAS8K,EAAUK,EAAI,GAAI,GAEzC,KAAKQ,MAAMD,GAAQ,CACf,GAAME,GAAOzB,EAAU0B,WAAWH,EAElC,IAAIE,EACAzB,EAAYyB,EACZzJ,GAAkB,MACf,CACH,GAAMC,GAAW7D,KAAKuN,gBAAgB5J,EAAYrD,EAAOsD,EACzDA,IAAkB,EAEbC,GAGG+H,EAAU4B,aAAa3J,EAAS4J,aAEpC7B,EAAU0B,WAAWI,KAAK7J,GAC1B+H,EAAY/H,GALZ7D,KAAK8H,gBAAgB4E,EAAkBD,GAU/CG,OAehB,MATIhF,KAAgBhD,iBAAiBiC,aACjC7G,KAAKsI,OACD+D,EACA,KAFJ,6CAAAtC,OAGiDpG,EAHjD,gBAAAoG,OAG0EzJ,GACtEsE,iBAAiBgG,mBAIlBhD,yCASX,SAAwBuE,EAAaC,mCAcrC,SAAgBD,EAAaC,EAAQuB,GACjC,KAAM,IAAIzB,OAAM,yFAWpB,SAAmBG,EAAoBC,EAAoB3I,GACvD,IAAKA,GAA6B,KAAfA,EACf,MAAO,EAWX,KAAK,GARC4I,GAAY5I,EAAW6I,MAAM,KAC/BZ,EAAY5L,KACZ6L,EAAY,KAEV+B,EAAyB,oCAAA7D,OAAuCsC,EAAvC,MAAAtC,OAAsDpG,EAAtD,+BACzB8I,EAAmB,oCAAA1C,OAAuCsC,EAAvC,MAAAtC,OAAsDpG,EAAtD,8CACnB+I,EAAmBJ,EAAYvE,sBAAA/H,KAAAsF,cAAkBqH,qBAAuB5E,sBAAA/H,KAAAsF,cAAkB+D,QAEvFuD,EAAI,EAAGA,EAAIL,EAAUhB,OAAQqB,IAAK,CAGvC,GAFAf,EAAYU,EAAUK,GAEjBN,EAOE,CACH,GAAuC,aAAnC5C,OAAOmC,GAAWgB,OAAO,EAAG,IAAwD,kBAA5BjB,GAAUkB,eAA8B,CAChG,GAAMe,GAASnE,OAAOmC,GAAWgB,OAAO,EAAGnD,OAAOmC,GAAWN,OAAS,EACtE,OAAOK,GAAUkB,eAAee,GAC7B,IAAK7N,KAAKgN,wBAAwBpB,EAAWC,GAEhD,WADA7L,MAAK8H,gBAAgB4E,EAAkBD,OAX3C,IAAIG,IAAML,EAAUhB,OAAS,IACpBvL,KAAKgN,wBAAwBpB,EAAWC,GAEzC,WADA7L,MAAK8H,gBAAgB4E,EAAkBD,EAenD,QAAkBnO,MADlBsN,EAAYA,EAAUC,IACO,CACzB7L,KAAK8H,gBAAgB4E,EAAkBD,EACvC,OAGJ,GAAIb,YAAqBsB,SAAAA,SAAU,CAC/B,GAAMC,GAAQ1L,SAAS8K,EAAUK,EAAI,GAAI,GAGzC,KAAKQ,MAAMD,GAAQ,CACf,GAAME,GAAOzB,EAAU0B,WAAWH,EAElC,KAAIE,EAEG,CACHrN,KAAK8H,gBAAgBC,sBAAA/H,KAAAsF,cAAkBwI,sBAAuBF,EAC9D,OAHAhC,EAAYyB,EAOhBT,MAKZ,GAAkB,OAAdhB,OAAoCtN,KAAdsN,EAStB,MAAOA,EARFU,KACiB,cAAdT,EACA7L,KAAK8H,gBAAgBhD,oBAAoBiJ,gBACpB,WAAdlC,GACP7L,KAAK8H,gBAAgBhD,oBAAoBkJ,2CAazD,WACI,MAAOhO,MAAKkH,eAAiBtC,iBAAiBwD,kDAQlD,WACI,MAAOpI,MAAKkH,eAAiBtC,iBAAiBuC,kDAQlD,WACI,MAAOnH,MAAKkH,eAAiBtC,iBAAiBiE,mCASlD,SAAGoF,EAAsBC,GACrB,GAAKA,EAGL,IAAK,GADCC,GAAoBF,EAAazB,MAAM,KACpCI,EAAI,EAAGA,EAAIuB,EAAkB5C,OAAQqB,IAAK,CAC/C,GAAMwB,GAAgBD,EAAkBvB,GAAGJ,MAAM,IACjD,IAA6B,IAAzB4B,EAAc7C,OAAc,MAEhC,IAAMf,GAAe4D,EAAc,GAE/BzK,EAAa,IACbyK,GAAc7C,OAAS,IACvB5H,EAAasK,EAAajN,QAAQwJ,EAAe,IAAK,KAG1DxK,KAAKsH,cAAcoG,MACflD,aAAcA,EACd7G,WAAYA,EACZuK,SAAUA,wBAatB,SAAID,EAAsBC,GAAoB,GAAAjL,GAAAjD,IAC1C,IAAKkO,EAGL,IAAK,GADCC,GAAoBF,EAAazB,MAAM,KACpCI,EAAI,EAAGA,EAAIuB,EAAkB5C,OAAQqB,IAAK,CAAA,GAAAyB,GAJT,SAIjCzB,GACL,GAAMwB,GAAgBD,EAAkBvB,GAAGJ,MAAM,IACjD,IAA6B,IAAzB4B,EAAc7C,OAAc,OAAA+C,MAAA,GAEhC,IAAM9D,GAAe4D,EAAc,GAE/BzK,EAAa,IACbyK,GAAc7C,OAAS,IACvB5H,EAAasK,EAAajN,QAAQwJ,EAAe,IAAK,IAG1D,IAAM+D,GAActL,EAAKqE,cAAckH,UACnC,SAACC,GAAD,MAASA,GAAIjE,eAAiBA,GAAgBiE,EAAI9K,aAAeA,GAAc8K,EAAIP,WAAaA,KAE/E,IAAjBK,GACAtL,EAAKqE,cAAcoH,OAAOH,EAAa,IAftC3B,EAA0C,IAAA,WAAA+B,QAAAN,GAAA,MAAAA,GAAAC,wBA0BvD,SAAML,GAEF,IAAK,GAFmBW,GAAA5O,KAClBmO,EAAoBF,EAAazB,MAAM,KACpCI,EAAI,EAAGA,EAAIuB,EAAkB5C,OAAQqB,IAAK,CAAA,GAAAiC,GAF3B,SAEfjC,GACL,GAAMwB,GAAgBD,EAAkBvB,GAAGJ,MAAM,IACjD,IAA6B,IAAzB4B,EAAc7C,OAAc,OAAA+C,MAAA,GAEhC,IAAM9D,GAAe4D,EAAc,GAE/BzK,EAAa,IACbyK,GAAc7C,OAAS,IACvB5H,EAAasK,EAAajN,QAAQwJ,EAAe,IAAK,KAG1DoE,EAAKtH,cAAgBsH,EAAKtH,cAAcwH,OACpC,SAACL,GAAD,MAASA,GAAIjE,eAAiBA,GAAgBiE,EAAI9K,aAAeA,KAZhEiJ,EAA0C,IAAA,WAAA+B,QAAAE,GAAA,MAAAA,GAAAP,mCAwBvD,SAAiB9D,EAAsB7G,EAAoBrD,GACvD,IAAK,GAAIsM,GAAI,EAAGA,EAAI5M,KAAKsH,cAAciE,OAAQqB,IAAK,CAChD,GAAMmC,GAAW/O,KAAKsH,cAAcsF,GAC9BoC,EAAiBD,EAASvE,eAAiBA,EAC3CyE,IAA0BF,EAASpL,WACrCuL,GAAmB,CAMnBA,GAJAvL,GACAoL,EAASpL,YACyD,MAAlEoL,EAASpL,WAAWwL,UAAUJ,EAASpL,WAAW4H,OAAS,GAGkC,IAAzF5H,EAAWyL,QAAQL,EAASpL,WAAWwL,UAAU,EAAGJ,EAASpL,WAAW4H,OAAS,IAElEwD,EAASpL,aAAeA,GAG3CqL,GAAoBC,IAAyBC,GAC7CH,EAASb,SAASvK,EAAYrD,mCAW1C,SAAgB+O,EAAqBnG,GAC5BA,IACDA,EAAUlJ,KAAKoK,0BAA0BiF,IAG7CrP,KAAKsI,OAAO,kBAAmB,KAAM+G,EAAc,KAAOnG,EAAStE,iBAAiBqB,iBAEpFjG,KAAKoH,WACDR,UAAWyI,EACXpG,aAAcC,kCAStB,SAAgBoG,OACIhR,KAAZgR,GAAyBA,IAAY1K,iBAAiBiC,cACtD7G,KAAKoH,UAAYxC,iBAAiByC,mCAY1C,SAAUkI,GACN,KAAM,IAAIrD,OAAM,sFAQpB,SAAsBsD,EAAM7L,GAcxB,QAAS8L,GAAYC,EAAGC,EAAGC,GACvB,GAEIC,GAFEC,EAAUJ,EAAE/D,MAAMiE,EAGxB,IAAgB,OAAZE,GAAuD,QAAlCD,EAAUF,EAAEhE,MAAMiE,IAAsB,CAC7D,GAAMG,GAAQC,OAAOF,EAAQ,IACvBG,EAAQD,OAAOH,EAAQ,GAC7B,OAAIE,KAAUE,EACS,OAAfH,EAAQ,IACA,EACc,SAAfA,EAAQ,GACI,OAAfD,EAAQ,GACD,GAEC,EAGL,EAGRE,EAAQE,EAGnB,MAAO,MArCyB,GAAAC,GAAAlQ,IACpC,KAAKA,KAAKuK,mBAEN,WADApB,SAAQC,MAAM,6EAsClB,IAAM+G,GAAc,qCACdC,EAAc,mCAEd5R,EAASoD,OAAOyO,KAAKb,GAAMc,IAAI,SAAUC,GAC3C,OAAQ7G,OAAO6G,GAAMf,EAAKe,KAI9B/R,GAAOgS,KAAK,SAAAC,EAAAC,GAA0B,GAC9BtP,GAD8BuP,EAAAC,eAAAH,EAAA,GAAff,EAAeiB,EAAA,GAAAE,GAAAF,EAAA,GAAAC,eAAAF,EAAA,IAAPf,EAAOkB,EAAA,EAAAA,GAAA,EAElC,OAAgD,SAA3CzP,EAAOqO,EAAYC,EAAGC,EAAGQ,IACnB/O,EAEqC,QAA3CA,EAAOqO,EAAYC,EAAGC,EAAGS,IACnBhP,EAGPsO,EAAIC,GACI,EAERD,EAAIC,EACG,EAEJ,GAGX,IAAIlB,EACJjQ,GAAOsS,QAAQ,SAACC,GACZtC,KACAA,EAAIsC,EAAQ,IAAMA,EAAQ,GAC1Bb,EAAKc,cAAa,EAAAtM,WAAAuM,WAAUxC,GAAM9K,iCAU1C,SAAa6L,EAAM7L,GACf,IAAK3D,KAAKuK,mBAEN,WADApB,SAAQC,MAAM,oEAIlBzF,OAA4BrF,KAAfqF,EAA2BA,EAAa,MAErD3D,KAAKkR,aAAe1B,CAGpB,KAAK,GAAMe,KAAOf,GACd,MAAO/I,eAAe9F,KAAK6O,EAAMe,IAAQf,EAAKe,GAAM,CAChD,GAAMY,IAAqBxN,EAAaA,EAAa,IAAM,IAAM4M,EAC3DjQ,EAAQkP,EAAKe,EAEnB,IAAIjQ,EAAK,WACL,IAAK,GAAIsM,GAAI,EAAGA,EAAItM,EAAK,WAAeiL,OAAQqB,IAC5C5M,KAAKgR,aAAa1Q,EAAK,WAAesM,GAAIuE,EAAoB,IAAMvE,OAEjEtM,GAAM2G,cAAgBrF,OAC7B5B,KAAKgR,aAAa1Q,EAAO6Q,GAEzBnR,KAAK6J,YAAYsH,EAAmB7Q,yCAWpD,WACI,GAAMiD,GAAMvD,KAAKuD,GAGjB,OAAO+C,MAAK8K,WAAY7N,IAAAA,yCAO5B,WAGI,MAAO+C,MAAKC,MAAMvG,KAAKqR,wDAW3B,SAAgBC,GACZ,KAAM,IAAIpF,OAAM,mFAUpB,SAAmBzE,EAAsB8J,EAAaxK,GAA2B,GAAAyK,GAAAxR,KAAnByR,EAAmB1R,UAAAwL,OAAA,OAAAjN,KAAAyB,UAAA,IAAAA,UAAA,GACvE2R,EAAU,SAACH,EAAKxK,EAAQ/D,EAAUkC,GACpC6B,EAAS/D,EAAS8D,eAAeC,EACjC,IAKIvI,GALEmT,GACFnT,OAAQoG,iBAAiBiC,YACzBD,UAAW1B,EAAYmE,QAI3B,IAAKrG,EAAS2C,iBAgFV,IACI,GAGIiM,GACAC,EAJEC,GACFvR,KAAMyC,EAAS8C,sBAIfiB,aAAkBgL,QAClBF,EAAe9K,EAAOiL,KAAK,KAC3BJ,EAAO,GAAIK,OAAMJ,GAAeC,KAEhCD,EAAevL,KAAK8K,UAAUrK,GAC9B6K,EAAO,GAAIK,OAAMJ,GAAeC,IAGpCtT,KACI0T,UAAUC,WAAWZ,EAAKK,IAC1BpT,EAAOA,OAASoG,iBAAiB+B,WACjCnI,EAAOoI,UAAY,EACnB4K,EAAKnJ,iBAAiB,mBAEtB7J,EAAOA,OAASoG,iBAAiBiC,YACjCrI,EAAOoI,UAAY,IACnB4K,EAAKnJ,iBAAiB,gBAG1BmJ,EAAKlJ,OAAL,GAAAyB,OACOtC,EADP,eAEIoK,EACA,WAAarT,EAAOA,OACpBoG,iBAAiB2D,gBAEvB,MAAOQ,GAGL,MAFAI,SAAQC,MAAML,GACdyI,EAAKnJ,iBAAiB,eACfsJ,MAjHX,KACI,GAAMS,GAAU,GAAIC,eACpBD,GAAQE,KAAK,OAAQf,EAAKvO,EAAS0C,YACnC,IAAImM,EAWJ,IAVI9K,YAAkBgL,QAClBF,EAAe9K,EAAOiL,KAAK,KAC3BI,EAAQG,iBAAiB,eAAgB,qCACzCH,EAAQI,KAAKX,KAEbA,EAAevL,KAAK8K,UAAUrK,GAC9BqL,EAAQG,iBAAiB,eAAgBvP,EAAS8C,uBAClDsM,EAAQI,KAAKX,IAGZ7O,EAAS0C,YAyBV0M,EAAQK,OAAS,SAAC1J,GAEVvK,EADoC,kBAA7BwE,GAASoD,gBACPpD,EAASoD,gBAAgBgM,GAEzB9L,KAAKC,MAAM6L,EAAQ5L,cAGX,GAAjBhI,EAAOA,QACPgT,EAAKpK,UAAYxC,iBAAiByC,SAClCmK,EAAKnJ,iBAAiB,mBAEtBmJ,EAAKpK,WACDR,UAAWpI,EAAOoI,UAClBqC,aAAc,0BAElBuI,EAAKnJ,iBAAiB,gBAE1BmJ,EAAKlJ,OAAL,GAAAyB,OACOtC,EADP,sBAEIoK,EACA,WAAarT,EAAOA,OACpBoG,iBAAiB2D,iBAGzB6J,EAAQM,QAAU,SAAC3J,GACfyI,EAAKnJ,iBAAiB,eACtBmJ,EAAKlJ,OAAL,GAAAyB,OACOtC,EADP,sBAEIoK,EACA,WAAajN,iBAAiBiC,YAC9BjC,iBAAiB2D,qBAvDF,CAAA,GAAAoK,GAAAC,CAEnBpU,GADoC,kBAA7BwE,GAASoD,gBACPpD,EAASoD,gBAAgBgM,GAEzB9L,KAAKC,MAAM6L,EAAQ5L,cAGhC,QAAAmM,EAAInU,QAAJ,KAAAmU,GAAIA,EAAQnU,QACRgT,EAAKpK,UAAYxC,iBAAiByC,SAClCmK,EAAKnJ,iBAAiB,mBAEtBmJ,EAAKpK,WACDR,UAAWpI,EAAOoI,UAClBqC,aAAc,0BAElBuI,EAAKnJ,iBAAiB,gBAG1BmJ,EAAKlJ,OAAL,GAAAyB,OACOtC,EADP,qBAEIoK,EACA,YAAA,QAAAe,EAAapU,QAAb,KAAAoU,MAAA,GAAaA,EAAQpU,SAAUoG,iBAAiBiC,YAChDjC,iBAAiB2D,iBAqC3B,MAAOQ,GAGL,MAFAI,SAAQC,MAAML,GACdyI,EAAKnJ,iBAAiB,eACfsJ,EAyCf,MAAOnT,GAGX,QAAwB,KAAbZ,QAAAA,QAA0B,CACjC,GAAMiC,IAAY,EAAA8E,QAAA,SAAS+M,EAAS,IAQpC,OAPA7R,GAAU0R,EAAKxK,EAAQ/G,KAAKgD,SAAUhD,KAAKkF,aAGvCuM,GACA5R,EAAUD,SAIVpB,OAAQoG,iBAAiB+B,WACzBC,UAAW,GAGf,MAAO8K,GAAQH,EAAKxK,EAAQ/G,KAAKgD,SAAUhD,KAAKkF,2CAUxD,SAAe2N,EAAc3E,GACzB3G,sBAAAvH,KAAAmF,SAAgB,GAAI2N,iBAAgB9S,KAAM6S,EAAM3E,IAChDlO,KAAKsI,OAAO,iBAAkB,GAAI,YAAa1D,iBAAiBmG,qDAMpE,WACIhD,sBAAI/H,KAAJmF,YACI4C,sBAAA/H,KAAAmF,UAAczF,SACd6H,sBAAAvH,KAAAmF,SAAgB,MAChBnF,KAAKsI,OAAO,uBAAwB,GAAI,UAAW1D,iBAAiBmG,2IAQ1E+H,2BAYF,QAAAA,GAAYC,EAAUF,EAAc3E,GAAkBhL,gBAAAlD,KAAA8S,GAAAE,KAAA5N,IAAApF,MAAAqF,UAAA,EAAA/E,UAAA,KAAA2S,WAAA7N,IAAApF,MAAAqF,UAAA,EAAA/E,OAVzC,IAUyC4S,UAAA9N,IAAApF,MAAAqF,UAAA,EAAA/E,UAAA,KAAA6S,UAAA/N,IAAApF,MAAAqF,UAAA,EAAA/E,UAAA,KAClDiH,sBAAAvH,KAAAgT,KAAYD,GACZxL,sBAAAvH,KAAAkT,UAAgBtU,WAAWoB,KAAKoT,QAAQC,KAAKrT,MAAO6S,IACpDtL,sBAAAvH,KAAAmT,UAAiBjF,8CAMrB,WACI3G,sBAAAvH,KAAAiT,YAAkB,GAClBlL,sBAAI/H,KAAJkT,YACIvT,aAAYoI,sBAAC/H,KAADkT,mCAOpB,WACQnL,sBAAC/H,KAADiT,aACAlL,sBAAA/H,KAAAgT,MAAUM,OAAVvL,sBAAiB/H,KAAjBmT;;+7GC9wCZ,IAAAI,WAAA5Q,uBAAAC,QAAA,cACAE,aAAAF,QAAA,qBAOA4Q,UAAAC,wBAAA7Q,QAAA,gBACA6B,eAAA9B,uBAAAC,QAAA,8BACA0C,aAAA3C,uBAAAC,QAAA,4BAEM8Q,kBAAoB7O,eAAAA,QAAaG,QACjCJ,iBAAmBC,eAAAA,QAAalD,OAChCmD,oBAAsBC,aAAAA,QAAWC,QAKlBX,uBAKnB,QAAAA,GAAYrB,GAAc,GAAAC,EAAAC,iBAAAlD,KAAAqE,EACxB,IAAMlB,GAAaC,cAAAA,kBAEfC,kBAAkB,IACdL,EAJgB,OAOxBC,GAAAK,EAAA3C,KAAAX,KAAM8E,oBAAqB3B,GAE3BF,EAAKM,IAAM,GAAIC,cAAAA,IACfP,EAAKQ,IAAM,GAAIC,cAAAA,IAGfT,EAAK0Q,cAAgB1Q,EAAK2Q,cAC1B3Q,EAAK4Q,UAAY5Q,EAAK6Q,UACtB7Q,EAAK8Q,YAAc9Q,EAAK+Q,YACxB/Q,EAAKgR,YAAchR,EAAKiR,YACxBjR,EAAKkR,UAAYlR,EAAKmR,UACtBnR,EAAKoR,gBAAkBpR,EAAKqR,gBAC5BrR,EAAKsR,kBAAoBtR,EAAKuR,kBAC9BvR,EAAKwR,iBAAmBxR,EAAKyR,iBApBLzR,yFA4B1B,WAEE,MADAjD,MAAKuD,IAAIkK,aACFzN,KAAKyN,WAAW,gBAAiB,+BACpC,qDAQN,WACE,GAAMjP,GAASwB,KAAK2U,UAAU,aAAa,EAc3C,OAZInW,KAAWoG,iBAAiB+B,aACP,KAAnB3G,KAAKyD,IAAImR,MACY,aAAnB5U,KAAKyD,IAAImR,MACX5U,KAAKqI,iBAAiB,gBAEtBrI,KAAKqI,iBAAiB,oBAEfrI,KAAKgD,SAAS+C,cACvB/F,KAAKqI,iBAAiB,iBAInB7J,6BAST,SAAYmF,GACV,MAAO3D,MAAK6U,SAAS,eAAe,EAAOlR,8BAU7C,SAAYA,EAAYrD,GACtB,MAAON,MAAK8U,SAAS,cAAe,aAAa,EAAOnR,EAAYrD,4BAQtE,WACE,MAAON,MAAKsT,OAAO,aAAa,kCAQlC,WACE,MAAOtT,MAAK+U,aAAa,oDAS3B,SAAkB5K,GAChB,MAAOnK,MAAKgV,eAAe,oBAAqB7K,mCASlD,SAAiBA,GACf,MAAOnK,MAAKiV,cAAc,mBAAoB9K,8BAUhD,SAAYxG,EAAYrD,GACtB,MAAON,MAAKkV,mBAAmB,eAAe,EAAOvR,EAAYrD,8BASnE,SAAYqD,GACV,MAAO3D,MAAKmV,mBAAmB,eAAe,EAAOxR,kCAWvD,SAAgBA,EAAYrD,EAAOsD,GACjC,GAAIC,EAeJ,OAbI7D,MAAKgE,cAAcL,EAAY,2BACjCE,EAAW,GAAIuR,cAAAA,oBACNxR,GAAmB5D,KAAKgE,cAAcL,EAC7C,wDACFE,EAAW,GAAIwR,cAAAA,sCACNzR,GAAmB5D,KAAKgE,cAAcL,EAC7C,iDACFE,EAAW,GAAIyR,cAAAA,iCACL1R,GACR5D,KAAKgE,cAAcL,EAAY,+BACjCE,EAAW,GAAI0R,cAAAA,uBAGV1R,yCAUT,SAAwBF,EAAYrD,GAClC,OAAO,2CAUT,SAA0B+O,EAAamG,GACrC,GAAIC,GAAe,WACfC,EAAgB,UASpB,OANArG,GAAc3F,OAAO2F,GACjBqE,kBAAkBiC,mBAAmBtG,KACvCoG,EAAe/B,kBAAkBiC,mBAAmBtG,GAAaoG,aACjEC,EAAgBhC,kBAAkBiC,mBAAmBtG,GAAaqG,eAG7DF,EAASE,EAAgBD,4CAQlC,SAA2BrR,GAEzBpE,KAAKuD,IAAMa,EAAOb,mCASpB,SAAgBqS,GACd,GAAMC,GAAY7V,KAAK8V,uBAEnBF,KACFC,EAAUtS,IAAIwS,KAAKC,WAAahW,KAAKuD,IAAI0S,sBACzCJ,EAAUtS,IAAIwS,KAAKG,aAAelW,KAAKuD,IAAI4S,wBAG7C,IAAM3X,MACA4X,EAAY5C,UAAU6C,QAAQR,EACpC,QAAQ7V,KAAKgD,SAAS6C,kBACpB,IAAK,YACH,MAAO2N,WAAU6C,QAAQR,EAC3B,KAAK,SACH,IAAK,GAAMxI,KAAQ+I,QACV3P,eAAe9F,KAAKyV,EAAW/I,IACpC7O,EAAOkP,KAAP,GAAA3D,OAAesD,EAAf,KAAAtD,OAAuBqM,EAAU/I,IAGrC,OAAO7O,EACT,KAAK,OACL,QACE,MAAOqX,6BAUb,SAAUpO,EAAsBmO,GAC9B,GAAIA,EAAiB,CACnB,GAAMU,GAAiBtW,KAAKuD,IAAIwS,KAAKQ,aAKrC,IAJuB,kBAAnBD,IACFtW,KAAKuD,IAAIwS,KAAKQ,cAAgB,aAGE,WAA9BvW,KAAKuD,IAAIwS,KAAKS,YACa,WAAzBxW,KAAKuD,IAAIwS,KAAKU,QACZzW,KAAKgD,SAASK,kBAC0B,KAAxCrD,KAAKuD,IAAImT,aAAaC,eACM,KAA5B3W,KAAKuD,IAAIwS,KAAKa,MAAMC,MAClBC,WAAW9W,KAAKuD,IAAIwS,KAAKa,MAAMC,MAC/BC,WAAW9W,KAAKuD,IAAImT,aAAaC,eACnC3W,KAAKuD,IAAIwS,KAAKQ,cAAgB,SAE9BvW,KAAKuD,IAAIwS,KAAKQ,cAAgB,cAI/B,IAAkC,WAA9BvW,KAAKuD,IAAIwS,KAAKS,YAA0B,CAAA,GAAAO,GAAAC,EAAAC,CACW,QAAvD,QAAAF,EAAA/W,KAAKkR,mBAAL,KAAA6F,MAAA,GAAA,QAAAC,EAAAD,EAAmBxT,UAAnB,KAAAyT,MAAA,GAAA,QAAAC,EAAAD,EAAwBjB,WAAxB,KAAAkB,MAAA,GAAAA,EAA8BV,gBAAiB,KAC7B,kBAAnBD,IACFtW,KAAKuD,IAAIwS,KAAKQ,cAAgB,YAKpC,GAAMW,GAAelX,KAAKmX,gBAAgBvB,GACtC5V,KAAKgD,SAASmD,oBAElB,IAAInG,KAAKgD,SAAS4C,aAAc,CAG9B,MAFiB5F,MAAKoX,mBAAmB3P,EAAczH,KAAKgD,SAAS4C,aAAcsR,EAC/EtB,GAIJ,MADAzM,SAAQ8B,IAAIxD,EAAcmO,EAAkB,UAAY,GAAIsB,GACrDtS,iBAAiB+B,kBA9RU1B,UAAAA;;0wHCnBxC,IAAAsO,WAAA5Q,uBAAAC,QAAA,cACAyU,eAAAzU,QAAA,uBASA4Q,UAAAC,wBAAA7Q,QAAA,gBACA6B,eAAA9B,uBAAAC,QAAA,8BACA0C,aAAA3C,uBAAAC,QAAA,4BACA0U,oBAAA3U,uBAAAC,QAAA,mCACA2U,oBAAA5U,uBAAAC,QAAA,mCACA4U,OAAA7U,uBAAAC,QAAA,sBAEM6U,oBAAsB5S,eAAAA,QAAayH,UACnC1H,iBAAmBC,eAAAA,QAAalD,OAChC+V,sBAAwB3S,aAAAA,QAAWuH,UACnCqL,kBAAoBC,oBAAAA,QAAUC,QAC9BC,gBAAkBC,OAAAA,QAAMzL,+BAKT0L,yBAOnB,QAAAA,GAAYhV,GAAc,GAAAC,EAAAC,iBAAAlD,KAAAgY,EACxB,IAAM7U,GAAaC,cAAAA,kBAEfC,kBAAkB,IACdL,EAJgB,OAOxBC,GAAAK,EAAA3C,KAAAX,KAAM0X,sBAAuBvU,GAPL8U,SAAA7S,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAAA0G,gBAAAkR,uBAAAjV,GAAA,yBAyTD,SAACkV,EAAkBC,EAAe9X,GAGzD,IAAK,GAFD+X,IAAQ,EACNC,EAAQH,EAAiBI,OACtB3L,EAAI,EAAGA,EAAI0L,IAAUD,EAAOzL,IAC/BA,IAAMwL,GAAiBD,EAAiB7K,WAAWV,KAAOtM,IAC5D+X,GAAQ,EAGZ,OAAOA,KAxTPpV,EAAKM,IAAM,GAAIC,gBAAAA,IACfP,EAAKuV,IAAM,GAAIC,gBAAAA,IAGfxV,EAAKyV,WAAazV,EAAK2Q,cACvB3Q,EAAK0V,UAAY1V,EAAK2V,aACtB3V,EAAK4V,SAAW5V,EAAK+Q,YACrB/Q,EAAK6V,SAAW7V,EAAKiR,YACrBjR,EAAK8V,OAAS9V,EAAKmR,UACnBnR,EAAK+V,aAAe/V,EAAKqR,gBACzBrR,EAAKgW,eAAiBhW,EAAKuR,kBAC3BvR,EAAKiW,cAAgBjW,EAAKyR,iBApBFzR,iFA2B1B,WACE,MAAA8E,uBAAO/H,KAAPiY,uCAMF,WAEE,MADAjY,MAAKuD,IAAIkK,aACFzN,KAAKyN,WAAW,0CAMzB,WACE,GAAMjP,GAASwB,KAAK2U,UAAU,aAAa,EAE3C,IAAInW,IAAWoG,iBAAiB+B,WAC9B,GAA6B,WAAzB3G,KAAKwY,IAAI/U,IAAI0V,QACf,OAAQnZ,KAAKwY,IAAI/U,IAAI0V,SACnB,IAAK,WACHnZ,KAAKqI,iBAAiB,eACtB,MACF,KAAK,WACHrI,KAAKqI,iBAAiB,mBACtB,MACF,KAAK,SACHrI,KAAKqI,iBAAiB,iBACtB,MACF,KAAK,OACHrI,KAAKqI,iBAAiB,eACtB,MACF,KAAK,UACHrI,KAAKqI,iBAAiB,kBACtB,MACF,KAAK,UACHrI,KAAKqI,iBAAiB,kBACtB,MACF,KAAK,aACHrI,KAAKqI,iBAAiB,0BAGjBrI,MAAKgD,SAAS+C,cACvB/F,KAAKqI,iBAAiB,eAI1B,OAAO7J,8BAOT,SAAYmF,GACV,MAAO3D,MAAK6U,SAAS,YAAY,EAAMlR,8BAQzC,SAAYA,EAAYrD,GACtB,MAAON,MAAK8U,SAAS,WAAY,UAAU,EAAMnR,EAAYrD,4BAQ/D,WACE,MAAON,MAAKsT,OAAO,yCAQrB,WACE,MAAOtT,MAAK+U,aAAa,iDAS3B,SAAkB5K,GAChB,MAAOnK,MAAKgV,eAAe,iBAAkB7K,mCAS/C,SAAiBA,GACf,MAAOnK,MAAKiV,cAAc,gBAAiB9K,8BAU7C,SAAYxG,EAAYrD,GACtB,MAAON,MAAKkV,mBAAmB,YAAY,EAAMvR,EAAYrD,kCAW/D,SAAgBqD,EAAYrD,EAAOsD,GACjC,GAAIC,EAEJ,IAAI7D,KAAKgE,cAAcL,EAAY,2BACjCE,EAAW,GAAIuR,gBAAAA,wBACV,IAAIxR,GAAmB5D,KAAKgE,cAAcL,EAC7C,wDAAyD,CAC3D,GAAMyV,GAAQzV,EAAW6I,MAAM,KACzBW,EAAQ6C,OAAOoJ,EAAM,IACrBC,EAAcrZ,KAAKuD,IAAI+V,aAAahM,WAAWH,EACrD,IAAInN,KAAK6H,gBACP,GAAKwR,EAAY9Y,KAGV,CACLP,KAAKuZ,6BAA6BF,EAAa/Y,EAE/C,IAAMkZ,GAAgB7B,kBAAkB0B,EAAY9Y,KAChDiZ,GACFxZ,KAAKyZ,uBAAuBD,EAAelZ,EAAO+Y,EAAY9Y,MAE9DP,KAAK8H,gBAAgB4P,sBAAsBgC,oBACvC,4BAA8BL,EAAY9Y,UAVhDP,MAAK8H,gBACD4P,sBAAsBiC,2BAaG,KAA7B3Z,KAAKoH,UAAUR,YACjB/C,EAAW,GAAIwR,gBAAAA,2CAERzR,IAAmB5D,KAAKgE,cAAcL,EAC7C,iDACFE,EAAW,GAAIyR,gBAAAA,iCACL1R,GACR5D,KAAKgE,cAAcL,EAAY,6BACjCE,EAAW,GAAI0R,gBAAAA,sBACNvV,KAAKgE,cAAcL,EAC1B,sCACFE,EAAW,GAAI+V,gBAAAA,kBACN5Z,KAAKgE,cAAcL,EAC1B,oCACFE,EAAW,GAAI+V,gBAAAA,mBAAkB,GAGnC,OAAO/V,yCAST,SAAuB2V,EAAelZ,EAAOuZ,GAC3C,GAAIC,KACJ,QAAIN,OAAJ,KAAIA,GAAAA,EAAeO,UACjBD,EAAQpQ,OAAOpJ,GAAOkM,MAAMgN,EAAcO,WAE1CD,EAAM,GAAKxZ,EAGTwZ,EAAMvO,OAAS,GAAKuO,EAAMvO,QAAUiO,EAAcnX,IACpDrC,KAAKga,0BAA0BH,EAAkBC,EAAOxZ,GAC/CwZ,EAAMvO,OAASiO,EAAcnX,KACtCrC,KAAK8H,gBAAgB4P,sBAAsBgC,oBACvC,mFASR,SAA6BL,EAAa/Y,GACxC,GAAM2Z,GAAoBZ,EAAY1B,kBAAkBY,MACxD,IAAyB,WAArBc,EAAY9Y,KACd,IAAK,GAAIqM,GAAI,EAAGA,EAAIqN,GACpB,IADyCja,KAAKoH,UAAUR,UACrDgG,IAAK,CACN,GAAMsN,GAAWb,EAAY1B,kBAAkBrK,WAAWV,EACtDsN,GAASC,UAAY7Z,GACvBN,KAAK8H,gBAAgB4P,sBAAsBgC,6DAWnD,SAAwB/V,EAAYrD,GAClC,GAAM8Y,GAAQzV,EAAW6I,MAAM,KACzBW,EAAQ6C,OAAOoJ,EAAM,IACrBgB,EAAgBpK,OAAOoJ,EAAM,IAC7BC,EAAcrZ,KAAKuD,IAAI+V,aAAahM,WAAWH,GAE/C8M,EAAoBZ,EAAY1B,kBAAkBY,MACxDvY,MAAKuZ,6BAA6BF,EAAa/Y,EAE/C,IAAMkZ,GAAgB7B,kBAAkB0B,EAAY9Y,UACjB,KAAxBiZ,EAAca,OAAyBJ,GAC9CT,EAAca,OAChBra,KAAKyZ,uBAAuBD,EAAelZ,EAAO+Y,EAAY9Y,MAE7B,IAA7BP,KAAKoH,UAAUR,aACb4S,EAAcc,YACXta,KAAKua,uBAAuBlB,EAAY1B,kBACrCyC,EAAe9Z,KACO,IAA7BN,KAAKoH,UAAUR,WAA6B,KAAVtG,GAGJ,IAA7BN,KAAKoH,UAAUR,WACjB5G,KAAK8H,gBAAgB4P,sBAAsBgC,oBACvC,8CAIR1Z,KAAK8H,gBAAgB4P,sBAAsBgC,oBACvC,0EAUR,SAAY/V,GACV,MAAO3D,MAAKmV,mBAAmB,YAAY,EAAMxR,4CAUnD,SAA0B0L,EAAamG,GACrC,GAAIC,GAAe,GACfC,EAAgB,EASpB,OANArG,GAAc3F,OAAO2F,GACjBoI,oBAAoB9B,mBAAmBtG,KACzCoG,EAAegC,oBAAoB9B,mBAAmBtG,GAAaoG,aACnEC,EAAgB+B,oBAAoB9B,mBAAmBtG,GAAaqG,eAG/DF,EAASE,EAAgBD,2CA2BlC,SAA0BoE,EAAkBC,EAAOxZ,GAGjD,IAAK,GAFC4Z,GAAWvC,kBAAkBkC,GAC7BW,EAAc,GAAIC,QAAOP,EAASQ,QAC/B9N,EAAI,EAAGA,EAAIkN,EAAMvO,QAAuC,IAA7BvL,KAAKoH,UAAUR,UAAiBgG,IAMlE,GALIiN,EAAiBlO,MACjB,8DACFmO,EAAMlN,GAAK5M,KAAK2a,8BAA8Bb,EAAMlN,KAGtD,OAAIsN,OAAJ,KAAIA,GAAAA,EAAUU,WAAY,CACxB,GAAMC,GAASf,EAAMlN,GAAGJ,MAAM0N,EAASU,WACvC,IAAsB,IAAlBC,EAAOtP,OAAc,CACvB,GAAMuP,GAAUD,EAAO,GAAGlP,MAAM6O,EAC3BM,GAGED,EAAO,GAAGlP,MAAM,GAAI8O,QAAOP,EAASa,WACvC/a,KAAK8H,gBAAgB4P,sBAAsBsD,eAH7Chb,KAAK8H,gBAAgB4P,sBAAsBsD,mBAO7Chb,MAAK8H,gBAAgB4P,sBAAsBsD,mBAExC,CACL,GAAMF,GAAUhB,EAAMlN,GAAGjB,MAAM6O,EAC/B,KAAMM,GAAqB,KAAVxa,IACXwa,GAAgC,eAArBjB,EACf7Z,KAAK8H,gBAAgB4P,sBAAsBsD,mBAE3C,IAAyB,YAArBnB,GAAkCC,EAAMvO,OAAS,EAC/CyE,OAAO8J,EAAM,IAAM9J,OAAO8J,EAAM,KAClC9Z,KAAK8H,gBAAgB4P,sBAAsBsD,mBAG7C,IAAiB,KAAblB,EAAMlN,IAAasN,EAASe,OAC9B,IAAK,GAAIzP,GAAI,EAAGA,EAAIoB,GAAkC,IAA7B5M,KAAKoH,UAAUR,UAAiB4E,IACnDsO,EAAMlN,KAAOkN,EAAMtO,IACrBxL,KAAK8H,gBAAgB4P,sBAAsBsD,6DAe3D,SAA8BE,GAS5B,IARA,GAAIC,IAAY,EACZC,GAAW,EACXC,GAAW,EAETC,EAAc,GAAIb,QACpB,kDACAK,EAAUI,EAAKvP,MAAM2P,GACrBC,EAAc,KACXT,GAAS,CACd,OAAQA,EAAQ,IACd,IAAK,OAEH,GADAS,EAAcL,EAAKvP,MAAMmM,gBAAgB0D,WACxB,CACf,GAAMC,GAAOF,EAAY,OACZjd,KAATmd,GAAsBA,EAAKlQ,OAAS,OACKjN,KAAvCod,oBAAAA,QAAeD,EAAKE,gBACtB3b,KAAK8H,gBAAgB4P,sBAAsBsD,eAIjDK,GAAW,CACX,MACF,KAAK,eACEA,GAAaF,GAAcC,GACX,SAAfN,EAAQ,IAAgC,UAAfA,EAAQ,IACnC9a,KAAK8H,gBAAgB4P,sBAAsBsD,eAI/CI,GAAW,CACX,MACF,KAAK,gBACEA,GAAaC,GAAaF,GACV,SAAfL,EAAQ,IAAgC,UAAfA,EAAQ,IACnC9a,KAAK8H,gBAAgB4P,sBAAsBsD,eAI/CG,GAAY,EAKhBD,EAAOA,EAAKrO,OAAOiO,EAAQ,GAAGvP,QAC9BuP,EAAUI,EAAKvP,MAAM2P,GAGvB,MAAOJ,6CAOT,SAA2B9W,GAEzBpE,KAAKuD,IAAMa,EAAOb,IAClBvD,KAAKwY,IAAMpU,EAAOoU,mCASpB,SAAgB5C,GACd,GAAMC,GAAY7V,KAAK8V,uBAEnBF,KACFC,EAAUtS,IAAIyS,WAAahW,KAAKuD,IAAI0S,sBACpCJ,EAAUtS,IAAI2S,aAAelW,KAAKuD,IAAI4S,wBAGxC,IAAM3X,MACA4X,EAAY5C,UAAU6C,QAAQR,EACpC,QAAQ7V,KAAKgD,SAAS6C,kBACpB,IAAK,YACH,MAAO2N,WAAU6C,QAAQR,EAC3B,KAAK,SACH,IAAK,GAAMxI,KAAQ+I,QACV3P,eAAe9F,KAAKyV,EAAW/I,IACpC7O,EAAOkP,KAAP,GAAA3D,OAAesD,EAAf,KAAAtD,OAAuBqM,EAAU/I,IAGrC,OAAO7O,EACT,KAAK,OACL,QACE,MAAOqX,6BAUb,SAAUpO,EAAsBmO,GAA0B,GAAAmB,GAAA6E,EAAAC,CACpDjG,IACoB,WAAlB5V,KAAKuD,IAAIuY,MACa,WAApB9b,KAAKuD,IAAIkT,SACPzW,KAAKuD,IAAIwY,sBAAwB/b,KAAKuD,IAAIyY,mBACxChc,KAAKuD,IAAIyY,kBAAoBhc,KAAKuD,IAAIwY,sBACxC5S,QAAQ6B,MAAM,wCACdhL,KAAKuD,IAAI0Y,kBAAoB,cAE7B9S,QAAQ6B,MAAM,yCACdhL,KAAKuD,IAAI0Y,kBAAoB,eAG7Bjc,KAAKuD,IAAI2Y,sBAAwBlc,KAAKuD,IAAIqT,MAAMuF,SAC9Cnc,KAAKuD,IAAIqT,MAAMuF,QAAUnc,KAAKuD,IAAI2Y,sBACpC/S,QAAQ6B,MAAM,kCACdhL,KAAKuD,IAAI6Y,eAAiB,WAE1BjT,QAAQ6B,MAAM,kCACdhL,KAAKuD,IAAI6Y,eAAiB,WAOpC,IAAIC,IAAa,CACbrc,MAAKwY,IAAI/U,IAAI0V,WAAb,QAAApC,EAA0B/W,KAAKkR,mBAA/B,KAAA6F,MAAA,GAAA,QAAA6E,EAA0B7E,EAAmByB,UAA7C,KAAAoD,MAAA,GAAA,QAAAC,EAA0BD,EAAwBnY,UAAlD,KAAAoY,MAAA,GAA0BA,EAA6B1C,UAC9B,WAAzBnZ,KAAKwY,IAAI/U,IAAI0V,UACfnZ,KAAKwY,IAAI/U,IAAI0V,QAAUmD,mBAAmBtc,KAAKwY,IAAI/U,IAAI0V,SACvDkD,GAAa,EAGf,IAAMnF,GAAelX,KAAKmX,gBAAgBvB,GACtC5V,KAAKgD,SAASmD,oBAElB,IAAInG,KAAKgD,SAAS4C,aAAc,CAC1B5F,KAAKwH,cAAgB5C,iBAAiBmG,iBACxC5B,QAAQ6B,MAAMvD,EAAcmO,EAAkB,UAAY,GAAIsB,EAEhE,IAAM1Y,GAASwB,KAAKoX,mBAAmB3P,EAAczH,KAAKgD,SAAS4C,aAC/DsR,EAActB,EASlB,OALMyG,QAAoC/d,KAAtBE,EAAO6d,YACC,KAAtB7d,EAAO6d,YACTra,SAAQ,yBAAA+H,OAA0BvL,EAAO6d,WAAjC,YAGL7d,EAGP,MADA2K,SAAQ8B,IAAIxD,EAAcmO,EAAkB,UAAY,GAAIsB,GACrDtS,iBAAiB+B,kBA7hBY1B,UAAAA;;s1HC3B1C,IAAAsX,YAAA9I,wBAAA7Q,QAAA,kBACA0B,QAAA1B,QAAA,YACA6B,eAAA9B,uBAAAC,QAAA,+BACA4U,OAAA7U,uBAAAC,QAAA,uBACA0C,aAAA3C,uBAAAC,QAAA,6BAMM4Z,eAAiB3X,eAAAA,QAAa4X,KAC9B/I,kBAAoB7O,eAAAA,QAAaG,QACjC0X,WAAa3E,OAAAA,QAAM0E,KACnB3X,oBAAsBC,aAAAA,QAAWC,QAK1BxB,gBAKX,QAAAA,GAAYgK,GAAsB,GAAAvK,EAAA,OAAAC,iBAAAlD,KAAAwD,GAChCP,EAAAK,EAAA3C,KAAAX,KAAMwc,eAAeG,cAEjBnP,GAAavK,EAAKwK,aAEtBxK,EAAK2Z,mBAAqB,GAAIC,wBAC9B5Z,EAAKyT,aAAe,GAAIoG,oBACxB7Z,EAAK8Z,qBAAuB,GAAIC,wBAChC/Z,EAAKga,WAAa,GAAIC,eACtBja,EAAKka,MAAQ,GAAIC,UATena,sFAelC,WAAa,GAAAoa,GAAAC,EAAAC,EAAAC,EAAAC,CACX3Z,MAAAC,gBAAAP,EAAAtB,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAAqd,EAAArd,KAAK4c,yBAAL,KAAAS,GAAAA,EAAyB5P,aACzB,QAAA6P,EAAAtd,KAAK0W,mBAAL,KAAA4G,GAAAA,EAAmB7P,aACnB,QAAA8P,EAAAvd,KAAK+c,2BAAL,KAAAQ,GAAAA,EAA2B9P,aAC3B,QAAA+P,EAAAxd,KAAKid,iBAAL,KAAAO,GAAAA,EAAiB/P,aACjB,QAAAgQ,EAAAzd,KAAKmd,YAAL,KAAAM,GAAAA,EAAYhQ,mCAqBd,WACEzN,KAAK0d,YAAa,CAClB,IAAMlf,IACJmf,aAAgB3d,KAAK2d,aACrBC,YAAe5d,KAAK4d,YACpBC,SAAY7d,KAAK6d,SACjBC,kBAAqB9d,KAAK8d,kBAC1B/H,KAAQ/V,KAAK+V,KACbgI,WAAc/d,KAAK+d,WACnBrH,aAAgB1W,KAAK0W,aACrBkG,mBAAsB5c,KAAK4c,mBAC3BG,qBAAwB/c,KAAK+c,qBAC7BzD,aAAgBtZ,KAAKsZ,aACrB2D,WAAcjd,KAAKid,WACnBE,MAASnd,KAAKmd,MAGhB,cADOnd,MAAK0d,WACLlf,SAhEc+d,WAAW/Y,wBAuE9B0Z,2BAIJ,QAAAA,KAAc,GAAAtO,EAAA,OAAA1L,iBAAAlD,KAAAkd,GACZtO,EAAAoP,EAAArd,KAAAX,MAEA4O,EAAKiP,SAAW,GAAII,uBAHRrP,sFASd,WAAa,GAAAsP,EACXpa,MAAAC,gBAAAmZ,EAAAhb,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAAke,EAAAle,KAAK6d,eAAL,KAAAK,GAAAA,EAAezQ,mCAOjB,WACEzN,KAAK0d,YAAa,CAClB,IAAMlf,IACJqf,SAAY7d,KAAK6d,SAGnB,cADO7d,MAAK0d,WACLlf,SA5BiB2f,QAAAA,SAmCtBF,kCAIJ,QAAAA,KAAc,MAAA/a,iBAAAlD,KAAAie,GAAAG,EAAAzd,KAAAX,MAEVqe,SAAU7B,eAAe8B,kBACzB1X,UAAW9B,oBAAoByZ,kBAC/BtV,aAAcyK,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,+DAR5DxI,QAAAA,gIAgB9B2P,mCAIJ,QAAAA,KAAc,GAAA3M,EAAA,OAAAhN,iBAAAlD,KAAA6c,GACZ3M,EAAAsO,EAAA7d,KAAAX,KAAMwc,eAAeiC,6BADTC,aAAAtZ,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MAkBC,KAlBDqe,YAAAvZ,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MAmBA,KAnBAse,eAAAxZ,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MAoBG,KApBHue,WAAAzZ,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MAqBD,KArBCwe,OAAA1Z,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MAsBL,KAnBP4P,EAAK6O,QAAU,GAAI7R,SAAAA,UACjBtG,UAAW9B,oBAAoByZ,kBAC/BtV,aAAcyK,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,cAC1F2I,SAAU,KANAnO,sFAad,WAAa,GAAA8O,EACXlb,MAAAC,gBAAA8Y,EAAA3a,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAAgf,EAAAhf,KAAK+e,cAAL,KAAAC,GAAAA,EAAcvR,sCAahB,WACE,MAAA1F,uBAAO/H,KAAP0e,mBAOF,SAAgBO,IACV,EAAA1C,WAAA2C,oBAAmBD,EAAavC,WAAWyC,eAC7C5X,sBAAAvH,KAAA0e,aAAoBO,2BAQxB,WACE,MAAAlX,uBAAO/H,KAAP2e,kBAOF,SAAeS,IACT,EAAA7C,WAAA2C,oBAAmBE,EAAY1C,WAAWyC,eAC5C5X,sBAAAvH,KAAA2e,YAAmBS,8BAQvB,WACE,MAAArX,uBAAO/H,KAAP4e,qBAOF,SAAkBS,IACZ,EAAA9C,WAAA2C,oBAAmBG,EAAe3C,WAAWyC,eAC/C5X,sBAAAvH,KAAA4e,eAAsBS,0BAQ1B,WACE,MAAAtX,uBAAO/H,KAAP6e,iBAOF,SAAcS,IACR,EAAA/C,WAAA2C,oBAAmBI,EAAW5C,WAAWyC,eAC3C5X,sBAAAvH,KAAA6e,WAAkBS,sBAQtB,WACE,MAAAvX,uBAAO/H,KAAP8e,aAOF,SAAUS,IACJ,EAAAhD,WAAA2C,oBAAmBK,EAAO7C,WAAWyC,eACvC5X,sBAAAvH,KAAA8e,OAAcS,yBAgBlB,WACEvf,KAAK0d,YAAa,CAClB,IAAMlf,IACJghB,MAASxf,KAAKwf,MACdC,SAAYzf,KAAKyf,SACjBR,YAAejf,KAAKif,YACpBS,MAAS1f,KAAK0f,MACdC,KAAQ3f,KAAK2f,KACbP,WAAcpf,KAAKof,WACnBC,cAAiBrf,KAAKqf,cACtBC,UAAatf,KAAKsf,UAClBC,MAASvf,KAAKuf,MACdR,QAAW/e,KAAK+e,QAGlB,cADO/e,MAAK0d,WACLlf,SAjJ0B+d,WAAWqD,uDAwJ1C9C,+BAIJ,QAAAA,KAAc,GAAAtL,EAAA,OAAAtO,iBAAAlD,KAAA8c,GACZtL,EAAAqO,EAAAlf,KAAAX,KAAMwc,eAAesD,uBADTC,qBAAA3a,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,MAcS,KAXrBkR,EAAKwO,MAAQ,GAAIC,UAHLzO,sFASd,WAAa,GAAA0O,EACXpc,MAAAC,gBAAA+Y,EAAA5a,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAAkgB,EAAAlgB,KAAKggB,YAAL,KAAAE,GAAAA,EAAYzS,8CASd,WACE,MAAA1F,uBAAO/H,KAAP+f,2BAQF,SAAwBI,GACrBngB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJ+f,qBACgCI,yBAelC,WACEngB,KAAK0d,YAAa,CAClB,IAAMlf,IACJmY,cAAiB3W,KAAK2W,cACtB0J,iBAAoBrgB,KAAKqgB,iBACzBC,kBAAqBtgB,KAAKsgB,kBAC1BN,MAAShgB,KAAKggB,MAGhB,cADOhgB,MAAK0d,WACLlf,SA3DsB+d,WAAWgE,yVAkE/BvD,mCAIX,QAAAA,KAAc,GAAAwD,EAAA,OAAAtd,iBAAAlD,KAAAgd,GACZwD,EAAAC,EAAA9f,KAAAX,MADY0gB,UAAAtb,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAIDkc,eAAemE,gCAJdC,MAAAxb,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAKN,KALMugB,OAAAzb,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAML,KANKwgB,SAAA1b,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAOH,KAPGygB,SAAA3b,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAQH,KARG0gB,YAAA5b,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MASA,KATA2gB,eAAA7b,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAUG,KAVH4gB,iBAAA9b,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAWK,KAXL6gB,OAAA/b,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAYL,KAZK8gB,iBAAAhc,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAaK,KAbL+gB,OAAAjc,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAcL,KAdKghB,gBAAAlc,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAeI,KAfJihB,WAAAnc,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAgBD,KAhBCkhB,kBAAApc,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAiBM,KAjBNkgB,8EAuBd,WACE,MAAAzY,uBAAO/H,KAAP4gB,YAQF,SAASa,GACNzhB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJ4gB,MACiBa,sBAQnB,WACE,MAAA1Z,uBAAO/H,KAAP6gB,aAQF,SAAUa,GACP1hB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJ6gB,OACkBa,wBAQpB,WACE,MAAA3Z,uBAAO/H,KAAP8gB,eAQF,SAAYa,GACT3hB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJ8gB,SACoBa,wBAQtB,WACE,MAAA5Z,uBAAO/H,KAAP+gB,eAQF,SAAYa,GACT5hB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJ+gB,SACoBa,2BAQtB,WACE,MAAA7Z,uBAAO/H,KAAPghB,kBAQF,SAAea,GACZ7hB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJghB,YACuBa,8BAQzB,WACE,MAAA9Z,uBAAO/H,KAAPihB,qBAQF,SAAkBa,GACf9hB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJihB,eAC0Ba,gCAQ5B,WACE,MAAA/Z,uBAAO/H,KAAPkhB,uBAQF,SAAoBa,GACjB/hB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJkhB,iBAC4Ba,sBAQ9B,WACE,MAAAha,uBAAO/H,KAAPmhB,aAQF,SAAUa,GACPhiB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJmhB,OACkBa,gCAQpB,WACE,MAAAja,uBAAO/H,KAAPohB,uBAQF,SAAoBa,GACjBjiB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJohB,iBAC4Ba,sBAQ9B,WACE,MAAAla,uBAAO/H,KAAPqhB,aAQF,SAAUa,GACPliB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJqhB,OACkBa,+BAQpB,WACE,MAAAna,uBAAO/H,KAAPshB,sBAQF,SAAmBa,GAChBniB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJshB,gBAC2Ba,0BAQ7B,WACE,MAAApa,uBAAO/H,KAAPuhB,iBAQF,SAAca,GACXpiB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJuhB,WACsBa,iCAQxB,WACE,MAAAra,uBAAO/H,KAAPwhB,wBAQF,SAAqBa,GAClBriB,KAAKwN,aAEF,EAAA+O,WAAA6D,sBAFJ7Y,sBACIvH,KADJwhB,kBAC6Ba,yBAwB/B,WACEriB,KAAK0d,YAAa,CAClB,IAAMlf,IACJijB,KAAQzhB,KAAKyhB,KACba,MAAStiB,KAAA,MACT2hB,QAAW3hB,KAAK2hB,QAChBC,QAAW5hB,KAAK4hB,QAChBC,WAAc7hB,KAAK6hB,WACnBC,cAAiB9hB,KAAK8hB,cACtBC,gBAAmB/hB,KAAK+hB,gBACxBC,MAAShiB,KAAKgiB,MACdC,gBAAmBjiB,KAAKiiB,gBACxBC,MAASliB,KAAKkiB,MACdC,eAAkBniB,KAAKmiB,eACvBC,UAAapiB,KAAKoiB,UAClBC,iBAAoBriB,KAAKqiB,iBAG3B,cADOriB,MAAK0d,WACLlf,SApTiC2f,QAAAA,kEA2T/Bf,sBAIX,QAAAA,KAAc,MAAAla,iBAAAlD,KAAAod,GAAAmF,EAAA5hB,KAAAX,MACLqe,SAAU7B,eAAegG,gEALNtV,QAAAA,4KAYjBuV,2BAIX,QAAAA,KAAc,GAAAC,EAAA,OAAAxf,iBAAAlD,KAAAyiB,GACZC,EAAAC,EAAAhiB,KAAAX,MADY4iB,aAAAxd,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MAIC,KAJDuiB,MAAAzd,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MAKN,KALMwiB,MAAA1d,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MAMN,KANMyiB,QAAA3d,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MAOJ,KAPI0iB,UAAA5d,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MAQF,KARE2iB,iBAAA7d,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MASK,KATLoiB,qFAed,WACE,MAAA3a,uBAAO/H,KAAP4iB,mBAOF,SAAgBM,IACV,EAAA3G,WAAA2C,oBAAmBgE,EAAaxG,WAAWyC,eAC7C5X,sBAAAvH,KAAA4iB,aAAoBM,qBAQxB,WACE,MAAAnb,uBAAO/H,KAAP6iB,YAOF,SAAS1X,IACH,EAAAoR,WAAA2C,oBAAmB/T,EAAMuR,WAAWyC,eACtC5X,sBAAAvH,KAAA6iB,MAAa1X,qBAQjB,WACE,MAAApD,uBAAO/H,KAAP8iB,YAOF,SAAS7kB,IACH,EAAAse,WAAA2C,oBAAmBjhB,EAAMye,WAAWyG,UACtC5b,sBAAAvH,KAAA8iB,MAAa7kB,uBAQjB,WACE,MAAA8J,uBAAO/H,KAAP+iB,cAOF,SAAWrc,IACL,EAAA6V,WAAA2C,oBAAmBxY,EAAQgW,WAAW0G,aACxC7b,sBAAAvH,KAAA+iB,QAAerc,yBAQnB,WACE,MAAAqB,uBAAO/H,KAAPgjB,gBAOF,SAAaK,IACP,EAAA9G,WAAA2C,oBAAmBmE,EAAU3G,WAAWyC,eAC1C5X,sBAAAvH,KAAAgjB,UAAiBK,gCAQrB,WACE,MAAAtb,uBAAO/H,KAAPijB,uBAOF,SAAoBK,IACd,EAAA/G,WAAA2C,oBAAmBoE,EAAiB5G,WAAWyG,UACjD5b,sBAAAvH,KAAAijB,iBAAwBK,yBAiB5B,WACEtjB,KAAK0d,YAAa,CAClB,IAAMlf,IACJ0kB,YAAeljB,KAAKkjB,YACpB/X,KAAQnL,KAAKmL,KACblN,KAAQ+B,KAAK/B,KACbyI,OAAU1G,KAAK0G,OACf2c,SAAYrjB,KAAKqjB,SACjBC,gBAAmBtjB,KAAKsjB,gBAG1B,cADOtjB,MAAK0d,WACLlf,SAnJyB2f,QAAAA,kDA0JvB8B,sBAIX,QAAAA,KAAc,MAAA/c,iBAAAlD,KAAAigB,GAAAsD,EAAA5iB,KAAAX,MACLqe,SAAU7B,eAAegH,gEALNtW,QAAAA,gFAYjBhJ,2BAIX,QAAAA,KAAc,GAAAuf,EAAA,OAAAvgB,iBAAAlD,KAAAkE,GACZuf,EAAAC,EAAA/iB,KAAAX,MADY2jB,SAAAve,IAAA8S,uBAAAuL,IAAApe,UAAA,EAAA/E,MAwBJ,KAxBIsjB,OAAAxe,IAAA8S,uBAAAuL,IAAApe,UAAA,EAAA/E,MAyBN,KAtBNmjB,EAAK7M,MAAQ,GAAIiN,SAAAA,UAEXC,eAAgBtH,eAAesH,eAC/BC,YAAarH,WAAWqH,YACxBrX,iBAAkB5H,oBAAoByZ,kBACtC9R,oBAAqBiH,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,cACjGsO,gBAAiBlf,oBAAoBkW,cACrCiJ,mBAAoBvQ,kBAAkBiC,mBAAmB7Q,oBAAoBkW,eAAetF,cAC5FwO,iBAAkBpf,oBAAoBqf,mBACtCC,oBAAqB1Q,kBAAkBiC,mBAAmB7Q,oBAAoBqf,oBAAoBzO,gBAZ5F+N,sFAmBd,WAAa,GAAAY,EACXvgB,MAAAC,gBAAAG,EAAAhC,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAAqkB,EAAArkB,KAAK4W,YAAL,KAAAyN,GAAAA,EAAY5W,iCAUd,WACE,MAAA1F,uBAAO/H,KAAP2jB,eAOF,SAAWjd,IACL,EAAA6V,WAAA2C,oBAAmBxY,EAAQgW,WAAW0G,aACxC7b,sBAAAvH,KAAA2jB,SAAejd,qBAQnB,WACE,MAAAqB,uBAAO/H,KAAP4jB,aAOF,SAAS3lB,IACH,EAAAse,WAAA2C,oBAAmBjhB,EAAMye,WAAWyG,UACtC5b,sBAAAvH,KAAA4jB,OAAa3lB,yBAcjB,WACE+B,KAAK0d,YAAa,CAClB,IAAMlf,IACJkI,OAAU1G,KAAK0G,OACfzI,KAAQ+B,KAAK/B,KACb2Y,MAAS5W,KAAK4W,MAGhB,cADO5W,MAAK0d,WACLlf,SArFyB2f,QAAAA,kDA4FvBmG,+BAIX,QAAAA,KAAc,MAAAphB,iBAAAlD,KAAAskB,GAAAC,EAAA5jB,KAAAX,MACLqe,SAAU7B,eAAegI,0EALGtX,QAAAA,qFAY1B/I,oCAIX,QAAAA,KAAc,GAAAsgB,EAAA,OAAAvhB,iBAAAlD,KAAAmE,GACZsgB,EAAAC,EAAA/jB,KAAAX,MADY2kB,eAAAvf,IAAA8S,uBAAAuM,IAAApf,UAAA,EAAA/E,MAwBG,KArBfmkB,EAAK7N,MAAQ,GAAIiN,SAAAA,UAEXC,eAAgBtH,eAAesH,eAC/BC,YAAarH,WAAWqH,YACxBrX,iBAAkB5H,oBAAoByZ,kBACtC9R,oBAAqBiH,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,cACjGsO,gBAAiBlf,oBAAoBkW,cACrCiJ,mBAAoBvQ,kBAAkBiC,mBAAmB7Q,oBAAoBkW,eAAetF,cAC5FwO,iBAAkBpf,oBAAoBqf,mBACtCC,oBAAqB1Q,kBAAkBiC,mBAAmB7Q,oBAAoBqf,oBAAoBzO,gBAZ5F+O,sFAmBd,WAAa,GAAAG,EACX9gB,MAAAC,gBAAAI,EAAAjC,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAA4kB,EAAA5kB,KAAK4W,YAAL,KAAAgO,GAAAA,EAAYnX,wCASd,WACE,MAAA1F,uBAAO/H,KAAP2kB,qBAOF,SAAkBpO,IACZ,EAAAgG,WAAA2C,oBAAmB3I,EAAemG,WAAW0G,aAC/C7b,sBAAAvH,KAAA2kB,eAAsBpO,yBAc1B,WACEvW,KAAK0d,YAAa,CAClB,IAAMlf,IACJ+X,cAAiBvW,KAAKuW,cACtBK,MAAS5W,KAAK4W,MAGhB,cADO5W,MAAK0d,WACLlf,SAjEkC2f,QAAAA,mIAwEhCla,wCAIX,QAAAA,KAAc,GAAA4gB,EAAA,OAAA3hB,iBAAAlD,KAAAiE,GACZ4gB,EAAAC,EAAAnkB,KAAAX,MADY+kB,SAAA3f,IAAA8S,uBAAA2M,IAAAxf,UAAA,EAAA/E,MAIH,KAJG0kB,UAAA5f,IAAA8S,uBAAA2M,IAAAxf,UAAA,EAAA/E,MAKF,KALE2kB,OAAA7f,IAAA8S,uBAAA2M,IAAAxf,UAAA,EAAA/E,MAMN,KANMukB,iFAYd,WACE,MAAA9c,uBAAO/H,KAAP+kB,eAOF,SAAYG,IACN,EAAA3I,WAAA2C,oBAAmBgG,EAASxI,WAAWyC,eACzC5X,sBAAAvH,KAAA+kB,SAAgBG,yBAQpB,WACE,MAAAnd,uBAAO/H,KAAPglB,gBAOF,SAAaG,IACP,EAAA5I,WAAA2C,oBAAmBiG,EAAUzI,WAAWyC,eAC1C5X,sBAAAvH,KAAAglB,UAAiBG,qBAQrB,WACE,MAAApd,uBAAO/H,KAAPilB,aAOF,SAAShnB,IACH,EAAAse,WAAA2C,oBAAmBjhB,EAAMye,WAAWyG,UACtC5b,sBAAAvH,KAAAilB,OAAahnB,yBAcjB,WACE+B,KAAK0d,YAAa,CAClB,IAAMlf,IACJ0mB,QAAWllB,KAAKklB,QAChBC,SAAYnlB,KAAKmlB,SACjBlnB,KAAQ+B,KAAK/B,KAGf,cADO+B,MAAK0d,WACLlf,SApFsC2f,QAAAA;;+vFC/+B1C,QAASiH,kBACZ9kB,EACA+kB,EACAze,EACAqC,EACAqc,GACF,GAAM9K,GAAc,GAAIC,QAAO4K,GACzBvK,EAAUxa,EAAMqL,MAAM6O,EAC5B,IAAI8K,GAA8B,KAAVhlB,EACtB,OAAO,CAET,QAAchC,KAAVgC,IAAwBwa,GAA0B,KAAfA,EAAQ,GAC7C,KAAM,IAAI9R,aAAAA,gBAAgBpC,EAAWqC,EAEvC,QAAO,EAYF,QAASsc,iBACZjlB,EAAYklB,EAAsB5e,EAAmBqC,GACvD,GAAMwc,GAASD,EAAahZ,MAAM,IAElC,KADAlM,GAAgB,IACHmlB,EAAO,GAAI,CACtB,GAAmB,MAAdA,EAAO,IAAgBnlB,GAASmlB,EAAO,GAC1C,OAAO,CAEP,MAAM,IAAIzc,aAAAA,gBAAgBpC,EAAWqC,GAGvC,KAAM,IAAID,aAAAA,gBAAgBpC,EAAWqC,oMAxDzC,IAAAxE,gBAAA9B,uBAAAC,QAAA,+BACA0C,aAAA3C,uBAAAC,QAAA,6BACA2B,YAAA3B,QAAA,iBACA4U,OAAA7U,uBAAAC,QAAA,uBAEM8Q,kBAAoB7O,eAAAA,QAAaG,QACjC0gB,cAAgB3N,OAAAA,QAAM/S,QACtBF,oBAAsBC,aAAAA,QAAWC,yDAwD1BmZ,mBAQX,QAAAA,KACE,GADYjb,gBAAAlD,KAAAme,GAAAnX,gBAAAhH,KAAA,cAPD,GAOC2lB,aAAAvgB,IAAApF,MAAAqF,UAAA,EAAA/E,OANC,IAMDslB,YAAAxgB,IAAApF,MAAAqF,UAAA,EAAA/E,UAAA,MACRN,eAAAme,GAAAne,KAAAiH,gBAAA,MAAekX,EACjB,KAAM,IAAIle,WAAU,6FAQxB,WACE,MAAA8H,uBAAO/H,KAAP2lB,sCAOF,WACE,MAAA5d,uBAAO/H,KAAP4lB,uCAMF,WACEre,sBAAAvH,KAAA2lB,cAAoB,+BAOtB,WACEpe,sBAAAvH,KAAA4lB,aAAmB,GAAIrjB,OAAOsjB,qXAOrBhC,qBAcX,QAAAA,GAAApT,GAYO,GAAAxN,GAVD6gB,EAUCrT,EAVDqT,eACAC,EASCtT,EATDsT,YACA1hB,EAQCoO,EARDpO,IACAqK,EAOC+D,EAPD/D,iBACAD,EAMCgE,EANDhE,oBACAuX,EAKCvT,EALDuT,gBACAC,EAICxT,EAJDwT,mBACAC,EAGCzT,EAHDyT,iBACAE,EAEC3T,EAFD2T,oBACA0B,EACCrV,EADDqV,YACC,OAAA5iB,iBAAAlD,KAAA6jB,GACL5gB,EAAAK,EAAA3C,KAAAX,MADK+lB,WAAA3gB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAAA0lB,aAAA5gB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAAA2lB,oBAAA7gB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAAA4lB,uBAAA9gB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAAA6lB,mBAAA/gB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAAA8lB,sBAAAhhB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAAA+lB,oBAAAjhB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAAAgmB,uBAAAlhB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAAAimB,eAAAnhB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAAAkmB,KAAAphB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAgCA,KAhCAmmB,KAAArhB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAiCA,KAjCAomB,KAAAthB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,UAAA,KAGLiH,sBAAA2Q,uBAAAjV,GAAA8iB,WAAkBjC,GACdpQ,kBAAkBoQ,gBACtBvc,sBAAA2Q,uBAAAjV,GAAA+iB,eAAsBjC,GAAsB2B,cAAc3B,aAC1Dxc,sBAAA2Q,uBAAAjV,GAAAyjB,KAAarkB,GAAe,KAARA,EAAcA,EAAM,OACxCkF,sBAAA2Q,uBAAAjV,GAAAgjB,oBAA4BvZ,GACxB5H,oBAAoByZ,mBACxBhX,sBAAA2Q,uBAAAjV,GAAAijB,uBAA+BzZ,GAC3BiH,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,eAChFnO,sBAAA2Q,uBAAAjV,GAAAkjB,mBAA2BnC,GACvBlf,oBAAoBkW,eACxBzT,sBAAA2Q,uBAAAjV,GAAAmjB,sBAA8BnC,GAC1BvQ,kBAAkBiC,mBAAmB7Q,oBAAoBkW,eAAetF,eAC5EnO,sBAAA2Q,uBAAAjV,GAAAojB,oBAA4BnC,GACxBpf,oBAAoBqf,oBACxB5c,sBAAA2Q,uBAAAjV,GAAAqjB,uBAA+BlC,GAC3B1Q,kBAAkBiC,mBAAmB7Q,oBAAoBqf,oBAAoBzO,eACjFnO,sBAAA2Q,uBAAAjV,GAAAsjB,eAAuBT,GACnBJ,cAAciB,YApBb1jB,mFAyCP,WACE,MAAA8E,uBAAO/H,KAAP+lB,iBAQF,SAAcrF,GACZ,KAAM,IAAI1X,aAAAA,gBAAJjB,sBAAoB/H,KAApBimB,qBAAAle,sBAA+C/H,KAA/CkmB,0CAOR,WACE,MAAAne,uBAAO/H,KAAPwmB,WAOF,SAAQ3P,IACFuO,iBAAiBvO,EAAD9O,sBAAM/H,KAANumB,gBAAAxe,sBAChB/H,KADgBmmB,oBAAApe,sBACU/H,KADVomB,yBAEfre,sBAAC/H,KAADgmB,gBACGT,gBAAgB1O,EAAD9O,sBAAM/H,KAANgmB,cAAAje,sBACX/H,KADWqmB,qBAAAte,sBACgB/H,KADhBsmB,0BAErB/e,sBAAAvH,KAAAwmB,KAAY3P,oBAQhB,WACE,MAAA9O,uBAAO/H,KAAPymB,WAOF,SAAQnkB,IACF8iB,iBAAiB9iB,EAADyF,sBAAM/H,KAANumB,gBAAAxe,sBAChB/H,KADgBmmB,oBAAApe,sBACU/H,KADVomB,yBAEfre,sBAAC/H,KAADgmB,gBACGT,gBAAgBjjB,EAADyF,sBAAM/H,KAANgmB,cAAAje,sBACX/H,KADWqmB,qBAAAte,sBACgB/H,KADhBsmB,0BAErB/e,sBAAAvH,KAAAymB,KAAYnkB,oBAQhB,WACE,MAAAyF,uBAAO/H,KAAP0mB,WAOF,SAAQrkB,IACF+iB,iBAAiB/iB,EAAD0F,sBAAM/H,KAANumB,gBAAAxe,sBAChB/H,KADgBmmB,oBAAApe,sBACU/H,KADVomB,yBAEfre,sBAAC/H,KAADgmB,gBACGT,gBAAgBljB,EAAD0F,sBAAM/H,KAANgmB,cAAAje,sBACX/H,KADWqmB,qBAAAte,sBACgB/H,KADhBsmB,0BAErB/e,sBAAAvH,KAAA0mB,KAAYrkB,yBAQhB,WACErC,KAAK0d,YAAa,CAClB,IAAMlf,IACJqY,IAAO7W,KAAK6W,IACZvU,IAAOtC,KAAKsC,IACZD,IAAOrC,KAAKqC,IAGd,cADOrC,MAAK0d,WACLlf,SA9JmB2f,+GAqKjBjR,qBAOX,QAAAA,GAAAwD,GAAiD,GAAA9B,GAApCyP,EAAoC3N,EAApC2N,SAAUzX,EAA0B8J,EAA1B9J,UAAWqC,EAAeyH,EAAfzH,YAAe,OAAA/F,iBAAAlD,KAAAkN,GAC/C0B,EAAAoP,EAAArd,KAAAX,MAD+C4mB,WAAAxhB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,UAAA,KAAAumB,cAAAzhB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,UAAA,KAAAwmB,WAAA1hB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,UAAA,KAE/CiH,sBAAA2Q,uBAAAtJ,GAAAkY,WAAkBzI,GAClB9W,sBAAA2Q,uBAAAtJ,GAAAgY,WAAkBhgB,GAClBW,sBAAA2Q,uBAAAtJ,GAAAiY,cAAqB5d,GACrB2F,EAAKtB,cAL0CsB,mFAgBjD,WACE,MAAA7G,uBAAO/H,KAAP8mB,iBAOF,SAAcpG,GACZ,KAAM,IAAI1X,aAAAA,gBAAJjB,sBAAoB/H,KAApB4mB,YAAA7e,sBAAqC/H,KAArC6mB,oCAOR,WACE,MAAO7mB,MAAKsN,WAAW/B,YAOzB,SAAWgN,GACT,KAAM,IAAIvP,aAAAA,gBAAJjB,sBAAoB/H,KAApB4mB,YAAA7e,sBAAqC/H,KAArC6mB,sCAOR,WACE7mB,KAAK0d,YAAa,CAElB,KAAK,GADClf,MACGoO,EAAI,EAAGA,EAAI5M,KAAKsN,WAAW/B,OAAQqB,IAC1CpO,EAAOoO,EAAI,IAAM5M,KAAKsN,WAAWV,EAGnC,cADO5M,MAAK0d,WACLlf,SA9DmB2f;;ssHChQvB,QAASiC,sBACd,KAAM,IAAIpX,aAAAA,gBACNlE,oBAAoBiI,kBACpB2G,kBAAkBiC,mBAAmB7Q,oBAAoBiI,mBAAmB2I,eAO3E,QAASqR,uBACd,KAAM,IAAI/d,aAAAA,gBACNlE,oBAAoBkiB,mBACpBtT,kBAAkBiC,mBAAmB7Q,oBAAoBkiB,oBAAoBtR,eAOnF,QAASuR,0BACP,KAAM,IAAIje,aAAAA,gBACNlE,oBAAoByZ,kBACpB7K,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,eAW3E,QAASwJ,oBACZ5e,EACA+kB,EACAC,GACF,OAAO,EAAAhhB,QAAA8gB,kBAAiB9kB,EAAO+kB,EAC3BvgB,oBAAoBkW,cACpBtH,kBAAkBiC,mBAAmB7Q,oBAAoBkW,eAAetF,cACxE4P,GAUC,QAAS4B,mBACZ5mB,EACAklB,EACAF,GACF,OAAO,EAAAhhB,QAAAihB,iBAAgBjlB,EAAOklB,EAC1B1gB,oBAAoBqf,mBACpBzQ,kBAAkBiC,mBAAmB7Q,oBAAoBqf,oBAAoBzO,cAC7E4P,odA/EN,IAAAhhB,SAAA1B,QAAA,YAOA6B,eAAA9B,uBAAAC,QAAA,+BACA0C,aAAA3C,uBAAAC,QAAA,6BACA4U,OAAA7U,uBAAAC,QAAA,uBACA2B,YAAA3B,QAAA,iBACA4Q,UAAAC,wBAAA7Q,QAAA,gCAGM8Q,kBAAoB7O,eAAAA,QAAaG,QACjC0gB,cAAgB3N,OAAAA,QAAM/S,QACtBF,oBAAsBC,aAAAA,QAAWC,mIAqE1BxB,gBAeX,QAAAA,GAAYmZ,EAAcjG,EAAclJ,GAAsB,GAAAvK,EAAA,OAAAC,iBAAAlD,KAAAwD,GAC5DP,EAAAK,EAAA3C,KAAAX,MAD4D+lB,WAAA3gB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAdjD,KAciD6mB,UAAA/hB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAblD,QAakD8mB,aAAAhiB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAZ/C,KAY+C+mB,UAAAjiB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAXlD,KAWkDgnB,mBAAAliB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAVzC,KAUyC0G,gBAAAkR,uBAAAjV,GAAA,eAR/C,MAWTuK,GAAavK,EAAKwK,aAEtBlG,sBAAA2Q,uBAAAjV,GAAA8iB,WAAkBpJ,GAEdjJ,kBAAkBiJ,cACtB1Z,EAAK8S,KAAO,GAAIwR,SAChBtkB,EAAK8a,WAAa,GAAIyJ,eACtBvkB,EAAKyT,aAAeA,GAA8B,GAAI6J,gBACtDtd,EAAK2Z,mBAAqB,GAAIgD,sBAC9B3c,EAAKqW,aAAe,GAAImO,iBAZoCxkB,sFAkB9D,WAAa,GAAAykB,GAAAC,EAAArK,EAAAD,EAAAuK,CACX9jB,MAAAC,gBAAAP,EAAAtB,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAA0nB,EAAA1nB,KAAK+V,WAAL,KAAA2R,GAAAA,EAAWja,aACX,QAAAka,EAAA3nB,KAAK+d,iBAAL,KAAA4J,GAAAA,EAAiBla,aACjB,QAAA6P,EAAAtd,KAAK0W,mBAAL,KAAA4G,GAAAA,EAAmB7P,aACnB,QAAA4P,EAAArd,KAAK4c,yBAAL,KAAAS,GAAAA,EAAyB5P,aACzB,QAAAma,EAAA5nB,KAAKsZ,mBAAL,KAAAsO,GAAAA,EAAmBna,mCAoBrB,WACEzN,KAAK0d,YAAa,CAClB,IAAMlf,IACJmf,aAAgB3d,KAAK2d,aACrBC,YAAe5d,KAAK4d,YACpBC,SAAY7d,KAAK6d,SACjBC,kBAAqB9d,KAAK8d,kBAC1B/H,KAAQ/V,KAAK+V,KACbgI,WAAc/d,KAAK+d,WACnBrH,aAAgB1W,KAAK0W,aACrBkG,mBAAsB5c,KAAK4c,mBAC3BtD,aAAgBtZ,KAAKsZ,aAGvB,cADOtZ,MAAK0d,WACLlf,wBAOT,WACE,MAAAuJ,uBAAO/H,KAAPmnB,gBAOF,SAAalP,GACXgP,gDAOF,WACE,MAAAlf,uBAAO/H,KAAP+lB,iBAOF,SAAcrF,GACZuG,mDAOF,WAAmB,GAAAY,EACjB,OAAA,SAAAA,EAAO7nB,KAAK+V,WAAZ,KAAA8R,MAAA,GAAOA,EAAWlK,kBAOpB,SAAiBA,GACX3d,KAAK+V,OACP/V,KAAK+V,KAAK4H,aAAeA,4BAQ7B,WACE,MAAA5V,uBAAO/H,KAAPonB,mBAOF,SAAgBxJ,GACb5d,KAAKwN,YAAgD4S,qBAAtD7Y,sBAAoBvH,KAApBonB,aAAwCxJ,yBAO1C,WACE,MAAA7V,uBAAO/H,KAAPqnB,gBAOF,SAAaxJ,GACPqB,mBAAmBrB,EAAU6H,cAAcoC,eAAe,IAC5DvgB,sBAAAvH,KAAAqnB,UAAiBxJ,kCAQrB,WACE,MAAA9V,uBAAO/H,KAAPsnB,yBAOF,SAAsBxJ,GACnB9d,KAAKwN,YAEF4S,qBAFJ7Y,sBACIvH,KADJsnB,mBAC8BxJ,sCAShC,WACE,MAAO9d,MAAK+V,KAAKE,oBAAoBjW,KAAK+nB,iDAQ5C,WACE,MAAO/nB,MAAK+V,KAAKI,sBAAsBnW,KAAK+nB,mBAjMvB5J,QAAAA,4TAyMnBoJ,oBAIJ,QAAAA,KAAc,GAAA3Y,EAAA,OAAA1L,iBAAAlD,KAAAunB,GACZ3Y,EAAAoP,EAAArd,KAAAX,MADY8mB,WAAA1hB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MAwBDoT,kBAAkBsU,gBAxBjBC,YAAA7iB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MAyBA,KAzBA4nB,cAAA9iB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MA0BE,KA1BF6nB,iBAAA/iB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MA2BK,KA3BL8nB,QAAAhjB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MA4BJ,KA5BIqkB,eAAAvf,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MA6BG,kBA7BH+nB,OAAAjjB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MA8BL,KA9BKgoB,YAAAljB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MA+BA,KA/BAioB,aAAAnjB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MAgCC,WAhCDkoB,MAAApjB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MAiCN,KAjCMmoB,cAAArjB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MAkCE,aAlCFooB,cAAAtjB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MAmCE,KAhCdsO,EAAKgI,MAAQ,GAAIiN,SAAAA,UAEXC,eAAgBpQ,kBAAkBoQ,eAClCC,YAAa2B,cAAc3B,YAC3BrX,iBAAkB5H,oBAAoByZ,kBACtC9R,oBAAqBiH,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,cACjGsO,gBAAiBlf,oBAAoBkW,cACrCiJ,mBAAoBvQ,kBAAkBiC,mBAAmB7Q,oBAAoBkW,eAAetF,cAC5FwO,iBAAkBpf,oBAAoBqf,mBACtCC,oBAAqB1Q,kBAAkBiC,mBAAmB7Q,oBAAoBqf,oBAAoBzO,gBAZ5F9G,sFAmBd,WAAa,GAAAyV,EACXvgB,MAAAC,gBAAAwjB,EAAArlB,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAAqkB,EAAArkB,KAAK4W,YAAL,KAAAyN,GAAAA,EAAY5W,oCAqBd,WACE,MAAA1F,uBAAO/H,KAAP8mB,iBAQF,SAAcpG,GACZuG,iDAOF,WACE,MAAAlf,uBAAO/H,KAAPioB,kBAOF,SAAeU,GACZ3oB,KAAKwN,YAA8C4S,qBAApD7Y,sBAAoBvH,KAApBioB,YAAuCU,6BAOzC,WACE,MAAA5gB,uBAAO/H,KAAPkoB,oBAOF,SAAiBU,GACd5oB,KAAKwN,YAEF4S,qBAFJ7Y,sBACIvH,KADJkoB,cACyBU,gCAQ3B,WACE,MAAA7gB,uBAAO/H,KAAPmoB,uBAOF,SAAoBU,GACd3J,mBAAmB2J,EAAiBnD,cAAcvG,cAAc,IAClE5X,sBAAAvH,KAAAmoB,iBAAwBU,uBAQ5B,WACE,MAAA9gB,uBAAO/H,KAAPooB,cAOF,SAAW3R,GACRzW,KAAKwN,YAAsC4S,qBAA5C7Y,sBAAoBvH,KAApBooB,QAAmC3R,8BAOrC,WACE,MAAA1O,uBAAO/H,KAAP2kB,qBAOF,SAAkBpO,GACZvW,KAAKwN,YACH0R,mBAAmB3I,EAAemP,cAAcoD,YAClDvhB,sBAAAvH,KAAA2kB,eAAsBpO,GAGpB2I,mBAAmB3I,EAAemP,cAActC,aAClD7b,sBAAAvH,KAAA2kB,eAAsBpO,sBAS5B,WACE,MAAAxO,uBAAO/H,KAAPqoB,aAOF,SAAUU,GACP/oB,KAAKwN,YAAoC4S,qBAA1C7Y,sBAAoBvH,KAApBqoB,OAAkCU,2BAOpC,WACE,MAAAhhB,uBAAO/H,KAAPsoB,kBAOF,SAAetS,GACZhW,KAAKwN,YAA8C4S,qBAApD7Y,sBAAoBvH,KAApBsoB,YAAuCtS,4BAOzC,WACE,MAAAjO,uBAAO/H,KAAPuoB,mBAOF,SAAgB/R,GACbxW,KAAKwN,YAAgD4S,qBAAtD7Y,sBAAoBvH,KAApBuoB,aAAwC/R,qBAO1C,WACE,MAASxW,MAAK0d,WAAP3V,sBAA6C/H,KAA7CwoB,OAAqBzB,2BAO9B,SAASiC,GACH9J,mBAAmB8J,EAAMtD,cAAcuD,SAAS,IAClD1hB,sBAAAvH,KAAAwoB,MAAaQ,6BAQjB,WACE,MAAShpB,MAAK0d,WAAP3V,sBAA6C/H,KAA7CyoB,eAAqB1B,2BAO9B,SAAiB7Q,GACXgJ,mBAAmBhJ,EAAcwP,cAAcwD,cACjD3hB,sBAAAvH,KAAAyoB,cAAqBvS,6BAQzB,WACE,MAAAnO,uBAAO/H,KAAP0oB,oBAOF,SAAiB/K,GACXuB,mBAAmBvB,EAAc+H,cAAcoC,eAAe,IAChEvgB,sBAAAvH,KAAA0oB,cAAqB/K,sCASzB,SAAoBoK,GAClB,GAAIoB,GAAWphB,sBAAG/H,KAAHyoB,eACTW,EAAYrB,CAElB,QAAyB,KAAdqB,GAA2C,OAAdA,EAAoB,CAC1D,GAAMC,IAAU,GAAI9mB,OAAOsjB,UAAYuD,CACvCD,GAAcG,KAAKC,mBAAmBF,EAAU,KAGlD,MAAO7V,WAAUgW,qBAAVzhB,sBACH/H,KADGsoB,aAEHa,EACA,GAAI1O,QAAOiL,cAAcwD,mDAS/B,SAAsBnB,GACpB,GAAIoB,GAAWphB,sBAAG/H,KAAHyoB,eACTW,EAAYrB,CAElB,QAAyB,KAAdqB,GAA2C,OAAdA,EAAoB,CAC1D,GAAMC,IAAU,GAAI9mB,OAAOsjB,UAAYuD,CACvCD,GAAcG,KAAKC,mBAAmBF,EAAU,KAGlD,MADAlgB,SAAQ8B,IAAIke,GACLA,wBAqBT,WACEnpB,KAAK0d,YAAa,CAClB,IAAMlf,IACJmqB,WAAc3oB,KAAK2oB,WACnBC,aAAgB5oB,KAAK4oB,aACrBC,gBAAmB7oB,KAAK6oB,gBACxBpS,OAAUzW,KAAKyW,OACfF,cAAiBvW,KAAKuW,cACtBwS,MAAS/oB,KAAK+oB,MACdvS,YAAexW,KAAKwW,YACpBwS,KAAQhpB,KAAKgpB,KACb9S,aAAgBlW,KAAKkW,aACrBU,MAAS5W,KAAK4W,MAGhB,cADO5W,MAAK0d,WACLlf,SApUW2f,QAAAA,SA4UhBqJ,0BAIJ,QAAAA,KAAc,MAAAtkB,iBAAAlD,KAAAwnB,GAAApJ,EAAAzd,KAAAX,MAEVqe,SAAU3K,kBAAkB+V,oBAC5B7iB,UAAW9B,oBAAoByZ,kBAC/BtV,aAAcyK,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,+DARpExI,QAAAA,yHAiBfqT,2BAUX,QAAAA,GAAYT,GAAuB,GAAA5P,EAAA,OAAAhN,iBAAAlD,KAAAugB,GACjCrQ,EAAAsO,EAAA7d,KAAAX,MADiC0pB,WAAAtkB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,UAAA,KAAAqpB,eAAAvkB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MARlB,KAQkBspB,kBAAAxkB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MAPf,KAOeupB,mBAAAzkB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MANd,KASnBiH,sBAAA2Q,uBAAAhI,GAAAwZ,WAAkB5J,GAEdpM,kBAAkBoM,uBALW5P,mFAanC,WACE,MAAAnI,uBAAO/H,KAAP0pB,iBAQF,SAAchJ,GACZuG,oDAOF,WACE,MAAAlf,uBAAO/H,KAAP2pB,qBAOF,SAAkBhT,GACf3W,KAAKwN,YAEF4S,qBAFJ7Y,sBACIvH,KADJ2pB,eAC0BhT,iCAQ5B,WACE,MAAA5O,uBAAO/H,KAAP4pB,wBAOF,SAAqBvJ,GAClBrgB,KAAKwN,YAEF4S,qBAFJ7Y,sBACIvH,KADJ4pB,kBAC6BvJ,kCAQ/B,WACE,MAAAtY,uBAAO/H,KAAP6pB,yBAOF,SAAsBvJ,GACnBtgB,KAAKwN,YAEF4S,qBAFJ7Y,sBACIvH,KADJ6pB,mBAC8BvJ,yBAehC,WACEtgB,KAAK0d,YAAa,CAClB,IAAMlf,IACJmY,cAAiB3W,KAAK2W,cACtB0J,iBAAoBrgB,KAAKqgB,iBACzBC,kBAAqBtgB,KAAKsgB,kBAG5B,cADOtgB,MAAK0d,WACLlf,SA7GyB2f,QAAAA,wJAqHvByB,iCAOX,QAAAA,GAAYnB,GAA6B,GAAAjN,EAAA,OAAAtO,iBAAAlD,KAAA4f,GACvCpO,EAAAqO,EAAAlf,KAAAX,MADuC8pB,WAAA1kB,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,UAAA,KAAAypB,OAAA3kB,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,MAQhC,KARgC0pB,UAAA5kB,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,MAS7B,KAT6B2pB,OAAA7kB,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,MAUhC,KAVgC4pB,MAAA9kB,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,MAWjC,KARNiH,sBAAA2Q,uBAAA1G,GAAAsY,WAAkBrL,GAEd/K,kBAAkB+K,6BALiBjN,mFAkBzC,WACE,MAAAzJ,uBAAO/H,KAAP8pB,iBAQF,SAAcpJ,GACZuG,4CAOF,WACE,MAAAlf,uBAAO/H,KAAP+pB,aAOF,SAAUvK,GACJN,mBAAmBM,EAAOkG,cAAcyE,cACxCjD,kBAAkB1H,EAAOkG,cAAc0E,cACzC7iB,sBAAAvH,KAAA+pB,OAAcvK,yBAQlB,WACE,MAAAzX,uBAAO/H,KAAPgqB,gBAOF,SAAavK,GACPP,mBAAmBO,EAAUiG,cAAcvG,eAC7C5X,sBAAAvH,KAAAgqB,UAAiBvK,sBAQrB,WACE,MAAA1X,uBAAO/H,KAAPiqB,aAOF,SAAUvK,GACJR,mBAAmBQ,EAAOgG,cAAcyE,cACxCjD,kBAAkBxH,EAAOgG,cAAc2E,cACzC9iB,sBAAAvH,KAAAiqB,OAAcvK,qBAQlB,WACE,MAAA3X,uBAAO/H,KAAPkqB,YAOF,SAASvK,GACHT,mBAAmBS,EAAM+F,cAAcyE,cACvCjD,kBAAkBvH,EAAM+F,cAAc4E,aACxC/iB,sBAAAvH,KAAAkqB,MAAavK,yBAgBjB,WACE3f,KAAK0d,YAAa,CAClB,IAAMlf,IACJghB,MAASxf,KAAKwf,MACdC,SAAYzf,KAAKyf,SACjBC,MAAS1f,KAAK0f,MACdC,KAAQ3f,KAAK2f,KAGf,cADO3f,MAAK0d,WACLlf,SAtI+B2f,QAAAA,8DA8IpCsJ,6BAIJ,QAAAA,KAAc,MAAAvkB,iBAAAlD,KAAAynB,GAAAhH,EAAA9f,KAAAX,MAEVqe,SAAU3K,kBAAkB6W,sBAC5B3jB,UAAW9B,oBAAoByZ,kBAC/BtV,aAAcyK,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,+DARlExI,QAAAA,4JAiBjBqI,kCAIX,QAAAA,KAAc,GAAAiL,EAAA,OAAAtd,iBAAAlD,KAAAuV,GACZiL,EAAA+B,EAAA5hB,KAAAX,MADYwqB,IAAAplB,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAwBR,KAxBQwiB,MAAA1d,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MAyBN,KAzBMmqB,MAAArlB,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MA0BN,KA1BMoqB,WAAAtlB,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MA2BD,KA3BCqqB,kBAAAvlB,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MA4BM,KA5BNqS,QAAAvN,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MA6BJ,KA7BIsqB,SAAAxlB,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MA8BH,KA3BTkgB,EAAKzC,WAAa,GAAI7Q,SAAAA,UACpBtG,UAAW9B,oBAAoByZ,kBAC/BtV,aAAcyK,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,cAC1F2I,SAAU3K,kBAAkB+V,sBAE9BjJ,EAAK7I,kBAAoB,GAAIzK,SAAAA,UAC3BtG,UAAW9B,oBAAoByZ,kBAC/BtV,aAAcyK,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,cAC1F2I,SAAU3K,kBAAkBmX,6BAXlBrK,sFAkBd,WAAa,GAAAsK,GAAAC,CACXjnB,MAAAC,gBAAAwR,EAAArT,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAA8qB,EAAA9qB,KAAK+d,iBAAL,KAAA+M,GAAAA,EAAiBrd,aACjB,QAAAsd,EAAA/qB,KAAK2X,wBAAL,KAAAoT,GAAAA,EAAwBtd,6BAe1B,WACE,MAASzN,MAAK0d,WAAP3V,sBAA6C/H,KAA7CwqB,KAAqBzD,2BAO9B,SAAOiE,GACD9L,mBAAmB8L,EAAItF,cAAcuF,gBACvC1jB,sBAAAvH,KAAAwqB,IAAWQ,qBAQf,WACE,MAAShrB,MAAK0d,WAAP3V,sBAA6C/H,KAA7C8iB,OAAqBiE,2BAO9B,SAAS9oB,GACHihB,mBAAmBjhB,EAAMynB,cAAcvC,UACzC5b,sBAAAvH,KAAA8iB,MAAa7kB,qBAQjB,WACE,MAAS+B,MAAK0d,WAAP3V,sBAA6C/H,KAA7CyqB,OAAqB1D,2BAO9B,SAASxmB,GACH2e,mBAAmB3e,EAAMmlB,cAAcwF,UACzC3jB,sBAAAvH,KAAAyqB,MAAalqB,0BAQjB,WACE,MAASP,MAAK0d,WAAP3V,sBAEH/H,KAFG0qB,YACH3D,2BAQN,SAAcoE,GACRjM,mBAAmBiM,EAAWzF,cAAciB,aAC5CO,kBAAkBiE,EAAWzF,cAAc0F,kBAC7C7jB,sBAAAvH,KAAA0qB,WAAkBS,iCAQtB,WACE,MAASnrB,MAAK0d,WAAP3V,sBAA6C/H,KAA7C2qB,mBAAqB5D,2BAO9B,SAAqBsE,GACfnM,mBAAmBmM,EAAkB3F,cAAc4F,aAAa,IAClE/jB,sBAAAvH,KAAA2qB,kBAAyBU,uBAQ7B,WACE,MAASrrB,MAAK0d,WAAP3V,sBAA6C/H,KAA7C2S,SAAqBoU,2BAO9B,SAAWvoB,GACL0gB,mBAAmB1gB,EAAQknB,cAAc6F,YAC3ChkB,sBAAAvH,KAAA2S,QAAenU,wBAQnB,WACE,MAASwB,MAAK0d,WAAP3V,sBAA6C/H,KAA7C4qB,UAAqB7D,2BAO9B,SAAYyE,GACNtM,mBAAmBsM,EAAS9F,cAAcwD,cAC5C3hB,sBAAAvH,KAAA4qB,SAAgBY,yBAqBpB,WACExrB,KAAK0d,YAAa,CAClB,IAAMlf,IACJwsB,GAAMhrB,KAAKgrB,GACX/sB,KAAQ+B,KAAK/B,KACbsC,KAAQP,KAAKO,KACb4qB,UAAanrB,KAAKmrB,UAClBE,iBAAoBrrB,KAAKqrB,iBACzB7sB,OAAUwB,KAAKxB,OACfgtB,QAAWxrB,KAAKwrB,QAChBzN,WAAc/d,KAAK+d,WACnBpG,kBAAqB3X,KAAK2X,kBAG5B,cADO3X,MAAK0d,WACLlf,SApMgC2f,QAAAA,sGA4M9B/I,gCAIX,QAAAA,KAAc,GAAAsN,EAAA,OAAAxf,iBAAAlD,KAAAoV,GACZsN,EAAAC,EAAAhiB,KAAAX,MADYyrB,KAAArmB,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MAgBR,KAhBQyiB,QAAA3d,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MAiBJ,KAdRoiB,EAAK9L,MAAQ,GAAIiN,SAAAA,UAEXC,eAAgBpQ,kBAAkBoQ,eAClCC,YAAa2B,cAAc3B,YAC3BrX,iBAAkB5H,oBAAoByZ,kBACtC9R,oBAAqBiH,kBAAkBiC,mBAAmB7Q,oBAAoByZ,mBAAmB7I,cACjGsO,gBAAiBlf,oBAAoBkW,cACrCiJ,mBAAoBvQ,kBAAkBiC,mBAAmB7Q,oBAAoBkW,eAAetF,cAC5FwO,iBAAkBpf,oBAAoBqf,mBACtCC,oBAAqB1Q,kBAAkBiC,mBAAmB7Q,oBAAoBqf,oBAAoBzO,gBAZ5FgN,4EAuBd,WACE,MAAA3a,uBAAO/H,KAAPyrB,WAOF,SAAOT,GACD9L,mBAAmB8L,EAAItF,cAAcuF,gBACvC1jB,sBAAAvH,KAAAyrB,KAAWT,uBAQf,WACE,MAAAjjB,uBAAO/H,KAAP+iB,cAOF,SAAWrc,GACLwY,mBAAmBxY,EAAQgf,cAActC,aAC3C7b,sBAAAvH,KAAA+iB,QAAerc,yBAcnB,WACE1G,KAAK0d,YAAa,CAClB,IAAMlf,IACJwsB,GAAMhrB,KAAKgrB,GACXtkB,OAAU1G,KAAK0G,OACfkQ,MAAS5W,KAAK4W,MAGhB,cADO5W,MAAK0d,WACLlf,SA7E8B2f,QAAAA,8EAqF5B7I,4CAIX,QAAAA,KAAc,GAAAmO,EAAA,OAAAvgB,iBAAAlD,KAAAsV,GACZmO,EAAAF,EAAA5iB,KAAAX,MADY0rB,KAAAtmB,IAAA8S,uBAAAuL,IAAApe,UAAA,EAAA/E,MAIR,KAJQmjB,4EAUd,WACE,MAAA1b,uBAAO/H,KAAP0rB,WAOF,SAAOV,GACD9L,mBAAmB8L,EAAItF,cAAcuF,gBACvC1jB,sBAAAvH,KAAA0rB,KAAWV,yBAYf,WACEhrB,KAAK0d,YAAa,CAClB,IAAMlf,IACJwsB,GAAMhrB,KAAKgrB,GAGb,cADOhrB,MAAK0d,WACLlf,SA1C0C2f,QAAAA,0GAkDxC9I,kDAIX,QAAAA,KAAc,GAAAoP,EAAA,OAAAvhB,iBAAAlD,KAAAqV,GACZoP,EAAAf,EAAA/iB,KAAAX,MADY2rB,SAAAvmB,IAAA8S,uBAAAuM,IAAApf,UAAA,EAAA/E,MAIH,KAJGmkB,iFAUd,WACE,MAASzkB,MAAK0d,WAAP3V,sBAA6C/H,KAA7C2rB,UAAqB5E,2BAO9B,SAAY5M,GACN+E,mBAAmB/E,EAASuL,cAAc4F,aAAa,IACzD/jB,sBAAAvH,KAAA2rB,SAAgBxR,yBAYpB,WACEna,KAAK0d,YAAa,CAClB,IAAMlf,IACJ2b,QAAWna,KAAKma,QAGlB,cADOna,MAAK0d,WACLlf,SA1CgD2f,QAAAA,oHAiD9Cza,gBAIX,QAAAA,KAAc,GAAAmhB,EAAA,OAAA3hB,iBAAAlD,KAAA0D,GACZmhB,EAAAN,EAAA5jB,KAAAX,MADY4rB,OAAAxmB,IAAA8S,uBAAA2M,IAAAxf,UAAA,EAAA/E,MAIL,KAJKukB,+EAUd,WACE,MAAA9c,uBAAO/H,KAAP4rB,aAOF,SAAUhX,GACJsK,mBAAmBtK,EAAO8Q,cAAcmG,WAC1CtkB,sBAAAvH,KAAA4rB,OAAchX,yBAYlB,WACE5U,KAAK0d,YAAa,CAClB,IAAMlf,IACJoW,MAAS5U,KAAK4U,MAGhB,cADO5U,MAAK0d,WACLlf,SA1Cc2f,QAAAA;;ssHC5vCzB,QAASiC,sBACP,KAAM,IAAIpX,aAAAA,gBACN0O,sBAAsB3K,kBACtB0K,oBAAoB9B,mBAAmB+B,sBAAsB3K,mBAAmB2I,eAOtF,QAASqR,uBACP,KAAM,IAAI/d,aAAAA,gBACN0O,sBAAsBsP,mBACtBvP,oBAAoB9B,mBAAmB+B,sBAAsBsP,oBAAoBtR,eAOvF,QAASoW,0BACP,KAAM,IAAI9iB,aAAAA,gBACN0O,sBAAsBsD,cACtBvD,oBAAoB9B,mBAAmB+B,sBAAsBsD,eAAetF,eAOlF,QAASqW,sCACP,KAAM,IAAI/iB,aAAAA,gBACN0O,sBAAsBiC,2BACtBlC,oBAAoB9B,mBAAmB+B,sBAAsBiC,4BAA4BjE,eAO/F,QAASsW,wBACP,KAAM,IAAIhjB,aAAAA,gBACN0O,sBAAsBgC,oBACtBjC,oBAAoB9B,mBAAmB+B,sBAAsBgC,qBAAqBhE,eAWxF,QAASuW,sBACL3rB,EACA+kB,EACAC,GACF,OAAO,EAAAhhB,QAAA8gB,kBAAiB9kB,EAAO+kB,EAC3B3N,sBAAsBsD,cACtBvD,oBAAoB9B,mBAAmB+B,sBAAsBsD,eAAetF,cAC5E4P,GASN,QAAS4G,qBAAoB5rB,EAAYklB,GACvC,OAAO,EAAAlhB,QAAAihB,iBAAgBjlB,EAAOklB,EAC1B9N,sBAAsByM,mBACtB1M,oBAAoB9B,mBAAmB+B,sBAAsByM,oBAAoBzO,8QAhGvF,IAAApR,SAAA1B,QAAA,YAOA6B,eAAA9B,uBAAAC,QAAA,+BACA4U,OAAA7U,uBAAAC,QAAA,uBACA0C,aAAA3C,uBAAAC,QAAA,6BACA0U,oBAAA3U,uBAAAC,QAAA,oCACA2B,YAAA3B,QAAA,iBACA0mB,KAAA7V,wBAAA7Q,QAAA,iBAEM6U,oBAAsB5S,eAAAA,QAAayH,UACnCoL,sBAAwB3S,aAAAA,QAAWuH,UACnC6f,kBAAoBvU,oBAAAA,QAAUwU,QAE9BtU,gBAAkBC,OAAAA,QAAMzL,ygBAoFjB9I,gBAKX,QAAAA,GAAYgK,GAAsB,GAAAvK,EAAA,OAAAC,iBAAAlD,KAAAwD,GAChCP,EAAAK,EAAA3C,KAAAX,MADgCmnB,UAAA/hB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAatB,QAbsBylB,WAAA3gB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAcrBmX,oBAAoBkF,eAdC0P,mBAAAjnB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAeb,YAfagsB,sBAAAlnB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAgBV,KAhBU8nB,QAAAhjB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAiBxB,WAjBwB+nB,OAAAjjB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAkBzB,KAlByBkoB,MAAApjB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAmB1B,KAnB0B8mB,aAAAhiB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAoBnB,KApBmBisB,YAAAnnB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAqBpB,KArBoBksB,cAAApnB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAsBlB,KAtBkB0kB,UAAA5f,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAuBtB,KAvBsBspB,kBAAAxkB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAwBd,KAxBcmsB,MAAArnB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAyB1B,WAzB0BosB,kBAAAtnB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MA0Bd,KA1BcqsB,sBAAAvnB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MA2BV,KA3BUmoB,cAAArjB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MA4BlB,aA5BkBssB,gBAAAxnB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MA6BhB,YA7BgBooB,cAAAtjB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MA8BlB,KA9BkBupB,mBAAAzkB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MA+Bb,wBA/BagoB,YAAAljB,IAAA8S,uBAAAjV,IAAAoC,UAAA,EAAA/E,MAgCpB,KA7BZ2C,EAAK4pB,mBAAqB,GAAIC,sBAC9B7pB,EAAK2T,MAAQ,GAAImW,mBACjB9pB,EAAK+pB,sBAAwB,GAAIC,wBACjChqB,EAAK6a,kBAAoB,GAAIoP,oBAC7BjqB,EAAKqW,aAAe,GAAImO,iBACxBxkB,EAAK8a,WAAa,GAAIyJ,eAElBha,GAAavK,EAAKwK,aAVUxK,sFAqClC,WAAa,GAAAkqB,GAAA9I,EAAA+I,EAAAC,EAAAzF,EAAAD,CACX7jB,MAAAC,gBAAAP,EAAAtB,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAAmtB,EAAAntB,KAAK6sB,yBAAL,KAAAM,GAAAA,EAAyB1f,aACzB,QAAA4W,EAAArkB,KAAK4W,YAAL,KAAAyN,GAAAA,EAAY5W,aACZ,QAAA2f,EAAAptB,KAAKgtB,4BAAL,KAAAI,GAAAA,EAA4B3f,aAC5B,QAAA4f,EAAArtB,KAAK8d,wBAAL,KAAAuP,GAAAA,EAAwB5f,aACxB,QAAAma,EAAA5nB,KAAKsZ,mBAAL,KAAAsO,GAAAA,EAAmBna,aACnB,QAAAka,EAAA3nB,KAAK+d,iBAAL,KAAA4J,GAAAA,EAAiBla,mCAQnB,WACE,MAAA1F,uBAAO/H,KAAPmnB,gBAQF,SAAalP,GACXmI,4CAQF,WACE,MAAArY,uBAAO/H,KAAP+lB,iBAQF,SAAcrF,GACZN,oDAOF,WACE,MAAArY,uBAAO/H,KAAPqsB,yBAOF,SAAsBpQ,GAChBgQ,qBAAqBhQ,EAAmBnE,gBAAgBwV,aAC1D/lB,sBAAAvH,KAAAqsB,mBAA0BpQ,qCAQ9B,WACE,MAAAlU,uBAAO/H,KAAPssB,4BAOF,SAAyBvQ,GACtB/b,KAAKwN,YAEF4S,qBAFJ7Y,sBACIvH,KADJssB,sBACiCvQ,uBAQnC,WACE,MAAAhU,uBAAO/H,KAAPooB,cAOF,SAAW3R,GACRzW,KAAKwN,YAAsC4S,qBAA5C7Y,sBAAoBvH,KAApBooB,QAAmC3R,sBAOrC,WACE,MAAA1O,uBAAO/H,KAAPqoB,aAOF,SAAUU,GACP/oB,KAAKwN,YAAoC4S,qBAA1C7Y,sBAAoBvH,KAApBqoB,OAAkCU,qBAOpC,WACE,MAAS/oB,MAAK0d,WAAP3V,sBAA6C/H,KAA7CwoB,OAAqBzB,2BAO9B,SAASiC,GACHiD,qBAAqBjD,EAAMlR,gBAAgBmR,SAAS,IACtD1hB,sBAAAvH,KAAAwoB,MAAaQ,4BAQjB,WACE,MAAAjhB,uBAAO/H,KAAPonB,mBAOF,SAAgBxJ,GACb5d,KAAKwN,YAAgD4S,qBAAtD7Y,sBAAoBvH,KAApBonB,aAAwCxJ,2BAO1C,WACE,MAAA7V,uBAAO/H,KAAPusB,kBAOF,SAAegB,GACZvtB,KAAKwN,YAA8C4S,qBAApD7Y,sBAAoBvH,KAApBusB,YAAuCgB,6BAOzC,WACE,MAAAxlB,uBAAO/H,KAAPwsB,oBAOF,SAAiBgB,GACdxtB,KAAKwN,YAEF4S,qBAFJ7Y,sBACIvH,KADJwsB,cACyBgB,yBAQ3B,WACE,MAAAzlB,uBAAO/H,KAAPglB,gBAOF,SAAaG,GACP8G,qBAAqB9G,EAAUrN,gBAAgB2V,gBACjDlmB,sBAAAvH,KAAAglB,UAAiBG,iCAQrB,WACE,MAAApd,uBAAO/H,KAAP4pB,wBAOF,SAAqBvJ,GAClBrgB,KAAKwN,YAEF4S,qBAFJ7Y,sBACIvH,KADJ4pB,kBAC6BvJ,qBAQ/B,WACE,MAAAtY,uBAAO/H,KAAPysB,YAOF,SAAS3Q,GACN9b,KAAKwN,YAAkC4S,qBAAxC7Y,sBAAoBvH,KAApBysB,MAAiC3Q,iCAOnC,WACE,MAAA/T,uBAAO/H,KAAP0sB,wBAOF,SAAqB1Q,GACfiQ,qBAAqBjQ,EAAkBlE,gBAAgB6O,aACvDuF,oBAAoBlQ,EAAkBlE,gBAAgB4V,iBACxDnmB,sBAAAvH,KAAA0sB,kBAAyB1Q,qCAQ7B,WACE,MAAAjU,uBAAO/H,KAAP2sB,4BAOF,SAAyBzQ,GACtBlc,KAAKwN,YAEF4S,qBAFJ7Y,sBACIvH,KADJ2sB,sBACiCzQ,6BAQnC,WACE,MAASlc,MAAK0d,WAAP3V,sBAA6C/H,KAA7CyoB,eAAqB1B,2BAO9B,SAAiB7Q,GACX+V,qBAAqB/V,EAAc4B,gBAAgBoR,cACrD3hB,sBAAAvH,KAAAyoB,cAAqBvS,+BAQzB,WACE,MAAAnO,uBAAO/H,KAAP4sB,sBAOF,SAAmBxQ,GACb6P,qBAAqB7P,EAAgBtE,gBAAgB6V,aACvDpmB,sBAAAvH,KAAA4sB,gBAAuBxQ,6BAQ3B,WACE,MAAArU,uBAAO/H,KAAP0oB,oBAOF,SAAiB/K,GACXsO,qBAAqBtO,EAAc7F,gBAAgB8V,gBACnD,IACFrmB,sBAAAvH,KAAA0oB,cAAqB/K,kCAQzB,WACE,MAAA5V,uBAAO/H,KAAP6pB,yBAOF,SAAsBvJ,GACnBtgB,KAAKwN,YAEF4S,qBAFJ7Y,sBACIvH,KADJ6pB,mBAC8BvJ,2BAQhC,WACE,MAAAvY,uBAAO/H,KAAPsoB,kBAOF,SAAetS,GACZhW,KAAKwN,YAA8C4S,qBAApD7Y,sBAAoBvH,KAApBsoB,YAAuCtS,sCAQzC,WACE,GAAImT,GAAWphB,sBAAG/H,KAAHyoB,eACTW,EAAYppB,KAAK+nB,UAEvB,QAAyB,KAAdqB,GAA2C,OAAdA,EAAoB,CAC1D,GAAMC,IAAU,GAAI9mB,OAAOsjB,UAAYuD,CACvCD,GAAcG,KAAKuE,wBAAwBxE,EAAU,KAGvD,MAAOC,MAAKwE,gBAAL/lB,sBACH/H,KADGsoB,aAEHa,EACArR,gBAAgBoR,kDAStB,WACE,GAAIC,GAAWphB,sBAAG/H,KAAHyoB,eACTW,EAAYppB,KAAK+nB,UAEvB,QAAyB,KAAdqB,GAA2C,OAAdA,EAAoB,CAC1D,GAAMC,IAAU,GAAI9mB,OAAOsjB,UAAYuD,CACvCD,GAAcG,KAAKuE,wBAAwBxE,EAAU,KAGvD,MAAOF,yBAkCT,WACEnpB,KAAK0d,YAAa,CAClB,IAAMlf,IACJwuB,sBAAyBhtB,KAAKgtB,sBAC9BlP,kBAAqB9d,KAAK8d,kBAC1B7B,kBAAqBjc,KAAKic,kBAC1BF,qBAAwB/b,KAAK+b,qBAC7BtF,OAAUzW,KAAKyW,OACfsS,MAAS/oB,KAAK+oB,MACdC,KAAQhpB,KAAKgpB,KACb1P,aAAgBtZ,KAAKsZ,aACrBsE,YAAe5d,KAAK4d,YACpB2P,WAAcvtB,KAAKutB,WACnBC,aAAgBxtB,KAAKwtB,aACrBX,mBAAsB7sB,KAAK6sB,mBAC3B1H,SAAYnlB,KAAKmlB,SACjB9E,iBAAoBrgB,KAAKqgB,iBACzBvE,KAAQ9b,KAAK8b,KACbiC,WAAc/d,KAAK+d,WACnB/B,iBAAoBhc,KAAKgc,iBACzBE,qBAAwBlc,KAAKkc,qBAC7BtF,MAAS5W,KAAK4W,MACdV,aAAgBlW,KAAKkW,aACrBkG,eAAkBpc,KAAKoc,eACvBuB,aAAgB3d,KAAK2d,aACrB2C,kBAAqBtgB,KAAKsgB,kBAG5B,cADOtgB,MAAK0d,WACLlf,SAnfc2f,QAAAA,6JA0fnB2O,iCAUJ,QAAAA,KAAc,GAAAle,EAAA,OAAA1L,iBAAAlD,KAAA8sB,GACZle,EAAAoP,EAAArd,KAAAX,MADY8mB,WAAA1hB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MATDmX,oBAAoBgH,8BASnBsP,aAAA3oB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MARC,MAQD0pB,UAAA5kB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MAPF,KAOE0tB,gBAAA5oB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MANI,MAMJ2tB,kBAAA7oB,IAAA8S,uBAAAtJ,IAAAvJ,UAAA,EAAA/E,MALM,MAKNsO,mFASd,WACE,MAAA7G,uBAAO/H,KAAP8mB,iBAQF,SAAcpG,GACZN,8CAOF,WACE,MAAArY,uBAAO/H,KAAP+tB,mBAOF,SAAgBG,GACVjC,qBAAqBiC,EAAapW,gBAAgB6O,aAClDuF,oBAAoBgC,EAAapW,gBAAgBsS,cACnD7iB,sBAAAvH,KAAA+tB,aAAoBG,yBAQxB,WACE,MAAAnmB,uBAAO/H,KAAPgqB,gBAOF,SAAavK,GACPwM,qBAAqBxM,EAAU3H,gBAAgBqW,UACjD5mB,sBAAAvH,KAAAgqB,UAAiBvK,+BAQrB,WACE,MAAA1X,uBAAO/H,KAAPguB,sBAOF,SAAmBI,GACbnC,qBAAqBmC,EAAgBtW,gBAAgB6O,aACrDuF,oBAAoBkC,EAAgBtW,gBAAgBuS,cACtD9iB,sBAAAvH,KAAAguB,gBAAuBI,iCAQ3B,WACE,MAAArmB,uBAAO/H,KAAPiuB,wBAOF,SAAqBI,GACfpC,qBAAqBoC,EAAkBvW,gBAAgBqS,cACvD+B,oBAAoBmC,EAAkBvW,gBAAgBwS,aACxD/iB,sBAAAvH,KAAAiuB,kBAAyBI,yBAgB7B,WACEruB,KAAK0d,YAAa,CAClB,IAAMlf,IACJ0vB,YAAeluB,KAAKkuB,YACpBzO,SAAYzf,KAAKyf,SACjB2O,eAAkBpuB,KAAKouB,eACvBC,iBAAoBruB,KAAKquB,iBAG3B,cADOruB,MAAK0d,WACLlf,SAhIwB2f,QAAAA,SAuI7BsJ,4BAIJ,QAAAA,KAAc,MAAAvkB,iBAAAlD,KAAAynB,GAAArJ,EAAAzd,KAAAX,MAEVqe,SAAU5G,oBAAoB8S,sBAC9B3jB,UAAW8Q,sBAAsB3K,kBACjC9D,aAAcwO,oBAAoB9B,mBAAmB+B,sBAAsB3K,mBAAmB2I,+DARtExI,QAAAA,UAgBxBsa,0BAIJ,QAAAA,KAAc,MAAAtkB,iBAAAlD,KAAAwnB,GAAAhJ,EAAA7d,KAAAX,MAEVqe,SAAU5G,oBAAoBgS,oBAC9B7iB,UAAW8Q,sBAAsB3K,kBACjC9D,aAAcwO,oBAAoB9B,mBAAmB+B,sBAAsB3K,mBAAmB2I,+DARxExI,QAAAA,UAgBtBggB,+BAIJ,QAAAA,KAAc,MAAAhqB,iBAAAlD,KAAAktB,GAAArN,EAAAlf,KAAAX,MAEVqe,SAAU5G,oBAAoB6G,kBAC9B1X,UAAW8Q,sBAAsB3K,kBACjC9D,aAAcwO,oBAAoB9B,mBAAmB+B,sBAAsB3K,mBAAmB2I,+DARnExI,QAAAA,UAgB3B+f,mCAIJ,QAAAA,KAAc,MAAA/pB,iBAAAlD,KAAAitB,GAAAxM,EAAA9f,KAAAX,MAEVqe,SAAU5G,oBAAoB6G,kBAC9B1X,UAAW8Q,sBAAsB3K,kBACjC9D,aAAcwO,oBAAoB9B,mBAAmB+B,sBAAsB3K,mBAAmB2I,+DAR/DxI,QAAAA,0LAgBxBqI,kCAaX,QAAAA,KAAc,GAAArF,EAAA,OAAAhN,iBAAAlD,KAAAuV,GACZrF,EAAAqS,EAAA5hB,KAAAX,MADYwqB,IAAAplB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MAZR,KAYQmqB,MAAArlB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MAXN,KAWMguB,WAAAlpB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MAVD,KAUCoqB,WAAAtlB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MATD,KASCiuB,kBAAAnpB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MARM,KAQNqS,QAAAvN,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MAPJ,KAOIsqB,SAAAxlB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MANH,KAMGkuB,aAAAppB,IAAA8S,uBAAAhI,IAAA7K,UAAA,EAAA/E,MALC,KAQb4P,EAAK6N,WAAa,GAAI7Q,SAAAA,UACpBtG,UAAW8Q,sBAAsB3K,kBACjC9D,aAAcwO,oBAAoB9B,mBAAmB+B,sBAAsB6G,mBAAmB7I,cAC9F2I,SAAU5G,oBAAoBgS,sBAEhCvZ,EAAKyH,kBAAoB,GAAIzK,SAAAA,UAC3BtG,UAAW8Q,sBAAsB3K,kBACjC9D,aAAcwO,oBAAoB9B,mBAAmB+B,sBAAsB6G,mBAAmB7I,cAC9F2I,SAAU5G,oBAAoBoT,6BAXpB3a,sFAkBd,WAAa,GAAA4a,GAAAC,CACXjnB,MAAAC,gBAAAwR,EAAArT,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAA8qB,EAAA9qB,KAAK+d,iBAAL,KAAA+M,GAAAA,EAAiBrd,aACjB,QAAAsd,EAAA/qB,KAAK2X,wBAAL,KAAAoT,GAAAA,EAAwBtd,6BAO1B,WACE,MAAA1F,uBAAO/H,KAAPwqB,UAOF,SAAOQ,GACDiB,qBAAqBjB,EAAIlT,gBAAgB2W,oBAC3ClnB,sBAAAvH,KAAAwqB,IAAWQ,qBAQf,WACE,MAAAjjB,uBAAO/H,KAAPyqB,YAOF,SAASlqB,GACHP,KAAKwN,aAA4B,KAAbzF,sBAAA/H,KAAAwqB,KACtBuB,qCAEIE,qBAAqB1rB,EAAMuX,gBAAgBoT,UAC7C3jB,sBAAAvH,KAAAyqB,MAAalqB,0BASnB,WACE,MAAAwH,uBAAO/H,KAAPsuB,iBAOF,SAAcI,GACR1uB,KAAKwN,aAA4B,KAAbzF,sBAAA/H,KAAAwqB,KACtBuB,qCAEIE,qBAAqByC,EAAW5W,gBAAgBqL,UAClD5b,sBAAAvH,KAAAsuB,WAAkBI,0BASxB,WACE,MAAA3mB,uBAAO/H,KAAP0qB,iBAOF,SAAcS,GACRnrB,KAAKwN,aAA4B,KAAbzF,sBAAA/H,KAAAwqB,KACtBuB,qCAEIE,qBAAqBd,EAAWrT,gBAAgB6O,aAClDpf,sBAAAvH,KAAA0qB,WAAkBS,iCASxB,WACE,MAAApjB,uBAAO/H,KAAPuuB,wBAQF,SAAqBI,GACnB,IAAI3uB,KAAKwN,aAA+B,KAAfzF,sBAAA/H,KAAAyqB,QAAkC,KAAb1iB,sBAAA/H,KAAAwqB,KAEvC,CACL,GAAI1Q,MACEN,EAAgB2S,kBAAkBnsB,KAAKO,KAC7C,IAAIiZ,EAAe,CAOjB,GANA,OAAIA,OAAJ,KAAIA,GAAAA,EAAeO,UACjBD,EAAQ6U,EAAiBniB,MAAMgN,EAAcO,WAE7CD,EAAM,GAAK6U,EAGR7U,EAAMvO,OAAS,GAAOuO,EAAMvO,QAAUiO,EAAcnX,IAEvD,IAAK,GADCmY,GAAc,GAAIC,QAAOjB,EAAckB,QACpC9N,EAAI,EAAGA,EAAIkN,EAAMvO,OAAQqB,IAChC,GAAA,OAAI4M,OAAJ,KAAIA,GAAAA,EAAeoB,WAAY,CAC7B,GAAMC,GAASf,EAAMlN,GAAGJ,MAAMgN,EAAcoB,WACtB,KAAlBC,EAAOtP,QACJsP,EAAO,GAAGlP,MAAM6O,GAGdK,EAAO,GAAGlP,MAAM,GAAI8O,QAAOjB,EAAcuB,WAC5C+Q,yBAIJA,6BAGF,IAAKhS,EAAMlN,GAAGjB,MAAM6O,IAGlB,GAAiB,KAAbV,EAAMlN,IAAa4M,EAAcyB,OACnC,IAAK,GAAIzP,GAAI,EAAGA,EAAIoB,EAAGpB,IACjBsO,EAAMlN,KAAOkN,EAAMtO,IACrBsgB,6BALNA,8BAaNE,uBAGFzkB,uBAAAvH,KAAAuuB,kBAAyBI,OAEzB7C,8BA/CFC,0DAwDJ,WACE,MAAAhkB,uBAAO/H,KAAP2S,cAOF,SAAWnU,GACLytB,qBAAqBztB,EAAQsZ,gBAAgByT,YAC/ChkB,sBAAAvH,KAAA2S,QAAenU,wBAQnB,WACE,MAAAuJ,uBAAO/H,KAAP4qB,eAOF,SAAYY,GACNxrB,KAAKwN,aAA4B,KAAbzF,sBAAA/H,KAAAwqB,KACtBuB,qCAEIE,qBAAqBT,EAAS1T,gBAAgBoR,cAChD3hB,sBAAAvH,KAAA4qB,SAAgBY,4BAStB,WACE,MAAAzjB,uBAAO/H,KAAPwuB,mBAOF,SAAgBI,GACV5uB,KAAKwN,aAA4B,KAAbzF,sBAAA/H,KAAAwqB,KACtBuB,qCAEIE,qBAAqB2C,EAAa9W,gBAAgB+W,kBAClD,IACFtnB,sBAAAvH,KAAAwuB,aAAoBI,yBAuB1B,WACE5uB,KAAK0d,YAAa,CAClB,IAAMlf,IACJwsB,GAAMhrB,KAAKgrB,GACXzqB,KAAQP,KAAKO,KACbwd,WAAc/d,KAAK+d,WACnB2Q,UAAa1uB,KAAK0uB,UAClBvD,UAAanrB,KAAKmrB,UAClBwD,iBAAoB3uB,KAAK2uB,iBACzBnwB,OAAUwB,KAAKxB,OACfgtB,QAAWxrB,KAAKwrB,QAChBoD,YAAe5uB,KAAK4uB,YACpBjX,kBAAqB3X,KAAK2X,kBAG5B,cADO3X,MAAK0d,WACLlf,SA5RgC2f,QAAAA,wMAmS9B/I,gCAUX,QAAAA,KAAc,GAAA5D,EAAA,OAAAtO,iBAAAlD,KAAAoV,GACZ5D,EAAAmR,EAAAhiB,KAAAX,MADYyrB,KAAArmB,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,MATR,KASQwuB,iBAAA1pB,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,MARI,YAQJyuB,oBAAA3pB,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,MAPO,YAOP0uB,mBAAA5pB,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,MANM,KAMN2uB,cAAA7pB,IAAA8S,uBAAA1G,IAAAnM,UAAA,EAAA/E,MALC,KAQbkR,EAAKoF,MAAQ,GAAImW,mBAHLvb,sFASd,WAAa,GAAAoT,EACX9gB,MAAAC,gBAAAqR,EAAAlT,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAA4kB,EAAA5kB,KAAK4W,YAAL,KAAAgO,GAAAA,EAAYnX,6BAOd,WACE,MAAA1F,uBAAO/H,KAAPyrB,WAOF,SAAOT,GACDiB,qBAAqBjB,EAAIlT,gBAAgB2W,oBAC3ClnB,sBAAAvH,KAAAyrB,KAAWT,+BAQf,WACE,MAAAjjB,uBAAO/H,KAAP8uB,uBAOF,SAAmB1S,GACbpc,KAAKwN,aAA4B,KAAbzF,sBAAA/H,KAAAyrB,MACtBM,qCAEIE,qBAAqB7P,EAAgBtE,gBAAgB6V,aACvDpmB,sBAAAvH,KAAA8uB,iBAAuB1S,kCAS7B,WACE,MAAArU,uBAAO/H,KAAP+uB,0BAOF,SAAsB9S,GAChBjc,KAAKwN,aAA4B,KAAbzF,sBAAA/H,KAAAyrB,MACtBM,qCAEIE,qBAAqBhQ,EAAmBnE,gBAAgBwV,aAC1D/lB,sBAAAvH,KAAA+uB,oBAA0B9S,iCAShC,WACE,MAAAlU,uBAAO/H,KAAPgvB,yBAOF,SAAqBhT,GACfhc,KAAKwN,aAA4B,KAAbzF,sBAAA/H,KAAAyrB,MACtBM,qCAEIE,qBAAqBjQ,EAAkBlE,gBAAgB6O,aACvDuF,oBAAoBlQ,EAChBlE,gBAAgB4V,iBACtBnmB,sBAAAvH,KAAAgvB,mBAAyBhT,4BAS/B,WACE,MAAAjU,uBAAO/H,KAAPivB,oBAOF,SAAgBL,GACV5uB,KAAKwN,aAA4B,KAAbzF,sBAAA/H,KAAAyrB,MACtBM,qCAEIE,qBAAqB2C,EAAa9W,gBAAgB+W,kBAClD,IACFtnB,sBAAAvH,KAAAivB,cAAoBL,yBAmB1B,WACE5uB,KAAK0d,YAAa,CAClB,IAAMlf,IACJwsB,GAAMhrB,KAAKgrB,GACX5O,eAAkBpc,KAAKoc,eACvBH,kBAAqBjc,KAAKic,kBAC1BD,iBAAoBhc,KAAKgc,iBACzB4S,YAAe5uB,KAAK4uB,YACpBhY,MAAS5W,KAAK4W,MAGhB,cADO5W,MAAK0d,WACLlf,SA9J8B2f,QAAAA,iFAqKnC4O,8BAMJ,QAAAA,KAAc,GAAAvM,EAAA,OAAAtd,iBAAAlD,KAAA+sB,GACZvM,EAAA+C,EAAA5iB,KAAAX,MAEM8jB,eAAgBrM,oBAAoBqM,eACpCzhB,IAAK,GACLqK,iBAAkBgL,sBAAsB3K,kBACxCN,oBAAqBgL,oBAAoB9B,mBAAmB+B,sBAAsB3K,mBAAmB2I,cACrGsO,gBAAiBtM,sBAAsBsD,cACvCiJ,mBAAoBxM,oBAAoB9B,mBAAmB+B,sBAAsBsD,eAAetF,cAChGwO,iBAAkBxM,sBAAsByM,mBACxCC,oBAAqB3M,oBAAoB9B,mBAAmB+B,sBAAsByM,oBAAoBzO,cACtGoQ,aAAchO,gBAAgB6O,aAXxBuI,QAAA9pB,IAAA8S,uBAAAsI,IAAAnb,UAAA,EAAA/E,MALJ,KAKIkgB,gFAmBd,WACE,MAAAzY,uBAAO/H,KAAPkvB,cAOF,SAAW/S,GACL8P,qBAAqB9P,EAAQrE,gBAAgB6O,aAC7CuF,oBAAoB/P,EAAQrE,gBAAgBqX,eAC9C5nB,sBAAAvH,KAAAkvB,QAAe/S,yBAgBnB,WACEnc,KAAK0d,YAAa,CAClB,IAAMlf,IACJ2d,OAAUnc,KAAKmc,OACftF,IAAA/S,KAAAC,gBAAAgpB,EAAA7qB,WAAA,MAAAlC,MACAsC,IAAAwB,KAAAC,gBAAAgpB,EAAA7qB,WAAA,MAAAlC,MACAqC,IAAAyB,KAAAC,gBAAAgpB,EAAA7qB,WAAA,MAAAlC,MAGF,cADOA,MAAK0d,WACLlf,SA7DqBqlB,QAAAA,6GAoEnBjK,8BAUX,QAAAA,KAAuC,GAAA8I,GAA3B0M,EAA2BrvB,UAAAwL,OAAA,OAAAjN,KAAAyB,UAAA,IAAAA,UAAA,EAAA,OAAAmD,iBAAAlD,KAAA4Z,GACrC8I,EAAAgB,EAAA/iB,KAAAX,MADqCqvB,SAAAjqB,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MAT5B,KAS4BgvB,WAAAlqB,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MAR3B,KAQ2BivB,YAAAnqB,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,MAP1B,KAO0BkvB,mBAAApqB,IAAA8S,uBAAAwK,IAAArd,UAAA,EAAA/E,UAAA,KAErCiH,sBAAA2Q,uBAAAwK,GAAA2M,SAAgB,IAChB9nB,sBAAA2Q,uBAAAwK,GAAA4M,WAAiB,IACjB/nB,sBAAA2Q,uBAAAwK,GAAA6M,YAAkB,IAClBhoB,sBAAA2Q,uBAAAwK,GAAA8M,mBAA0BJ,GALW1M,iFAYvC,WACE,MAAA3a,uBAAO/H,KAAPqvB,eAOF,SAAYI,GACNzvB,KAAKwN,aAALzF,sBAAoB/H,KAApBwvB,oBACFpP,qBAEI6L,qBAAqBwD,EAAS3X,gBAAgB4X,mBAC9C,IACFnoB,sBAAAvH,KAAAqvB,SAAgBI,yBAStB,WACE,MAAA1nB,uBAAO/H,KAAPsvB,iBAOF,SAAanK,GACPnlB,KAAKwN,aAALzF,sBAAoB/H,KAApBwvB,oBACFpP,qBAEI6L,qBAAqB9G,EAAUrN,gBAAgB6X,eACjDpoB,sBAAAvH,KAAAsvB,WAAiBnK,0BASvB,WACE,MAAApd,uBAAO/H,KAAPuvB,kBAOF,SAAcb,GACR1uB,KAAKwN,aAALzF,sBAAoB/H,KAApBwvB,oBACFpP,qBAEI6L,qBAAqByC,EAAW5W,gBAAgBqL,UAClD5b,sBAAAvH,KAAAuvB,YAAkBb,yBAexB,WACE1uB,KAAK0d,YAAa,CAClB,IAAMlf,IACJixB,QAAWzvB,KAAKyvB,QAChBtK,SAAYnlB,KAAKmlB,SACjBuJ,UAAa1uB,KAAK0uB,UAGpB,cADO1uB,MAAK0d,WACLlf,SAvG4B2f,QAAAA,0EA8G1B7I,4CAMX,QAAAA,KAAc,GAAAmO,EAAA,OAAAvgB,iBAAAlD,KAAAsV,GACZmO,EAAAc,EAAA5jB,KAAAX,MADY0rB,KAAAtmB,IAAA8S,uBAAAuL,IAAApe,UAAA,EAAA/E,MALR,KAKQmjB,4EAQd,WACE,MAAA1b,uBAAO/H,KAAP0rB,WAOF,SAAOV,GACDiB,qBAAqBjB,EAAIlT,gBAAgB2W,oBAC3ClnB,sBAAAvH,KAAA0rB,KAAWV,yBAYf,WACEhrB,KAAK0d,YAAa,CAClB,IAAMlf,IACJwsB,GAAMhrB,KAAKgrB,GAGb,cADOhrB,MAAK0d,WACLlf,SA1C0C2f,QAAAA,0GAiDxC9I,kDAMX,QAAAA,KAAc,GAAAoP,EAAA,OAAAvhB,iBAAAlD,KAAAqV,GACZoP,EAAAC,EAAA/jB,KAAAX,MADY2rB,SAAAvmB,IAAA8S,uBAAAuM,IAAApf,UAAA,EAAA/E,MALH,KAKGmkB,iFAQd,WACE,MAAA1c,uBAAO/H,KAAP2rB,eAOF,SAAYxR,GACN8R,qBAAqB9R,EAASrC,gBAAgBwT,cAChD/jB,sBAAAvH,KAAA2rB,SAAgBxR,yBAYpB,WACEna,KAAK0d,YAAa,CAClB,IAAMlf,IACJ2b,QAAWna,KAAKma,QAGlB,cADOna,MAAK0d,WACLlf,SA1CgD2f,QAAAA,gGAiD9C1F,iBAIX,QAAAA,KAAc,GAAAoM,EAAA,OAAA3hB,iBAAAlD,KAAAyY,GACZoM,EAAAC,EAAAnkB,KAAAX,MAEA6kB,EAAKphB,IAAM,GAAImsB,QAHH/K,sFASd,WAAa,GAAAgL,EACX/rB,MAAAC,gBAAA0U,EAAAvW,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAA6vB,EAAA7vB,KAAKyD,UAAL,KAAAosB,GAAAA,EAAUpiB,mCAaZ,WACEzN,KAAK0d,YAAa,CAClB,IAAMlf,IACJiF,IAAOzD,KAAKyD,IAGd,cADOzD,MAAK0d,WACLlf,SAlCc2f,QAAAA,kDAyCnByR,mBAMJ,QAAAA,KAAc,GAAAE,EAAA,OAAA5sB,iBAAAlD,KAAA4vB,GACZE,EAAAC,EAAApvB,KAAAX,MADYgwB,SAAA5qB,IAAA8S,uBAAA4X,IAAAzqB,UAAA,EAAA/E,MALH,WAQTwvB,EAAKG,cAAgB,GAAIC,oBAHbJ,sFASd,WAAa,GAAAK,EACXrsB,MAAAC,gBAAA6rB,EAAA1tB,WAAA,aAAAlC,MAAAW,KAAAX,MACA,QAAAmwB,EAAAnwB,KAAKiwB,oBAAL,KAAAE,GAAAA,EAAoB1iB,kCAOtB,WACE,MAAA1F,uBAAO/H,KAAPgwB,eAOF,SAAY7W,GACN8S,qBAAqB9S,EAASrB,gBAAgB+T,WAChDtkB,sBAAAvH,KAAAgwB,SAAgB7W,yBAapB,WACEnZ,KAAK0d,YAAa,CAClB,IAAMlf,IACJ2a,QAAWnZ,KAAKmZ,QAGlB,cADOnZ,MAAK0d,WACLlf,SArDU2f,QAAAA,qDA4Df+R,+BAuBJ,QAAAA,KAAc,GAAAE,EAAA,OAAAltB,iBAAAlD,KAAAkwB,GACZE,EAAAC,EAAA1vB,KAAAX,MADYswB,UAAAlrB,IAAA8S,uBAAAkY,IAAA/qB,UAAA,EAAA/E,MAtBF,YAsBEiwB,UAAAnrB,IAAA8S,uBAAAkY,IAAA/qB,UAAA,EAAA/E,MArBF,YAqBE0G,gBAAAkR,uBAAAkY,GAAA,SAAA,QAAAI,KAAAttB,gBAAAlD,KAAAwwB,GAAAxpB,gBAAAhH,KAAA,iBAdK,SAACywB,GAAD,MAAa,cAclBzpB,gBAAAkR,uBAAAkY,GAAA,OAAA,QAAAM,KAAAxtB,gBAAAlD,KAAA0wB,GAAA1pB,gBAAAhH,KAAA,iBANK,SAACywB,GAAD,MAAa,cAMlBL,kFAQd,WACE,MAAAroB,uBAAO/H,KAAPswB,gBAOF,SAAaK,GACXvQ,2CAOF,WACE,MAAArY,uBAAO/H,KAAPuwB,gBAOF,SAAaI,GACXvQ,2CAaF,WACEpgB,KAAK0d,YAAa,CAClB,IAAMlf,IACJoyB,SAAY5wB,KAAK4wB,SACjBC,SAAY7wB,KAAA,SAGd,cADOA,MAAK0d,WACLlf,SA5EsB2f,QAAAA;;q0BCvmDjC,IAAMxc,SACJgF,WAAY,OACZE,YAAa,QACbM,sBAAuB,EACvBiB,kBAAmB,EACnBS,iBAAkB,EAClBkC,gBAAiB,EACjBxC,eAAgB,EAChBqC,kBAAmB,EACnB3E,gBAAiB,EACjB6qB,eAAgB,EAChBzpB,UACET,UAAW,EACXqC,aAAc,aAIZjE,SAEJ2X,aAAc,iGACdqL,cAAe,oHACflE,eAAgB,cAChBxF,kBAAmB,wBACnBmL,oBAAqB,kBACrBoB,2BAA4B,UAC5B/K,sBAAuB,mDACvBrB,4BAA6B,4BAC7B8L,sBAAuB,sFAEvB5U,oBACEob,KACEtb,aAAc,oBACdC,cAAe,kGAEjBsb,KACEvb,aAAc,yBACdC,cAAe,kGAEjBub,KACExb,aAAc,+BACdC,cAAe,wKAEjBwb,KACEzb,aAAc,2CACdC,cAAe,kKAEjByb,KACE1b,aAAc,kBACdC,cAAe,yEAEjB0b,KACE3b,aAAc,wBACdC,cAAe,qNAEjB2b,KACE5b,aAAc,0CACdC,cAAe,4IAEjB4b,KACE7b,aAAc,uBACdC,cAAe,2EAEjB6b,KACE9b,aAAc,wBACdC,cAAe,+EAEjB8b,KACE/b,aAAc,sBACdC,cAAe,uHAEjB+b,KACEhc,aAAc,6BACdC,cAAe,iIAEjBgc,KACEjc,aAAc,wCACdC,cAAe,6LAKf+G,KAAIrZ,cAAAA,iBACL4B,UACD2X,aAAc,4GACd8B,4BAA6B,yFAC7BqB,sBAAuB,wEACvBa,8BAA+B,4IAC/B6C,eAAgB,oBAChBgB,yBAA0B,sBAC1BhC,eAAgB,0DAIdlW,WAEJqQ,aAAc,uTACd2B,kBAAmB,6BACnBwF,eAAgB,qBAChB2F,oBAAqB,yEACrBoB,2BAA4B,UAC5B/K,sBAAuB,mDACvBrB,4BAA6B,uDAC7B8L,sBAAuB,uGAEvB5U,oBACEgc,GACElc,aAAc,WACdC,cAAe,4DAEjBqb,KACEtb,aAAc,oBACdC,cAAe,gGAEjBkc,KACEnc,aAAc,iCACdC,cAAe,oDAEjBmc,KACEpc,aAAc,sBACdC,cAAe,oEAEjBoc,KACErc,aAAc,8BACdC,cAAe,mEAEjBqc,KACEtc,aAAc,8BACdC,cAAe,mDAEjBsc,KACEvc,aAAc,oCACdC,cAAe,+EAEjBuc,KACExc,aAAc,gCACdC,cAAe,kEAEjBwc,KACEzc,aAAc,sCACdC,cAAe,8EAEjByc,KACE1c,aAAc,kCACdC,cAAe,4EAEjB0c,KACE3c,aAAc,mCACdC,cAAe,8EAEjB2c,KACE5c,aAAc,+BACdC,cAAe,4EAEjB4c,KACE7c,aAAc,+BACdC,cAAe,4EAEjB6c,KACE9c,aAAc,2BACdC,cAAe,0EAEjBsb,KACEvb,aAAc,yBACdC,cAAe,+JAEjByb,KACE1b,aAAc,sBACdC,cAAe,8HAEjB8c,KACE/c,aAAc,sBACdC,cAAe,8HAEjB+c,KACEhd,aAAc,yBACdC,cAAe,4HAEjB0b,KACE3b,aAAc,+BACdC,cAAe,uGAEjB2b,KACE5b,aAAc,mCACdC,cAAe,yMAEjB4b,KACE7b,aAAc,2CACdC,cAAe,qLAEjB6b,KACE9b,aAAc,kCACdC,cAAe,wEAEjB8b,KACE/b,aAAc,mCACdC,cAAe,4EAEjBgd,KACEjd,aAAc,mCACdC,cAAe,oHAEjB+b,KACEhc,aAAc,wCACdC,cAAe,8HAEjBgc,KACEjc,aAAc,wCACdC,cAAe,6LAKf7Q,cACJlD,OAAQA,OACRqD,QAASA,QACTyX,KAAMA,KACNnQ,UAAWA,oBAGEzH;;q0BC5Nf,IAAMlD,SACJ0H,QAAS,IACTspB,sBAAuB,IACvB3qB,YAAa,IACbE,WAAY,IACZ0qB,oBAAqB,IACrBjqB,wBAAyB,IACzBC,qBAAsB,IACtBU,qBAAsB,IACtBC,oBAAqB,IACrBI,kBAAmB,IACnBC,iBAAkB,IAClBK,mBAAoB,IACpBC,kBAAmB,IACnB2oB,eAAgB,IAChB9kB,eAAgB,IAChBC,YAAa,IACb8kB,oBAAqB,IACrBpZ,oBAAqB,IACrBqZ,uBAAwB,IACxBpmB,qBAAsB,IACtBqmB,sBAAuB,IACvBllB,sBAAuB,IACvByQ,kBAAmB,IACnBxR,kBAAmB,IACnBia,mBAAoB,IACpBhM,cAAe,IACfmJ,mBAAoB,IACpBxK,2BAA4B,KAGxB3U,QAAO5B,cAAAA,iBACRzB,SACD2H,qBAAsB,IACtBK,kBAAmB,IACnBM,mBAAoB,IACpB4oB,eAAgB,IAChB9kB,eAAgB,IAChBC,YAAa,IACbrB,qBAAsB,IACtBqmB,sBAAuB,IACvBllB,sBAAuB,IACvByQ,kBAAmB,IACnBxR,kBAAmB,IACnBia,mBAAoB,IACpBhM,cAAe,IACfmJ,mBAAoB,IACpBxK,2BAA4B,MAI1BrN,UAASlJ,cAAAA,iBACVzB,SACDgxB,sBAAuB,IACvB3qB,YAAa,IACbE,WAAY,IACZ0qB,oBAAqB,IACrBjqB,wBAAyB,IACzBsqB,sBAAuB,IACvB3pB,qBAAsB,IACtBC,oBAAqB,IACrBI,kBAAmB,IACnBC,iBAAkB,IAClBK,mBAAoB,IACpBC,kBAAmB,IACnB2oB,eAAgB,IAChBC,oBAAqB,IACrBpZ,oBAAqB,IACrBqZ,uBAAwB,IACxBpmB,qBAAsB,IACtBqmB,sBAAuB,IACvBllB,sBAAuB,IACvBf,kBAAmB,IACnBia,mBAAoB,IACpBhM,cAAe,IACfmJ,mBAAoB,IACpBxK,2BAA4B,MAI1B5U,YACJC,QAASA,QACTsH,UAAWA,oBAGEvH;;0FCtFf,IAAM2W,iBACJwX,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMlM,GAAM,KAClEmM,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","// @flow\nimport Scorm12API from './Scorm12API';\nimport {\n  CMI,\n  CMIAttemptRecordsObject,\n  CMIEvaluationCommentsObject,\n  CMITriesObject,\n} from './cmi/aicc_cmi';\nimport {NAV} from './cmi/scorm12_cmi';\n\n/**\n * The AICC API class\n */\nexport default class AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (this.stringMatches(CMIElement, 'cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+')) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (this.stringMatches(CMIElement,\n          'cmi\\\\.student_data\\\\.tries\\\\.\\\\d+')) {\n        newChild = new CMITriesObject();\n      } else if (this.stringMatches(CMIElement,\n          'cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+')) {\n        newChild = new CMIAttemptRecordsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n","// @flow\nimport { CMIArray } from './cmi/common'\nimport { ValidationError } from './exceptions'\nimport ErrorCodes from './constants/error_codes'\nimport APIConstants from './constants/api_constants'\nimport { unflatten } from './utilities'\nimport debounce from 'lodash.debounce'\n\nconst global_constants = APIConstants.global\nconst scorm12_error_codes = ErrorCodes.scorm12\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on it's own.\n */\nexport default class BaseAPI {\n    #timeout\n    #error_codes\n    #settings = {\n        autocommit: false,\n        autocommitSeconds: 10,\n        asyncCommit: false,\n        sendBeaconCommit: false,\n        lmsCommitUrl: false,\n        dataCommitFormat: 'json', // valid formats are 'json' or 'flattened', 'params'\n        commitRequestDataType: 'application/json;charset=UTF-8',\n        autoProgress: false,\n        logLevel: global_constants.LOG_LEVEL_ERROR,\n        selfReportSessionTime: false,\n        alwaysSendTotalTime: false,\n        responseHandler: function (xhr) {\n            let result\n            if (typeof xhr !== 'undefined') {\n                result = JSON.parse(xhr.responseText)\n                if (result === null || !{}.hasOwnProperty.call(result, 'result')) {\n                    result = {}\n                    if (xhr.status === 200) {\n                        result.result = global_constants.SCORM_TRUE\n                        result.errorCode = 0\n                    } else {\n                        result.result = global_constants.SCORM_FALSE\n                        result.errorCode = 101\n                    }\n                }\n            }\n            return result\n        },\n        requestHandler: function (params) {\n            return params\n        },\n    }\n    cmi\n    startingData: {}\n\n    /**\n     * Constructor for Base API class. Sets some shared API fields, as well as\n     * sets up options for the API.\n     * @param {object} error_codes\n     * @param {object} settings\n     */\n    constructor(error_codes, settings) {\n        if (new.target === BaseAPI) {\n            throw new TypeError('Cannot construct BaseAPI instances directly')\n        }\n        this.currentState = global_constants.STATE_NOT_INITIALIZED\n        this.lastError = global_constants.NO_ERROR\n        this.listenerArray = []\n\n        this.#timeout = null\n        this.#error_codes = error_codes\n\n        this.settings = settings\n        this.apiLogLevel = this.settings.logLevel\n        this.selfReportSessionTime = this.settings.selfReportSessionTime\n    }\n\n    /**\n     * Initialize the API\n     * @param {string} callbackName\n     * @param {string} initializeMessage\n     * @param {string} terminationMessage\n     * @return {string}\n     */\n    initialize(callbackName: String, initializeMessage?: String, terminationMessage?: String) {\n        let returnValue = global_constants.SCORM_FALSE\n\n        if (this.isInitialized()) {\n            this.throwSCORMError(this.#error_codes.INITIALIZED, initializeMessage)\n        } else if (this.isTerminated()) {\n            this.throwSCORMError(this.#error_codes.TERMINATED, terminationMessage)\n        } else {\n            if (this.selfReportSessionTime) {\n                this.cmi.setStartTime()\n            }\n\n            this.currentState = global_constants.STATE_INITIALIZED\n            this.lastError = global_constants.NO_ERROR\n            returnValue = global_constants.SCORM_TRUE\n            this.processListeners(callbackName)\n        }\n\n        this.apiLog(callbackName, null, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n        this.clearSCORMError(returnValue)\n\n        return returnValue\n    }\n\n    /**\n     * Getter for #error_codes\n     * @return {object}\n     */\n    get error_codes() {\n        return this.#error_codes\n    }\n\n    /**\n     * Getter for #settings\n     * @return {object}\n     */\n    get settings() {\n        return this.#settings\n    }\n\n    /**\n     * Setter for #settings\n     * @param {object} settings\n     */\n    set settings(settings: Object) {\n        this.#settings = { ...this.#settings, ...settings }\n    }\n\n    /**\n     * Terminates the current run of the API\n     * @param {string} callbackName\n     * @param {boolean} checkTerminated\n     * @return {string}\n     */\n    terminate(callbackName: String, checkTerminated: boolean) {\n        let returnValue = global_constants.SCORM_FALSE\n\n        if (\n            this.checkState(\n                checkTerminated,\n                this.#error_codes.TERMINATION_BEFORE_INIT,\n                this.#error_codes.MULTIPLE_TERMINATION\n            )\n        ) {\n            this.currentState = global_constants.STATE_TERMINATED\n\n            try {\n                const result = this.storeData(callbackName, true)\n                if (\n                    !this.settings.sendBeaconCommit &&\n                    !this.settings.asyncCommit &&\n                    typeof result.errorCode !== 'undefined' &&\n                    result.errorCode > 0\n                ) {\n                    this.throwSCORMError(result.errorCode)\n                }\n                returnValue =\n                    typeof result !== 'undefined' && result.result ? result.result : global_constants.SCORM_FALSE\n\n                if (checkTerminated) this.lastError = global_constants.NO_ERROR\n\n                returnValue = global_constants.SCORM_TRUE\n                this.processListeners(callbackName)\n            } catch (e) {\n                if (e instanceof ValidationError) {\n                    this.lastError = {\n                        errorCode: e.errorCode,\n                        errorMessage: e.message,\n                    }\n                    returnValue = global_constants.SCORM_FALSE\n                } else {\n                    if (e.message) {\n                        console.error(e.message)\n                    } else {\n                        console.error(e)\n                    }\n                    this.throwSCORMError(this.#error_codes.GENERAL)\n                }\n            }\n        }\n\n        this.apiLog(callbackName, null, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n        this.clearSCORMError(returnValue)\n\n        return returnValue\n    }\n\n    /**\n     * Get the value of the CMIElement.\n     *\n     * @param {string} callbackName\n     * @param {boolean} checkTerminated\n     * @param {string} CMIElement\n     * @return {string}\n     */\n    getValue(callbackName: String, checkTerminated: boolean, CMIElement: String) {\n        let returnValue\n\n        if (\n            this.checkState(\n                checkTerminated,\n                this.#error_codes.RETRIEVE_BEFORE_INIT,\n                this.#error_codes.RETRIEVE_AFTER_TERM\n            )\n        ) {\n            if (checkTerminated) this.lastError = global_constants.NO_ERROR\n            returnValue = this.getCMIValue(CMIElement)\n            this.processListeners(callbackName, CMIElement)\n        }\n\n        this.apiLog(callbackName, CMIElement, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n        this.clearSCORMError(returnValue)\n\n        return returnValue\n    }\n\n    /**\n     * Sets the value of the CMIElement.\n     *\n     * @param {string} callbackName\n     * @param {string} commitCallback\n     * @param {boolean} checkTerminated\n     * @param {string} CMIElement\n     * @param {*} value\n     * @return {string}\n     */\n    setValue(callbackName: String, commitCallback: String, checkTerminated: boolean, CMIElement, value) {\n        if (value !== undefined) {\n            value = String(value)\n        }\n        let returnValue = global_constants.SCORM_FALSE\n\n        if (this.checkState(checkTerminated, this.#error_codes.STORE_BEFORE_INIT, this.#error_codes.STORE_AFTER_TERM)) {\n            if (checkTerminated) this.lastError = global_constants.NO_ERROR\n            try {\n                returnValue = this.setCMIValue(CMIElement, value)\n            } catch (e) {\n                if (e instanceof ValidationError) {\n                    this.lastError = {\n                        errorCode: e.errorCode,\n                        errorMessage: e.message,\n                    }\n                    returnValue = global_constants.SCORM_FALSE\n                } else {\n                    if (e.message) {\n                        console.error(e.message)\n                    } else {\n                        console.error(e)\n                    }\n                    this.throwSCORMError(this.#error_codes.GENERAL)\n                }\n            }\n            this.processListeners(callbackName, CMIElement, value)\n        }\n\n        if (returnValue === undefined) {\n            returnValue = global_constants.SCORM_FALSE\n        }\n\n        // If we didn't have any errors while setting the data, go ahead and\n        // schedule a commit, if autocommit is turned on\n        if (String(this.lastError.errorCode) === '0') {\n            if (this.settings.autocommit && !this.#timeout) {\n                this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback)\n            }\n        }\n\n        this.apiLog(\n            callbackName,\n            `${CMIElement} : ${value}`,\n            'returned: ' + returnValue,\n            global_constants.LOG_LEVEL_INFO\n        )\n        this.clearSCORMError(returnValue)\n\n        return returnValue\n    }\n\n    /**\n     * Orders LMS to store all content parameters\n     * @param {string} callbackName\n     * @param {boolean} checkTerminated\n     * @return {string}\n     */\n    commit(callbackName: String, checkTerminated: boolean) {\n        this.clearScheduledCommit()\n\n        let returnValue = global_constants.SCORM_FALSE\n\n        if (\n            this.checkState(checkTerminated, this.#error_codes.COMMIT_BEFORE_INIT, this.#error_codes.COMMIT_AFTER_TERM)\n        ) {\n            try {\n                const result = this.storeData(callbackName, false)\n                if (\n                    !this.settings.sendBeaconCommit &&\n                    !this.settings.asyncCommit &&\n                    result.errorCode &&\n                    result.errorCode > 0\n                ) {\n                    this.throwSCORMError(result.errorCode)\n                }\n                returnValue =\n                    typeof result !== 'undefined' && result.result ? result.result : global_constants.SCORM_FALSE\n\n                // this.apiLog(callbackName, 'HttpRequest', ' Result: ' + returnValue,\n                //    global_constants.LOG_LEVEL_DEBUG);\n\n                if (checkTerminated) this.lastError = global_constants.NO_ERROR\n\n                this.processListeners(callbackName)\n            } catch (e) {\n                if (e instanceof ValidationError) {\n                    this.lastError = {\n                        errorCode: e.errorCode,\n                        errorMessage: e.message,\n                    }\n                    returnValue = global_constants.SCORM_FALSE\n                } else {\n                    if (e.message) {\n                        console.error(e.message)\n                    } else {\n                        console.error(e)\n                    }\n                    this.throwSCORMError(this.#error_codes.GENERAL)\n                }\n            }\n        }\n\n        this.apiLog(callbackName, null, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n        this.clearSCORMError(returnValue)\n\n        return returnValue\n    }\n\n    /**\n     * Returns last error code\n     * @param {string} callbackName\n     * @return {string}\n     */\n    getLastError(callbackName: String) {\n        const returnValue = String(this.lastError.errorCode)\n\n        this.processListeners(callbackName)\n\n        this.apiLog(callbackName, null, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n\n        return returnValue\n    }\n\n    /**\n     * Returns the errorNumber error description\n     *\n     * @param {string} callbackName\n     * @param {(string|number)} CMIErrorCode\n     * @return {string}\n     */\n    getErrorString(callbackName: String, CMIErrorCode) {\n        let returnValue = ''\n\n        if (CMIErrorCode !== null && CMIErrorCode !== '') {\n            returnValue = this.getLmsErrorMessageDetails(CMIErrorCode)\n            this.processListeners(callbackName)\n        }\n\n        this.apiLog(callbackName, null, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n\n        return returnValue\n    }\n\n    /**\n     * Returns a comprehensive description of the errorNumber error.\n     *\n     * @param {string} callbackName\n     * @param {(string|number)} CMIErrorCode\n     * @return {string}\n     */\n    getDiagnostic(callbackName: String, CMIErrorCode) {\n        let returnValue = ''\n\n        if (CMIErrorCode !== null && CMIErrorCode !== '') {\n            returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true)\n            this.processListeners(callbackName)\n        }\n\n        this.apiLog(callbackName, null, 'returned: ' + returnValue, global_constants.LOG_LEVEL_INFO)\n\n        return returnValue\n    }\n\n    /**\n     * Checks the LMS state and ensures it has been initialized.\n     *\n     * @param {boolean} checkTerminated\n     * @param {number} beforeInitError\n     * @param {number} afterTermError\n     * @return {boolean}\n     */\n    checkState(checkTerminated: boolean, beforeInitError: number, afterTermError?: number) {\n        if (this.isNotInitialized()) {\n            this.throwSCORMError(beforeInitError)\n            return false\n        } else if (checkTerminated && this.isTerminated()) {\n            this.throwSCORMError(afterTermError)\n            return false\n        }\n\n        return true\n    }\n\n    /**\n     * Logging for all SCORM actions\n     *\n     * @param {string} functionName\n     * @param {string} CMIElement\n     * @param {string} logMessage\n     * @param {number}messageLevel\n     */\n    apiLog(functionName: String, CMIElement: String, logMessage: String, messageLevel: number) {\n        logMessage = this.formatMessage(functionName, CMIElement, logMessage)\n\n        if (messageLevel >= this.apiLogLevel) {\n            switch (messageLevel) {\n                case global_constants.LOG_LEVEL_ERROR:\n                    console.error(logMessage)\n                    break\n                case global_constants.LOG_LEVEL_WARNING:\n                    console.warn(logMessage)\n                    break\n                case global_constants.LOG_LEVEL_INFO:\n                    console.info(logMessage)\n                    break\n                case global_constants.LOG_LEVEL_DEBUG:\n                    if (console.debug) {\n                        console.debug(logMessage)\n                    } else {\n                        console.log(logMessage)\n                    }\n                    break\n            }\n        }\n        const logObject = {\n            date: new Date().toISOString(),\n            message: logMessage,\n            error: `(${this.lastError.errorMessage})`,\n        }\n        this.processListeners('apiLog', CMIElement, logObject)\n    }\n\n    /**\n     * Formats the SCORM messages for easy reading\n     *\n     * @param {string} functionName\n     * @param {string} CMIElement\n     * @param {string} message\n     * @return {string}\n     */\n    formatMessage(functionName: String, CMIElement: String, message: String) {\n        CMIElement = CMIElement || ''\n        const baseLength = 20\n        let messageString = ''\n\n        messageString += functionName\n\n        if (CMIElement) {\n            messageString += ' : '\n        }\n\n        const CMIElementBaseLength = 70\n\n        messageString += CMIElement\n\n        const fillChars = CMIElementBaseLength - messageString.length\n\n        for (let j = 0; j < fillChars; j++) {\n            messageString += ' '\n        }\n\n        if (message) {\n            messageString += message\n        }\n\n        return messageString\n    }\n\n    /**\n     * Checks to see if {str} contains {tester}\n     *\n     * @param {string} str String to check against\n     * @param {string} tester String to check for\n     * @return {boolean}\n     */\n    stringMatches(str: String, tester: String) {\n        return str && tester && str.match(tester)\n    }\n\n    /**\n     * Check to see if the specific object has the given property\n     * @param {*} refObject\n     * @param {string} attribute\n     * @return {boolean}\n     * @private\n     */\n    _checkObjectHasProperty(refObject, attribute: String) {\n        return (\n            Object.hasOwnProperty.call(refObject, attribute) ||\n            Object.getOwnPropertyDescriptor(Object.getPrototypeOf(refObject), attribute) ||\n            attribute in refObject\n        )\n    }\n\n    /**\n     * Returns the message that corresponds to errorNumber\n     * APIs that inherit BaseAPI should override this function\n     *\n     * @param {(string|number)} _errorNumber\n     * @param {boolean} _detail\n     * @return {string}\n     * @abstract\n     */\n    getLmsErrorMessageDetails(_errorNumber, _detail) {\n        throw new Error('The getLmsErrorMessageDetails method has not been implemented')\n    }\n\n    /**\n     * Gets the value for the specific element.\n     * APIs that inherit BaseAPI should override this function\n     *\n     * @param {string} _CMIElement\n     * @return {string}\n     * @abstract\n     */\n    getCMIValue(_CMIElement) {\n        throw new Error('The getCMIValue method has not been implemented')\n    }\n\n    /**\n     * Sets the value for the specific element.\n     * APIs that inherit BaseAPI should override this function\n     *\n     * @param {string} _CMIElement\n     * @param {any} _value\n     * @return {string}\n     * @abstract\n     */\n    setCMIValue(_CMIElement, _value) {\n        throw new Error('The setCMIValue method has not been implemented')\n    }\n\n    /**\n     * Shared API method to set a valid for a given element.\n     *\n     * @param {string} methodName\n     * @param {boolean} scorm2004\n     * @param {string} CMIElement\n     * @param {*} value\n     * @return {string}\n     */\n    _commonSetCMIValue(methodName: String, scorm2004: boolean, CMIElement, value) {\n        if (!CMIElement || CMIElement === '') {\n            return global_constants.SCORM_FALSE\n        }\n\n        const structure = CMIElement.split('.')\n        let refObject = this\n        let returnValue = global_constants.SCORM_FALSE\n        let foundFirstIndex = false\n\n        const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`\n        const invalidErrorCode = scorm2004 ? this.#error_codes.UNDEFINED_DATA_MODEL : this.#error_codes.GENERAL\n\n        for (let i = 0; i < structure.length; i++) {\n            const attribute = structure[i]\n            if (i === structure.length - 1) {\n                if (\n                    scorm2004 &&\n                    attribute.substr(0, 8) === '{target=' &&\n                    typeof refObject._isTargetValid == 'function'\n                ) {\n                    this.throwSCORMError(this.#error_codes.READ_ONLY_ELEMENT)\n                } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n                    this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                } else {\n                    if (this.isInitialized() && this.stringMatches(CMIElement, '\\\\.correct_responses\\\\.\\\\d+')) {\n                        this.validateCorrectResponse(CMIElement, value)\n                    }\n\n                    if (!scorm2004 || this.lastError.errorCode === 0) {\n                        refObject[attribute] = value\n                        returnValue = global_constants.SCORM_TRUE\n                    }\n                }\n            } else {\n                refObject = refObject[attribute]\n                if (!refObject) {\n                    this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                    break\n                }\n\n                if (refObject instanceof CMIArray) {\n                    const index = parseInt(structure[i + 1], 10)\n                    // SCO is trying to set an item on an array\n                    if (!isNaN(index)) {\n                        const item = refObject.childArray[index]\n\n                        if (item) {\n                            refObject = item\n                            foundFirstIndex = true\n                        } else {\n                            const newChild = this.getChildElement(CMIElement, value, foundFirstIndex)\n                            foundFirstIndex = true\n\n                            if (!newChild) {\n                                this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                            } else {\n                                if (refObject.initialized) newChild.initialize()\n\n                                refObject.childArray.push(newChild)\n                                refObject = newChild\n                            }\n                        }\n\n                        // Have to update i value to skip the array position\n                        i++\n                    }\n                }\n            }\n        }\n\n        if (returnValue === global_constants.SCORM_FALSE) {\n            this.apiLog(\n                methodName,\n                null,\n                `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n                global_constants.LOG_LEVEL_WARNING\n            )\n        }\n\n        return returnValue\n    }\n\n    /**\n     * Abstract method for validating that a response is correct.\n     *\n     * @param {string} _CMIElement\n     * @param {*} _value\n     */\n    validateCorrectResponse(_CMIElement, _value) {\n        // just a stub method\n    }\n\n    /**\n     * Gets or builds a new child element to add to the array.\n     * APIs that inherit BaseAPI should override this method.\n     *\n     * @param {string} _CMIElement - unused\n     * @param {*} _value - unused\n     * @param {boolean} _foundFirstIndex - unused\n     * @return {*}\n     * @abstract\n     */\n    getChildElement(_CMIElement, _value, _foundFirstIndex) {\n        throw new Error('The getChildElement method has not been implemented')\n    }\n\n    /**\n     * Gets a value from the CMI Object\n     *\n     * @param {string} methodName\n     * @param {boolean} scorm2004\n     * @param {string} CMIElement\n     * @return {*}\n     */\n    _commonGetCMIValue(methodName: String, scorm2004: boolean, CMIElement) {\n        if (!CMIElement || CMIElement === '') {\n            return ''\n        }\n\n        const structure = CMIElement.split('.')\n        let refObject = this\n        let attribute = null\n\n        const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`\n        const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`\n        const invalidErrorCode = scorm2004 ? this.#error_codes.UNDEFINED_DATA_MODEL : this.#error_codes.GENERAL\n\n        for (let i = 0; i < structure.length; i++) {\n            attribute = structure[i]\n\n            if (!scorm2004) {\n                if (i === structure.length - 1) {\n                    if (!this._checkObjectHasProperty(refObject, attribute)) {\n                        this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                        return\n                    }\n                }\n            } else {\n                if (String(attribute).substr(0, 8) === '{target=' && typeof refObject._isTargetValid == 'function') {\n                    const target = String(attribute).substr(8, String(attribute).length - 9)\n                    return refObject._isTargetValid(target)\n                } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n                    this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                    return\n                }\n            }\n\n            refObject = refObject[attribute]\n            if (refObject === undefined) {\n                this.throwSCORMError(invalidErrorCode, invalidErrorMessage)\n                break\n            }\n\n            if (refObject instanceof CMIArray) {\n                const index = parseInt(structure[i + 1], 10)\n\n                // SCO is trying to set an item on an array\n                if (!isNaN(index)) {\n                    const item = refObject.childArray[index]\n\n                    if (item) {\n                        refObject = item\n                    } else {\n                        this.throwSCORMError(this.#error_codes.VALUE_NOT_INITIALIZED, uninitializedErrorMessage)\n                        break\n                    }\n\n                    // Have to update i value to skip the array position\n                    i++\n                }\n            }\n        }\n\n        if (refObject === null || refObject === undefined) {\n            if (!scorm2004) {\n                if (attribute === '_children') {\n                    this.throwSCORMError(scorm12_error_codes.CHILDREN_ERROR)\n                } else if (attribute === '_count') {\n                    this.throwSCORMError(scorm12_error_codes.COUNT_ERROR)\n                }\n            }\n        } else {\n            return refObject\n        }\n    }\n\n    /**\n     * Returns true if the API's current state is STATE_INITIALIZED\n     *\n     * @return {boolean}\n     */\n    isInitialized() {\n        return this.currentState === global_constants.STATE_INITIALIZED\n    }\n\n    /**\n     * Returns true if the API's current state is STATE_NOT_INITIALIZED\n     *\n     * @return {boolean}\n     */\n    isNotInitialized() {\n        return this.currentState === global_constants.STATE_NOT_INITIALIZED\n    }\n\n    /**\n     * Returns true if the API's current state is STATE_TERMINATED\n     *\n     * @return {boolean}\n     */\n    isTerminated() {\n        return this.currentState === global_constants.STATE_TERMINATED\n    }\n\n    /**\n     * Provides a mechanism for attaching to a specific SCORM event\n     *\n     * @param {string} listenerName\n     * @param {function} callback\n     */\n    on(listenerName: String, callback: function) {\n        if (!callback) return\n\n        const listenerFunctions = listenerName.split(' ')\n        for (let i = 0; i < listenerFunctions.length; i++) {\n            const listenerSplit = listenerFunctions[i].split('.')\n            if (listenerSplit.length === 0) return\n\n            const functionName = listenerSplit[0]\n\n            let CMIElement = null\n            if (listenerSplit.length > 1) {\n                CMIElement = listenerName.replace(functionName + '.', '')\n            }\n\n            this.listenerArray.push({\n                functionName: functionName,\n                CMIElement: CMIElement,\n                callback: callback,\n            })\n\n            // this.apiLog('on', functionName, `Added event listener: ${this.listenerArray.length}`, global_constants.LOG_LEVEL_INFO);\n        }\n    }\n\n    /**\n     * Provides a mechanism for detaching a specific SCORM event listener\n     *\n     * @param {string} listenerName\n     * @param {function} callback\n     */\n    off(listenerName: String, callback: function) {\n        if (!callback) return\n\n        const listenerFunctions = listenerName.split(' ')\n        for (let i = 0; i < listenerFunctions.length; i++) {\n            const listenerSplit = listenerFunctions[i].split('.')\n            if (listenerSplit.length === 0) return\n\n            const functionName = listenerSplit[0]\n\n            let CMIElement = null\n            if (listenerSplit.length > 1) {\n                CMIElement = listenerName.replace(functionName + '.', '')\n            }\n\n            const removeIndex = this.listenerArray.findIndex(\n                (obj) => obj.functionName === functionName && obj.CMIElement === CMIElement && obj.callback === callback\n            )\n            if (removeIndex !== -1) {\n                this.listenerArray.splice(removeIndex, 1)\n                // this.apiLog('off', functionName, `Removed event listener: ${this.listenerArray.length}`, global_constants.LOG_LEVEL_INFO);\n            }\n        }\n    }\n\n    /**\n     * Provides a mechanism for clearing all listeners from a specific SCORM event\n     *\n     * @param {string} listenerName\n     */\n    clear(listenerName: String) {\n        const listenerFunctions = listenerName.split(' ')\n        for (let i = 0; i < listenerFunctions.length; i++) {\n            const listenerSplit = listenerFunctions[i].split('.')\n            if (listenerSplit.length === 0) return\n\n            const functionName = listenerSplit[0]\n\n            let CMIElement = null\n            if (listenerSplit.length > 1) {\n                CMIElement = listenerName.replace(functionName + '.', '')\n            }\n\n            this.listenerArray = this.listenerArray.filter(\n                (obj) => obj.functionName !== functionName && obj.CMIElement !== CMIElement\n            )\n        }\n    }\n\n    /**\n     * Processes any 'on' listeners that have been created\n     *\n     * @param {string} functionName\n     * @param {string} CMIElement\n     * @param {*} value\n     */\n    processListeners(functionName: String, CMIElement: String, value: any) {\n        for (let i = 0; i < this.listenerArray.length; i++) {\n            const listener = this.listenerArray[i]\n            const functionsMatch = listener.functionName === functionName\n            const listenerHasCMIElement = !!listener.CMIElement\n            let CMIElementsMatch = false\n            if (\n                CMIElement &&\n                listener.CMIElement &&\n                listener.CMIElement.substring(listener.CMIElement.length - 1) === '*'\n            ) {\n                CMIElementsMatch =\n                    CMIElement.indexOf(listener.CMIElement.substring(0, listener.CMIElement.length - 1)) === 0\n            } else {\n                CMIElementsMatch = listener.CMIElement === CMIElement\n            }\n\n            if (functionsMatch && (!listenerHasCMIElement || CMIElementsMatch)) {\n                listener.callback(CMIElement, value)\n            }\n        }\n    }\n\n    /**\n     * Throws a SCORM error\n     *\n     * @param {number} errorNumber\n     * @param {string} message\n     */\n    throwSCORMError(errorNumber: number, message: String) {\n        if (!message) {\n            message = this.getLmsErrorMessageDetails(errorNumber)\n        }\n\n        this.apiLog('throwSCORMError', null, errorNumber + ': ' + message, global_constants.LOG_LEVEL_ERROR)\n\n        this.lastError = {\n            errorCode: errorNumber,\n            errorMessage: message,\n        }\n    }\n\n    /**\n     * Clears the last SCORM error code on success.\n     *\n     * @param {string} success\n     */\n    clearSCORMError(success: String) {\n        if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n            this.lastError = global_constants.NO_ERROR\n        }\n    }\n\n    /**\n     * Attempts to store the data to the LMS, logs data if no LMS configured\n     * APIs that inherit BaseAPI should override this function\n     *\n     * @param {boolean} _calculateTotalTime\n     * @return {string}\n     * @abstract\n     */\n    storeData(_calculateTotalTime) {\n        throw new Error('The storeData method has not been implemented')\n    }\n\n    /**\n     * Load the CMI from a flattened JSON object\n     * @param {object} json\n     * @param {string} CMIElement\n     */\n    loadFromFlattenedJSON(json, CMIElement) {\n        if (!this.isNotInitialized()) {\n            console.error('loadFromFlattenedJSON can only be called before the call to lmsInitialize.')\n            return\n        }\n\n        /**\n         * Test match pattern.\n         *\n         * @param {string} a\n         * @param {string} c\n         * @param {RegExp} a_pattern\n         * @return {number}\n         */\n        function testPattern(a, c, a_pattern) {\n            const a_match = a.match(a_pattern)\n\n            let c_match\n            if (a_match !== null && (c_match = c.match(a_pattern)) !== null) {\n                const a_num = Number(a_match[2])\n                const c_num = Number(c_match[2])\n                if (a_num === c_num) {\n                    if (a_match[3] === 'id') {\n                        return -1\n                    } else if (a_match[3] === 'type') {\n                        if (c_match[3] === 'id') {\n                            return 1\n                        } else {\n                            return -1\n                        }\n                    } else {\n                        return 1\n                    }\n                }\n                return a_num - c_num\n            }\n\n            return null\n        }\n\n        const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/\n        const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/\n\n        const result = Object.keys(json).map(function (key) {\n            return [String(key), json[key]]\n        })\n\n        // CMI interactions need to have id and type loaded before any other fields\n        result.sort(function ([a, b], [c, d]) {\n            let test\n            if ((test = testPattern(a, c, int_pattern)) !== null) {\n                return test\n            }\n            if ((test = testPattern(a, c, obj_pattern)) !== null) {\n                return test\n            }\n\n            if (a < c) {\n                return -1\n            }\n            if (a > c) {\n                return 1\n            }\n            return 0\n        })\n\n        let obj\n        result.forEach((element) => {\n            obj = {}\n            obj[element[0]] = element[1]\n            this.loadFromJSON(unflatten(obj), CMIElement)\n        })\n    }\n\n    /**\n     * Loads CMI data from a JSON object.\n     *\n     * @param {object} json\n     * @param {string} CMIElement\n     */\n    loadFromJSON(json, CMIElement) {\n        if (!this.isNotInitialized()) {\n            console.error('loadFromJSON can only be called before the call to lmsInitialize.')\n            return\n        }\n\n        CMIElement = CMIElement !== undefined ? CMIElement : 'cmi'\n\n        this.startingData = json\n\n        // could this be refactored down to flatten(json) then setCMIValue on each?\n        for (const key in json) {\n            if ({}.hasOwnProperty.call(json, key) && json[key]) {\n                const currentCMIElement = (CMIElement ? CMIElement + '.' : '') + key\n                const value = json[key]\n\n                if (value['childArray']) {\n                    for (let i = 0; i < value['childArray'].length; i++) {\n                        this.loadFromJSON(value['childArray'][i], currentCMIElement + '.' + i)\n                    }\n                } else if (value.constructor === Object) {\n                    this.loadFromJSON(value, currentCMIElement)\n                } else {\n                    this.setCMIValue(currentCMIElement, value)\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the CMI object to JSON for sending to an LMS.\n     *\n     * @return {string}\n     */\n    renderCMIToJSONString() {\n        const cmi = this.cmi\n        // Do we want/need to return fields that have no set value?\n        // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n        return JSON.stringify({ cmi })\n    }\n\n    /**\n     * Returns a JS object representing the current cmi\n     * @return {object}\n     */\n    renderCMIToJSONObject() {\n        // Do we want/need to return fields that have no set value?\n        // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n        return JSON.parse(this.renderCMIToJSONString())\n    }\n\n    /**\n     * Render the cmi object to the proper format for LMS commit\n     * APIs that inherit BaseAPI should override this function\n     *\n     * @param {boolean} _terminateCommit\n     * @return {*}\n     * @abstract\n     */\n    renderCommitCMI(_terminateCommit) {\n        throw new Error('The storeData method has not been implemented')\n    }\n\n    /**\n     * Send the request to the LMS\n     * @param {string} url\n     * @param {object|Array} params\n     * @param {boolean} immediate\n     * @return {object}\n     */\n    processHttpRequest(callbackName: String, url: String, params, immediate = false) {\n        const process = (url, params, settings, error_codes) => {\n            params = settings.requestHandler(params)\n            const genericError = {\n                result: global_constants.SCORM_FALSE,\n                errorCode: error_codes.GENERAL,\n            }\n\n            let result\n            if (!settings.sendBeaconCommit) {\n                try {\n                    const httpReq = new XMLHttpRequest()\n                    httpReq.open('POST', url, settings.asyncCommit)\n                    let stringParams\n                    if (params instanceof Array) {\n                        stringParams = params.join('&')\n                        httpReq.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n                        httpReq.send(stringParams)\n                    } else {\n                        stringParams = JSON.stringify(params)\n                        httpReq.setRequestHeader('Content-Type', settings.commitRequestDataType)\n                        httpReq.send(stringParams)\n                    }\n\n                    if (!settings.asyncCommit) {\n                        if (typeof settings.responseHandler === 'function') {\n                            result = settings.responseHandler(httpReq)\n                        } else {\n                            result = JSON.parse(httpReq.responseText)\n                        }\n\n                        if (result?.result) {\n                            this.lastError = global_constants.NO_ERROR\n                            this.processListeners('commitSuccess')\n                        } else {\n                            this.lastError = {\n                                errorCode: result.errorCode,\n                                errorMessage: 'Network Request failed',\n                            }\n                            this.processListeners('commitError')\n                        }\n\n                        this.apiLog(\n                            `${callbackName} Sync HttpRequest`,\n                            stringParams,\n                            'result: ' + result?.result || global_constants.SCORM_FALSE,\n                            global_constants.LOG_LEVEL_INFO\n                        )\n                    } else {\n                        httpReq.onload = (e) => {\n                            if (typeof settings.responseHandler === 'function') {\n                                result = settings.responseHandler(httpReq)\n                            } else {\n                                result = JSON.parse(httpReq.responseText)\n                            }\n\n                            if (result.result == true) {\n                                this.lastError = global_constants.NO_ERROR\n                                this.processListeners('CommitSuccess')\n                            } else {\n                                this.lastError = {\n                                    errorCode: result.errorCode,\n                                    errorMessage: 'Network Request failed',\n                                }\n                                this.processListeners('CommitError')\n                            }\n                            this.apiLog(\n                                `${callbackName} Async HttpRequest`,\n                                stringParams,\n                                'result: ' + result.result,\n                                global_constants.LOG_LEVEL_INFO\n                            )\n                        }\n                        httpReq.onerror = (e) => {\n                            this.processListeners('CommitError')\n                            this.apiLog(\n                                `${callbackName} Async HttpRequest`,\n                                stringParams,\n                                'result: ' + global_constants.SCORM_FALSE,\n                                global_constants.LOG_LEVEL_INFO\n                            )\n                        }\n                    }\n                } catch (e) {\n                    console.error(e)\n                    this.processListeners('CommitError')\n                    return genericError\n                }\n            } else {\n                try {\n                    const headers = {\n                        type: settings.commitRequestDataType,\n                    }\n                    let blob\n                    let stringParams\n                    if (params instanceof Array) {\n                        stringParams = params.join('&')\n                        blob = new Blob([stringParams], headers)\n                    } else {\n                        stringParams = JSON.stringify(params)\n                        blob = new Blob([stringParams], headers)\n                    }\n\n                    result = {}\n                    if (navigator.sendBeacon(url, blob)) {\n                        result.result = global_constants.SCORM_TRUE\n                        result.errorCode = 0\n                        this.processListeners('CommitSuccess')\n                    } else {\n                        result.result = global_constants.SCORM_FALSE\n                        result.errorCode = 101\n                        this.processListeners('CommitError')\n                    }\n\n                    this.apiLog(\n                        `${callbackName} SendBeacon`,\n                        stringParams,\n                        'result: ' + result.result,\n                        global_constants.LOG_LEVEL_INFO\n                    )\n                } catch (e) {\n                    console.error(e)\n                    this.processListeners('CommitError')\n                    return genericError\n                }\n            }\n\n            return result\n        }\n\n        if (typeof debounce !== 'undefined') {\n            const debounced = debounce(process, 500)\n            debounced(url, params, this.settings, this.error_codes)\n\n            // if we're terminating, go ahead and commit immediately\n            if (immediate) {\n                debounced.flush()\n            }\n\n            return {\n                result: global_constants.SCORM_TRUE,\n                errorCode: 0,\n            }\n        } else {\n            return process(url, params, this.settings, this.error_codes)\n        }\n    }\n\n    /**\n     * Throws a SCORM error\n     *\n     * @param {number} when - the number of milliseconds to wait before committing\n     * @param {string} callback - the name of the commit event callback\n     */\n    scheduleCommit(when: number, callback: string) {\n        this.#timeout = new ScheduledCommit(this, when, callback)\n        this.apiLog('scheduleCommit', '', 'scheduled', global_constants.LOG_LEVEL_DEBUG)\n    }\n\n    /**\n     * Clears and cancels any currently scheduled commits\n     */\n    clearScheduledCommit() {\n        if (this.#timeout) {\n            this.#timeout.cancel()\n            this.#timeout = null\n            this.apiLog('clearScheduledCommit', '', 'cleared', global_constants.LOG_LEVEL_DEBUG)\n        }\n    }\n}\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nclass ScheduledCommit {\n    #API\n    #cancelled = false\n    #timeout\n    #callback\n\n    /**\n     * Constructor for ScheduledCommit\n     * @param {BaseAPI} API\n     * @param {number} when\n     * @param {string} callback\n     */\n    constructor(API: any, when: number, callback: string) {\n        this.#API = API\n        this.#timeout = setTimeout(this.wrapper.bind(this), when)\n        this.#callback = callback\n    }\n\n    /**\n     * Cancel any currently scheduled commit\n     */\n    cancel() {\n        this.#cancelled = true\n        if (this.#timeout) {\n            clearTimeout(this.#timeout)\n        }\n    }\n\n    /**\n     * Wrap the API commit call to check if the call has already been cancelled\n     */\n    wrapper() {\n        if (!this.#cancelled) {\n            this.#API.commit(this.#callback)\n        }\n    }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  CMI,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject, NAV,\n} from './cmi/scorm12_cmi';\nimport * as Utilities from './utilities';\nimport APIConstants from './constants/api_constants';\nimport ErrorCodes from './constants/error_codes';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst global_constants = APIConstants.global;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * API class for SCORM 1.2\n */\nexport default class Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings, \n    };\n\n    super(scorm12_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('LMSInitialize', 'LMS was already initialized!',\n        'LMS is already finished!');\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish() {\n    const result = this.terminate('LMSFinish', true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== '') {\n        if (this.nav.event === 'continue') {\n          this.processListeners('SequenceNext');\n        } else {\n          this.processListeners('SequencePrevious');\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners('SequenceNext');\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('LMSGetValue', false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('LMSSetValue', 'LMSCommit', false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('LMSCommit', false);\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('LMSGetLastError');\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('LMSGetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('LMSGetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('getCMIValue', false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsCorrectResponsesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex &&\n        this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObject();\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {boolean}\n   */\n  validateCorrectResponse(CMIElement, value) {\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {*} errorNumber\n   * @param {boolean }detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = 'No Error';\n    let detailMessage = 'No Error';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.core.total_time = this.cmi.getCurrentTotalTime();\n      cmiExport.cmi.core.session_time = this.cmi.getCurrentSessionTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(callbackName: String, terminateCommit: boolean) {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (originalStatus === 'not attempted') {\n        this.cmi.core.lesson_status = 'completed';\n      }\n\n      if (this.cmi.core.lesson_mode === 'normal') {\n        if (this.cmi.core.credit === 'credit') {\n          if (this.settings.mastery_override &&\n              this.cmi.student_data.mastery_score !== '' &&\n              this.cmi.core.score.raw !== '') {\n            if (parseFloat(this.cmi.core.score.raw) >=\n                parseFloat(this.cmi.student_data.mastery_score)) {\n              this.cmi.core.lesson_status = 'passed';\n            } else {\n              this.cmi.core.lesson_status = 'failed';\n            }\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === 'browse') {\n        if ((this.startingData?.cmi?.core?.lesson_status || '') === '' &&\n            originalStatus === 'not attempted') {\n          this.cmi.core.lesson_status = 'browsed';\n        }\n      }\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit ||\n        this.settings.alwaysSendTotalTime);\n\n    if (this.settings.lmsCommitUrl) {\n      const response = this.processHttpRequest(callbackName, this.settings.lmsCommitUrl, commitObject,\n          terminateCommit);\n      return response;\n    } else {\n      console.log(callbackName, terminateCommit ? '(final)' : '', commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  ADL,\n  CMI,\n  CMICommentsObject,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm2004_cmi';\nimport * as Utilities from './utilities';\nimport APIConstants from './constants/api_constants';\nimport ErrorCodes from './constants/error_codes';\nimport Responses from './constants/response_constants';\nimport ValidLanguages from './constants/language_constants';\nimport Regex from './constants/regex';\n\nconst scorm2004_constants = APIConstants.scorm2004;\nconst global_constants = APIConstants.global;\nconst scorm2004_error_codes = ErrorCodes.scorm2004;\nconst correct_responses = Responses.correct;\nconst scorm2004_regex = Regex.scorm2004;\n\n/**\n * API class for SCORM 2004\n */\nexport default class Scorm2004API extends BaseAPI {\n  #version: '1.0';\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm2004_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsTerminate;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * Getter for #version\n   * @return {string}\n   */\n  get version() {\n    return this.#version;\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('Initialize');\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsTerminate() {\n    const result = this.terminate('Terminate', true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== '_none_') {\n        switch (this.adl.nav.request) {\n          case 'continue':\n            this.processListeners('SequenceNext');\n            break;\n          case 'previous':\n            this.processListeners('SequencePrevious');\n            break;\n          case 'choice':\n            this.processListeners('SequenceChoice');\n            break;\n          case 'exit':\n            this.processListeners('SequenceExit');\n            break;\n          case 'exitAll':\n            this.processListeners('SequenceExitAll');\n            break;\n          case 'abandon':\n            this.processListeners('SequenceAbandon');\n            break;\n          case 'abandonAll':\n            this.processListeners('SequenceAbandonAll');\n            break;\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners('SequenceNext');\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('SetValue', 'Commit', true, CMIElement, value);\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('Commit');\n  }\n\n  /**\n   * Returns last error code\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('GetLastError');\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('GetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('GetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {any}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+')) {\n      const parts = CMIElement.split('.');\n      const index = Number(parts[2]);\n      const interaction = this.cmi.interactions.childArray[index];\n      if (this.isInitialized()) {\n        if (!interaction.type) {\n          this.throwSCORMError(\n              scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n        } else {\n          this.checkDuplicateChoiceResponse(interaction, value);\n\n          const response_type = correct_responses[interaction.type];\n          if (response_type) {\n            this.checkValidResponseType(response_type, value, interaction.type);\n          } else {\n            this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n                'Incorrect Response Type: ' + interaction.type);\n          }\n        }\n      }\n      if (this.lastError.errorCode === 0) {\n        newChild = new CMIInteractionsCorrectResponsesObject();\n      }\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex &&\n        this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_learner\\\\.\\\\d+')) {\n      newChild = new CMICommentsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_lms\\\\.\\\\d+')) {\n      newChild = new CMICommentsObject(true);\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Checks for valid response types\n   * @param {object} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(response_type, value, interaction_type) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n          'Data Model Element Pattern Too Long');\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses.\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(interaction, value) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === 'choice') {\n      for (let i = 0; i < interaction_count && this.lastError.errorCode ===\n      0; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response.\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement, value) {\n    const parts = CMIElement.split('.');\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(interaction, value);\n\n    const response_type = correct_responses[interaction.type];\n    if (typeof response_type.limit === 'undefined' || interaction_count <=\n        response_type.limit) {\n      this.checkValidResponseType(response_type, value, interaction.type);\n\n      if (this.lastError.errorCode === 0 &&\n          (!response_type.duplicate ||\n              !this.checkDuplicatedPattern(interaction.correct_responses,\n                  pattern_index, value)) ||\n          (this.lastError.errorCode === 0 && value === '')) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastError.errorCode === 0) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Already Exists');\n        }\n      }\n    } else {\n      this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n          'Data Model Element Collection Limit Reached');\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = '';\n    let detailMessage = '';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern = (correct_response, current_index, value) => {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  };\n\n  /**\n   * Checks for a valid correct_response value\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(interaction_type, nodes, value) {\n    const response = correct_responses[interaction_type];\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastError.errorCode === 0; i++) {\n      if (interaction_type.match(\n          '^(fill-in|long-fill-in|matching|performance|sequencing)$')) {\n        nodes[i] = this.removeCorrectResponsePrefixes(nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n          } else {\n            if (!values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== '') ||\n            (!matches && interaction_type === 'true-false')) {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        } else {\n          if (interaction_type === 'numeric' && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          } else {\n            if (nodes[i] !== '' && response.unique) {\n              for (let j = 0; j < i && this.lastError.errorCode === 0; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(node) {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\n        '^({(lang|case_matters|order_matters)=([^}]+)})');\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case 'lang':\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (ValidLanguages[lang.toLowerCase()] === undefined) {\n                this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case 'case_matters':\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case 'order_matters':\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenOrder = true;\n          break;\n        default:\n          break;\n      }\n      node = node.substr(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.total_time = this.cmi.getCurrentTotalTime();\n      cmiExport.cmi.session_time = this.cmi.getCurrentSessionTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(callbackName: String, terminateCommit: boolean) {\n    if (terminateCommit) {\n      if (this.cmi.mode === 'normal') {\n        if (this.cmi.credit === 'credit') {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              console.debug('Setting Completion Status: Completed');\n              this.cmi.completion_status = 'completed';\n            } else {\n              console.debug('Setting Completion Status: Incomplete');\n              this.cmi.completion_status = 'incomplete';\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              console.debug('Setting Success Status: Passed');\n              this.cmi.success_status = 'passed';\n            } else {\n              console.debug('Setting Success Status: Failed');\n              this.cmi.success_status = 'failed';\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (this.adl.nav.request !== (this.startingData?.adl?.nav?.request) &&\n        this.adl.nav.request !== '_none_') {\n      this.adl.nav.request = encodeURIComponent(this.adl.nav.request);\n      navRequest = true;\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit ||\n        this.settings.alwaysSendTotalTime);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug(callbackName, terminateCommit ? '(final)' : '', commitObject);\n      }\n      const result = this.processHttpRequest(callbackName, this.settings.lmsCommitUrl,\n          commitObject, terminateCommit);\n\n      // check if this is a sequencing call, and then call the necessary JS\n      {\n        if (navRequest && result.navRequest !== undefined &&\n            result.navRequest !== '') {\n          Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n        }\n      }\n      return result;\n    } else {\n      console.log(callbackName, terminateCommit ? '(final)' : '', commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","import * as Scorm12CMI from './scorm12_cmi';\nimport {BaseCMI, CMIArray, CMIScore} from './common';\nimport APIConstants from '../constants/api_constants';\nimport Regex from '../constants/regex';\nimport ErrorCodes from '../constants/error_codes';\nimport {\n  check12ValidFormat,\n  throwReadOnlyError,\n} from './scorm12_cmi';\n\nconst aicc_constants = APIConstants.aicc;\nconst scorm12_constants = APIConstants.scorm12;\nconst aicc_regex = Regex.aicc;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super(aicc_constants.cmi_children);\n\n    if (initialized) this.initialize();\n\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'student_demographics': this.student_demographics,\n      'interactions': this.interactions,\n      'evaluation': this.evaluation,\n      'paths': this.paths,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * AICC Evaluation object\n */\nclass CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super();\n\n    this.comments = new CMIEvaluationComments();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments': this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n    });\n  }\n}\n\n/**\n * StudentPreferences class for AICC\n */\nclass AICCStudentPreferences extends Scorm12CMI.CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n\n    this.windows = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n      children: '',\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  #lesson_type = '';\n  #text_color = '';\n  #text_location = '';\n  #text_size = '';\n  #video = '';\n\n  /**\n   * Getter for #lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this.#lesson_type;\n  }\n\n  /**\n   * Setter for #lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (check12ValidFormat(lesson_type, aicc_regex.CMIString256)) {\n      this.#lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for #text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this.#text_color;\n  }\n\n  /**\n   * Setter for #text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (check12ValidFormat(text_color, aicc_regex.CMIString256)) {\n      this.#text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for #text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this.#text_location;\n  }\n\n  /**\n   * Setter for #text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (check12ValidFormat(text_location, aicc_regex.CMIString256)) {\n      this.#text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for #text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this.#text_size;\n  }\n\n  /**\n   * Setter for #text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (check12ValidFormat(text_size, aicc_regex.CMIString256)) {\n      this.#text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for #video\n   * @return {string}\n   */\n  get video(): string {\n    return this.#video;\n  }\n\n  /**\n   * Setter for #video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (check12ValidFormat(video, aicc_regex.CMIString256)) {\n      this.#video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'lesson_type': this.lesson_type,\n      'speed': this.speed,\n      'text': this.text,\n      'text_color': this.text_color,\n      'text_location': this.text_location,\n      'text_size': this.text_size,\n      'video': this.video,\n      'windows': this.windows,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * StudentData class for AICC\n */\nclass AICCCMIStudentData extends Scorm12CMI.CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n\n    this.tries = new CMITries();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.tries?.initialize();\n  }\n\n  #tries_during_lesson = '';\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson() {\n    return this.#tries_during_lesson;\n  }\n\n  /**\n   * Setter for #tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson) {\n    !this.initialized ?\n        this.#tries_during_lesson = tries_during_lesson :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n      'tries': this.tries,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super();\n  }\n\n  #_children = aicc_constants.student_demographics_children;\n  #city = '';\n  #class = '';\n  #company = '';\n  #country = '';\n  #experience = '';\n  #familiar_name = '';\n  #instructor_name = '';\n  #title = '';\n  #native_language = '';\n  #state = '';\n  #street_address = '';\n  #telephone = '';\n  #years_experience = '';\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city() {\n    return this.#city;\n  }\n\n  /**\n   * Setter for #city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city) {\n    !this.initialized ?\n        this.#city = city :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class() {\n    return this.#class;\n  }\n\n  /**\n   * Setter for #class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz) {\n    !this.initialized ?\n        this.#class = clazz :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company() {\n    return this.#company;\n  }\n\n  /**\n   * Setter for #company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company) {\n    !this.initialized ?\n        this.#company = company :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country() {\n    return this.#country;\n  }\n\n  /**\n   * Setter for #country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country) {\n    !this.initialized ?\n        this.#country = country :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience() {\n    return this.#experience;\n  }\n\n  /**\n   * Setter for #experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience) {\n    !this.initialized ?\n        this.#experience = experience :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name() {\n    return this.#familiar_name;\n  }\n\n  /**\n   * Setter for #familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name) {\n    !this.initialized ?\n        this.#familiar_name = familiar_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name() {\n    return this.#instructor_name;\n  }\n\n  /**\n   * Setter for #instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name) {\n    !this.initialized ?\n        this.#instructor_name = instructor_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title() {\n    return this.#title;\n  }\n\n  /**\n   * Setter for #title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title) {\n    !this.initialized ?\n        this.#title = title :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language() {\n    return this.#native_language;\n  }\n\n  /**\n   * Setter for #native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language) {\n    !this.initialized ?\n        this.#native_language = native_language :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state() {\n    return this.#state;\n  }\n\n  /**\n   * Setter for #state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state) {\n    !this.initialized ?\n        this.#state = state :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address() {\n    return this.#street_address;\n  }\n\n  /**\n   * Setter for #street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address) {\n    !this.initialized ?\n        this.#street_address = street_address :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone() {\n    return this.#telephone;\n  }\n\n  /**\n   * Setter for #telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone) {\n    !this.initialized ?\n        this.#telephone = telephone :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience() {\n    return this.#years_experience;\n  }\n\n  /**\n   * Setter for #years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience) {\n    !this.initialized ?\n        this.#years_experience = years_experience :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'city': this.city,\n      'class': this.class,\n      'company': this.company,\n      'country': this.country,\n      'experience': this.experience,\n      'familiar_name': this.familiar_name,\n      'instructor_name': this.instructor_name,\n      'title': this.title,\n      'native_language': this.native_language,\n      'state': this.state,\n      'street_address': this.street_address,\n      'telephone': this.telephone,\n      'years_experience': this.years_experience,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.paths object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({children: aicc_constants.paths_children});\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super();\n  }\n\n  #location_id = '';\n  #date = '';\n  #time = '';\n  #status = '';\n  #why_left = '';\n  #time_in_element = '';\n\n  /**\n   * Getter for #location_id\n   * @return {string}\n   */\n  get location_id() {\n    return this.#location_id;\n  }\n\n  /**\n   * Setter for #location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id) {\n    if (check12ValidFormat(location_id, aicc_regex.CMIString256)) {\n      this.#location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for #date\n   * @return {string}\n   */\n  get date() {\n    return this.#date;\n  }\n\n  /**\n   * Setter for #date\n   * @param {string} date\n   */\n  set date(date) {\n    if (check12ValidFormat(date, aicc_regex.CMIString256)) {\n      this.#date = date;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, aicc_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #why_left\n   * @return {string}\n   */\n  get why_left() {\n    return this.#why_left;\n  }\n\n  /**\n   * Setter for #why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left) {\n    if (check12ValidFormat(why_left, aicc_regex.CMIString256)) {\n      this.#why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for #time_in_element\n   * @return {string}\n   */\n  get time_in_element() {\n    return this.#time_in_element;\n  }\n\n  /**\n   * Setter for #time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element) {\n    if (check12ValidFormat(time_in_element, aicc_regex.CMITime)) {\n      this.#time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'location_id': this.location_id,\n      'date': this.date,\n      'time': this.time,\n      'status': this.status,\n      'why_left': this.why_left,\n      'time_in_element': this.time_in_element,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({children: aicc_constants.tries_children});\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: aicc_constants.score_children,\n          score_range: aicc_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidErrorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidTypeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n          invalidRangeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #status = '';\n  #time = '';\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, aicc_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'status': this.status,\n      'time': this.time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({children: aicc_constants.attempt_records_children});\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: aicc_constants.score_children,\n          score_range: aicc_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidErrorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidTypeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n          invalidRangeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #lesson_status = '';\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, aicc_regex.CMIStatus2)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'lesson_status': this.lesson_status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super();\n  }\n\n  #content = '';\n  #location = '';\n  #time = '';\n\n  /**\n   * Getter for #content\n   * @return {string}\n   */\n  get content() {\n    return this.#content;\n  }\n\n  /**\n   * Setter for #content\n   * @param {string} content\n   */\n  set content(content) {\n    if (check12ValidFormat(content, aicc_regex.CMIString256)) {\n      this.#content = content;\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check12ValidFormat(location, aicc_regex.CMIString256)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setting for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaulation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'content': this.content,\n      'location': this.location,\n      'time': this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport APIConstants from '../constants/api_constants';\nimport ErrorCodes from '../constants/error_codes';\nimport {ValidationError} from '../exceptions';\nimport Regex from '../constants/regex';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst scorm12_regex = Regex.scorm12;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {string} errorMessage\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkValidFormat(\n    value: String,\n    regexPattern: String,\n    errorCode: number,\n    errorMessage: String,\n    allowEmptyString?: boolean) {\n  const formatRegex = new RegExp(regexPattern);\n  const matches = value.match(formatRegex);\n  if (allowEmptyString && value === '') {\n    return true;\n  }\n  if (value === undefined || !matches || matches[0] === '') {\n    throw new ValidationError(errorCode, errorMessage);\n  }\n  return true;\n}\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {*} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {string} errorMessage\n * @return {boolean}\n */\nexport function checkValidRange(\n    value: any, rangePattern: String, errorCode: number, errorMessage: String) {\n  const ranges = rangePattern.split('#');\n  value = value * 1.0;\n  if (value >= ranges[0]) {\n    if ((ranges[1] === '*') || (value <= ranges[1])) {\n      return true;\n    } else {\n      throw new ValidationError(errorCode, errorMessage);\n    }\n  } else {\n    throw new ValidationError(errorCode, errorMessage);\n  }\n}\n\n/**\n * Base class for API cmi objects\n */\nexport class BaseCMI {\n  jsonString = false;\n  #initialized = false;\n  #start_time;\n\n  /**\n   * Constructor for BaseCMI, just marks the class as abstract\n   */\n  constructor() {\n    if (new.target === BaseCMI) {\n      throw new TypeError('Cannot construct BaseCMI instances directly');\n    }\n  }\n\n  /**\n   * Getter for #initialized\n   * @return {boolean}\n   */\n  get initialized() {\n    return this.#initialized;\n  }\n\n  /**\n   * Getter for #start_time\n   * @return {Number}\n   */\n  get start_time() {\n    return this.#start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    this.#initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime() {\n    this.#start_time = new Date().getTime();\n  }\n}\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  /**\n   * Constructor for *.score\n   * @param {string} score_children\n   * @param {string} score_range\n   * @param {string} max\n   * @param {number} invalidErrorCode\n   * @param {string} invalidErrorMessage\n   * @param {number} invalidTypeCode\n   * @param {string} invalidTypeMessage\n   * @param {number} invalidRangeCode\n   * @param {string} invalidRangeMessage\n   * @param {string} decimalRegex\n   */\n  constructor(\n      {\n        score_children,\n        score_range,\n        max,\n        invalidErrorCode,\n        invalidErrorMessage,\n        invalidTypeCode,\n        invalidTypeMessage,\n        invalidRangeCode,\n        invalidRangeMessage,\n        decimalRegex,\n      }) {\n    super();\n\n    this.#_children = score_children ||\n        scorm12_constants.score_children;\n    this.#_score_range = !score_range ? false : scorm12_regex.score_range;\n    this.#max = (max || max === '') ? max : '100';\n    this.#_invalid_error_code = invalidErrorCode ||\n        scorm12_error_codes.INVALID_SET_VALUE;\n    this.#_invalid_error_message = invalidErrorMessage ||\n        scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage;\n    this.#_invalid_type_code = invalidTypeCode ||\n        scorm12_error_codes.TYPE_MISMATCH;\n    this.#_invalid_type_message = invalidTypeMessage ||\n        scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage;\n    this.#_invalid_range_code = invalidRangeCode ||\n        scorm12_error_codes.VALUE_OUT_OF_RANGE;\n    this.#_invalid_range_message = invalidRangeMessage ||\n        scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage;\n    this.#_decimal_regex = decimalRegex ||\n        scorm12_regex.CMIDecimal;\n  }\n\n  #_children;\n  #_score_range;\n  #_invalid_error_code;\n  #_invalid_error_message;\n  #_invalid_type_code;\n  #_invalid_type_message;\n  #_invalid_range_code;\n  #_invalid_range_message;\n  #_decimal_regex;\n  #raw = '';\n  #min = '';\n  #max;\n\n  /**\n   * Getter for _children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#_invalid_error_code, this.#_invalid_error_message);\n  }\n\n  /**\n   * Getter for #raw\n   * @return {string}\n   */\n  get raw() {\n    return this.#raw;\n  }\n\n  /**\n   * Setter for #raw\n   * @param {string} raw\n   */\n  set raw(raw) {\n    if (checkValidFormat(raw, this.#_decimal_regex,\n        this.#_invalid_type_code, this.#_invalid_type_message) &&\n        (!this.#_score_range ||\n            checkValidRange(raw, this.#_score_range,\n                this.#_invalid_range_code, this.#_invalid_range_message))) {\n      this.#raw = raw;\n    }\n  }\n\n  /**\n   * Getter for #min\n   * @return {string}\n   */\n  get min() {\n    return this.#min;\n  }\n\n  /**\n   * Setter for #min\n   * @param {string} min\n   */\n  set min(min) {\n    if (checkValidFormat(min, this.#_decimal_regex,\n        this.#_invalid_type_code, this.#_invalid_type_message) &&\n        (!this.#_score_range ||\n            checkValidRange(min, this.#_score_range,\n                this.#_invalid_range_code, this.#_invalid_range_message))) {\n      this.#min = min;\n    }\n  }\n\n  /**\n   * Getter for #max\n   * @return {string}\n   */\n  get max() {\n    return this.#max;\n  }\n\n  /**\n   * Setter for #max\n   * @param {string} max\n   */\n  set max(max) {\n    if (checkValidFormat(max, this.#_decimal_regex,\n        this.#_invalid_type_code, this.#_invalid_type_message) &&\n        (!this.#_score_range ||\n            checkValidRange(max, this.#_score_range,\n                this.#_invalid_range_code, this.#_invalid_range_message))) {\n      this.#max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {{min: string, max: string, raw: string}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'raw': this.raw,\n      'min': this.min,\n      'max': this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  /**\n   * Constructor cmi *.n arrays\n   * @param {string} children\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   */\n  constructor({children, errorCode, errorMessage}) {\n    super();\n    this.#_children = children;\n    this.#errorCode = errorCode;\n    this.#errorMessage = errorMessage;\n    this.childArray = [];\n  }\n\n  #errorCode;\n  #errorMessage;\n  #_children;\n\n  /**\n   * Getter for _children\n   * @return {*}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#errorCode, this.#errorMessage);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count() {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count) {\n    throw new ValidationError(this.#errorCode, this.#errorMessage);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + ''] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport APIConstants from '../constants/api_constants';\nimport ErrorCodes from '../constants/error_codes';\nimport Regex from '../constants/regex';\nimport {ValidationError} from '../exceptions';\nimport * as Utilities from '../utilities';\nimport * as Util from '../utilities';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst scorm12_regex = Regex.scorm12;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Helper method for throwing Read Only error\n */\nexport function throwReadOnlyError() {\n  throw new ValidationError(\n      scorm12_error_codes.READ_ONLY_ELEMENT,\n      scorm12_constants.error_descriptions[scorm12_error_codes.READ_ONLY_ELEMENT].detailMessage\n  );\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nexport function throwWriteOnlyError() {\n  throw new ValidationError(\n      scorm12_error_codes.WRITE_ONLY_ELEMENT,\n      scorm12_constants.error_descriptions[scorm12_error_codes.WRITE_ONLY_ELEMENT].detailMessage\n  );\n}\n\n/**\n * Helper method for throwing Invalid Set error\n */\nfunction throwInvalidValueError() {\n  throw new ValidationError(\n      scorm12_error_codes.INVALID_SET_VALUE,\n      scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm12_error_codes.TYPE_MISMATCH,\n      scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage,\n      allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n    value: any,\n    rangePattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidRange(value, rangePattern,\n      scorm12_error_codes.VALUE_OUT_OF_RANGE,\n      scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n      allowEmptyString);\n}\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseCMI {\n  #_children = '';\n  #_version = '3.4';\n  #launch_data = '';\n  #comments = '';\n  #comments_from_lms = '';\n\n  student_data = null;\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children, student_data, initialized: boolean) {\n    super();\n\n    if (initialized) this.initialize();\n\n    this.#_children = cmi_children ?\n        cmi_children :\n        scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n    };\n    delete this.jsonString;\n    return result;\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #comments\n   * @return {string}\n   */\n  get comments() {\n    return this.#comments;\n  }\n\n  /**\n   * Setter for #comments\n   * @param {string} comments\n   */\n  set comments(comments) {\n    if (check12ValidFormat(comments, scorm12_regex.CMIString4096, true)) {\n      this.#comments = comments;\n    }\n  }\n\n  /**\n   * Getter for #comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms() {\n    return this.#comments_from_lms;\n  }\n\n  /**\n   * Setter for #comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms) {\n    !this.initialized ?\n        this.#comments_from_lms = comments_from_lms :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n\n  /**\n   * Get the current session time generated by the lms.\n   *\n   * @return {string}\n   */\n  getCurrentSessionTime() {\n    return this.core.getCurrentSessionTime(this.start_time);\n  }\n}\n\n/**\n * Class representing the cmi.core object\n * @extends BaseCMI\n */\nclass CMICore extends BaseCMI {\n  /**\n   * Constructor for cmi.core\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: scorm12_constants.score_children,\n          score_range: scorm12_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidErrorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidTypeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n          invalidRangeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #_children = scorm12_constants.core_children;\n  #student_id = '';\n  #student_name = '';\n  #lesson_location = '';\n  #credit = '';\n  #lesson_status = 'not attempted';\n  #entry = '';\n  #total_time = '';\n  #lesson_mode = 'normal';\n  #exit = '';\n  #session_time = '00:00:00';\n  #suspend_data = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #student_id\n   * @return {string}\n   */\n  get student_id() {\n    return this.#student_id;\n  }\n\n  /**\n   * Setter for #student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id) {\n    !this.initialized ? this.#student_id = student_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #student_name\n   * @return {string}\n   */\n  get student_name() {\n    return this.#student_name;\n  }\n\n  /**\n   * Setter for #student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name) {\n    !this.initialized ?\n        this.#student_name = student_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_location\n   * @return {string}\n   */\n  get lesson_location() {\n    return this.#lesson_location;\n  }\n\n  /**\n   * Setter for #lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location) {\n    if (check12ValidFormat(lesson_location, scorm12_regex.CMIString256, true)) {\n      this.#lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (this.initialized) {\n      if (check12ValidFormat(lesson_status, scorm12_regex.CMIStatus)) {\n        this.#lesson_status = lesson_status;\n      }\n    } else {\n      if (check12ValidFormat(lesson_status, scorm12_regex.CMIStatus2)) {\n        this.#lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_mode\n   * @return {string}\n   */\n  get lesson_mode() {\n    return this.#lesson_mode;\n  }\n\n  /**\n   * Setter for #lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode) {\n    !this.initialized ? this.#lesson_mode = lesson_mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {*}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Setter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check12ValidFormat(exit, scorm12_regex.CMIExit, true)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check12ValidFormat(session_time, scorm12_regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check12ValidFormat(suspend_data, scorm12_regex.CMIString4096, true)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {Number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: Number) {\n    let sessionTime = this.#session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== 'undefined' && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Utilities.addHHMMSSTimeStrings(\n        this.#total_time,\n        sessionTime,\n        new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * Set the current session time.\n   * @param {Number} start_time\n   * @return {string}\n   */\n  getCurrentSessionTime(start_time: Number) {\n    let sessionTime = this.#session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== 'undefined' && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n    console.log(sessionTime)\n    return sessionTime;\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: *\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'student_id': this.student_id,\n      'student_name': this.student_name,\n      'lesson_location': this.lesson_location,\n      'credit': this.credit,\n      'lesson_status': this.lesson_status,\n      'entry': this.entry,\n      'lesson_mode': this.lesson_mode,\n      'exit': this.exit,\n      'session_time': this.session_time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives object\n * @extends CMIArray\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives\n   */\n  constructor() {\n    super({\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  #_children;\n  #mastery_score = '';\n  #max_time_allowed = '';\n  #time_limit_action = '';\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children) {\n    super();\n\n    this.#_children = student_data_children ?\n        student_data_children :\n        scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Getter for #_children\n   * @return {*}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #master_score\n   * @return {string}\n   */\n  get mastery_score() {\n    return this.#mastery_score;\n  }\n\n  /**\n   * Setter for #master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score) {\n    !this.initialized ?\n        this.#mastery_score = mastery_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  #_children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children) {\n    super();\n\n    this.#_children = student_preference_children ?\n        student_preference_children :\n        scorm12_constants.student_preference_children;\n  }\n\n  #audio = '';\n  #language = '';\n  #speed = '';\n  #text = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #audio\n   * @return {string}\n   */\n  get audio() {\n    return this.#audio;\n  }\n\n  /**\n   * Setter for #audio\n   * @param {string} audio\n   */\n  set audio(audio) {\n    if (check12ValidFormat(audio, scorm12_regex.CMISInteger) &&\n        check12ValidRange(audio, scorm12_regex.audio_range)) {\n      this.#audio = audio;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check12ValidFormat(language, scorm12_regex.CMIString256)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #speed\n   * @return {string}\n   */\n  get speed() {\n    return this.#speed;\n  }\n\n  /**\n   * Setter for #speed\n   * @param {string} speed\n   */\n  set speed(speed) {\n    if (check12ValidFormat(speed, scorm12_regex.CMISInteger) &&\n        check12ValidRange(speed, scorm12_regex.speed_range)) {\n      this.#speed = speed;\n    }\n  }\n\n  /**\n   * Getter for #text\n   * @return {string}\n   */\n  get text() {\n    return this.#text;\n  }\n\n  /**\n   * Setter for #text\n   * @param {string} text\n   */\n  set text(text) {\n    if (check12ValidFormat(text, scorm12_regex.CMISInteger) &&\n        check12ValidRange(text, scorm12_regex.text_range)) {\n      this.#text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'speed': this.speed,\n      'text': this.text,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions object\n * @extends BaseCMI\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.interactions\n   */\n  constructor() {\n    super({\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      errorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  #id = '';\n  #time = '';\n  #type = '';\n  #weighting = '';\n  #student_response = '';\n  #result = '';\n  #latency = '';\n\n  /**\n   * Getter for #id. Should only be called during JSON export.\n   * @return {*}\n   */\n  get id() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, scorm12_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #type. Should only be called during JSON export.\n   * @return {*}\n   */\n  get type() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check12ValidFormat(type, scorm12_regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #weighting. Should only be called during JSON export.\n   * @return {*}\n   */\n  get weighting() {\n    return (!this.jsonString) ?\n        throwWriteOnlyError() :\n        this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check12ValidFormat(weighting, scorm12_regex.CMIDecimal) &&\n        check12ValidRange(weighting, scorm12_regex.weighting_range)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #student_response. Should only be called during JSON export.\n   * @return {*}\n   */\n  get student_response() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#student_response;\n  }\n\n  /**\n   * Setter for #student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response) {\n    if (check12ValidFormat(student_response, scorm12_regex.CMIFeedback, true)) {\n      this.#student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for #result. Should only be called during JSON export.\n   * @return {*}\n   */\n  get result() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check12ValidFormat(result, scorm12_regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency. Should only be called during JSON export.\n   * @return {*}\n   */\n  get latency() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check12ValidFormat(latency, scorm12_regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'time': this.time,\n      'type': this.type,\n      'weighting': this.weighting,\n      'student_response': this.student_response,\n      'result': this.result,\n      'latency': this.latency,\n      'objectives': this.objectives,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: scorm12_constants.score_children,\n          score_range: scorm12_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidErrorMessage: scorm12_constants.error_descriptions[scorm12_error_codes.INVALID_SET_VALUE].detailMessage,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidTypeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.TYPE_MISMATCH].detailMessage,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n          invalidRangeMessage: scorm12_constants.error_descriptions[scorm12_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n        });\n  }\n\n  #id = '';\n  #status = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {\"\"}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, scorm12_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'status': this.status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  #id = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  #pattern = '';\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check12ValidFormat(pattern, scorm12_regex.CMIFeedback, true)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super();\n  }\n\n  #event = '';\n\n  /**\n   * Getter for #event\n   * @return {string}\n   */\n  get event() {\n    return this.#event;\n  }\n\n  /**\n   * Setter for #event\n   * @param {string} event\n   */\n  set event(event) {\n    if (check12ValidFormat(event, scorm12_regex.NAVEvent)) {\n      this.#event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'event': this.event,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport APIConstants from '../constants/api_constants';\nimport Regex from '../constants/regex';\nimport ErrorCodes from '../constants/error_codes';\nimport Responses from '../constants/response_constants';\nimport {ValidationError} from '../exceptions';\nimport * as Util from '../utilities';\n\nconst scorm2004_constants = APIConstants.scorm2004;\nconst scorm2004_error_codes = ErrorCodes.scorm2004;\nconst learner_responses = Responses.learner;\n\nconst scorm2004_regex = Regex.scorm2004;\n\n/**\n * Helper method for throwing Read Only error\n */\nfunction throwReadOnlyError() {\n  throw new ValidationError(\n      scorm2004_error_codes.READ_ONLY_ELEMENT,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage\n  );\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nfunction throwWriteOnlyError() {\n  throw new ValidationError(\n      scorm2004_error_codes.WRITE_ONLY_ELEMENT,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.WRITE_ONLY_ELEMENT].detailMessage\n  );\n}\n\n/**\n * Helper method for throwing Type Mismatch error\n */\nfunction throwTypeMismatchError() {\n  throw new ValidationError(\n      scorm2004_error_codes.TYPE_MISMATCH,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.TYPE_MISMATCH].detailMessage\n  );\n}\n\n/**\n * Helper method for throwing Dependency Not Established error\n */\nfunction throwDependencyNotEstablishedError() {\n  throw new ValidationError(\n      scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED].detailMessage\n  );\n}\n\n/**\n * Helper method for throwing Dependency Not Established error\n */\nfunction throwGeneralSetError() {\n  throw new ValidationError(\n      scorm2004_error_codes.GENERAL_SET_FAILURE,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.GENERAL_SET_FAILURE].detailMessage\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nfunction check2004ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm2004_error_codes.TYPE_MISMATCH,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.TYPE_MISMATCH].detailMessage,\n      allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nfunction check2004ValidRange(value: any, rangePattern: String) {\n  return checkValidRange(value, rangePattern,\n      scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n      scorm2004_constants.error_descriptions[scorm2004_error_codes.VALUE_OUT_OF_RANGE].detailMessage);\n}\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super();\n\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n\n    if (initialized) this.initialize();\n  }\n\n  #_version = '1.0';\n  #_children = scorm2004_constants.cmi_children;\n  #completion_status = 'unknown';\n  #completion_threshold = '';\n  #credit = 'credit';\n  #entry = '';\n  #exit = '';\n  #launch_data = '';\n  #learner_id = '';\n  #learner_name = '';\n  #location = '';\n  #max_time_allowed = '';\n  #mode = 'normal';\n  #progress_measure = '';\n  #scaled_passing_score = '';\n  #session_time = 'PT0H0M0S';\n  #success_status = 'unknown';\n  #suspend_data = '';\n  #time_limit_action = 'continue,no message';\n  #total_time = '';\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   * @private\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_threshold\n   * @return {string}\n   */\n  get completion_threshold() {\n    return this.#completion_threshold;\n  }\n\n  /**\n   * Setter for #completion_threshold. Can only be called before  initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold) {\n    !this.initialized ?\n        this.#completion_threshold = completion_threshold :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Setter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Getter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check2004ValidFormat(exit, scorm2004_regex.CMIExit, true)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_id\n   * @return {string}\n   */\n  get learner_id() {\n    return this.#learner_id;\n  }\n\n  /**\n   * Setter for #learner_id. Can only be called before  initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id) {\n    !this.initialized ? this.#learner_id = learner_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_name\n   * @return {string}\n   */\n  get learner_name() {\n    return this.#learner_name;\n  }\n\n  /**\n   * Setter for #learner_name. Can only be called before  initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name) {\n    !this.initialized ?\n        this.#learner_name = learner_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check2004ValidFormat(location, scorm2004_regex.CMIString1000)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #mode\n   * @return {string}\n   */\n  get mode() {\n    return this.#mode;\n  }\n\n  /**\n   * Setter for #mode. Can only be called before  initialization.\n   * @param {string} mode\n   */\n  set mode(mode) {\n    !this.initialized ? this.#mode = mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, scorm2004_regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score() {\n    return this.#scaled_passing_score;\n  }\n\n  /**\n   * Setter for #scaled_passing_score. Can only be called before  initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score) {\n    !this.initialized ?\n        this.#scaled_passing_score = scaled_passing_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check2004ValidFormat(session_time, scorm2004_regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check2004ValidFormat(suspend_data, scorm2004_regex.CMIString64000,\n        true)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime() {\n    let sessionTime = this.#session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== 'undefined' && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(\n        this.#total_time,\n        sessionTime,\n        scorm2004_regex.CMITimespan,\n    );\n  }\n\n  /**\n   * get session_time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentSessionTime() {\n    let sessionTime = this.#session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== 'undefined' && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return sessionTime\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments_from_learner': this.comments_from_learner,\n      'comments_from_lms': this.comments_from_lms,\n      'completion_status': this.completion_status,\n      'completion_threshold': this.completion_threshold,\n      'credit': this.credit,\n      'entry': this.entry,\n      'exit': this.exit,\n      'interactions': this.interactions,\n      'launch_data': this.launch_data,\n      'learner_id': this.learner_id,\n      'learner_name': this.learner_name,\n      'learner_preference': this.learner_preference,\n      'location': this.location,\n      'max_time_allowed': this.max_time_allowed,\n      'mode': this.mode,\n      'objectives': this.objectives,\n      'progress_measure': this.progress_measure,\n      'scaled_passing_score': this.scaled_passing_score,\n      'score': this.score,\n      'session_time': this.session_time,\n      'success_status': this.success_status,\n      'suspend_data': this.suspend_data,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nclass CMILearnerPreference extends BaseCMI {\n  #_children = scorm2004_constants.student_preference_children;\n  #audio_level = '1';\n  #language = '';\n  #delivery_speed = '1';\n  #audio_captioning = '0';\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #audio_level\n   * @return {string}\n   */\n  get audio_level() {\n    return this.#audio_level;\n  }\n\n  /**\n   * Setter for #audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level) {\n    if (check2004ValidFormat(audio_level, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(audio_level, scorm2004_regex.audio_range)) {\n      this.#audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check2004ValidFormat(language, scorm2004_regex.CMILang)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #delivery_speed\n   * @return {string}\n   */\n  get delivery_speed() {\n    return this.#delivery_speed;\n  }\n\n  /**\n   * Setter for #delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed) {\n    if (check2004ValidFormat(delivery_speed, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(delivery_speed, scorm2004_regex.speed_range)) {\n      this.#delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for #audio_captioning\n   * @return {string}\n   */\n  get audio_captioning() {\n    return this.#audio_captioning;\n  }\n\n  /**\n   * Setter for #audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning) {\n    if (check2004ValidFormat(audio_captioning, scorm2004_regex.CMISInteger) &&\n        check2004ValidRange(audio_captioning, scorm2004_regex.text_range)) {\n      this.#audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio_level': this.audio_level,\n      'language': this.language,\n      'delivery_speed': this.delivery_speed,\n      'audio_captioning': this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions object\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.objectives object\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n */\nclass CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\nclass CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  #id = '';\n  #type = '';\n  #timestamp = '';\n  #weighting = '';\n  #learner_response = '';\n  #result = '';\n  #latency = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.INVALID_SET_VALUE].detailMessage,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      errorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.INVALID_SET_VALUE].detailMessage,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #type\n   * @return {string}\n   */\n  get type() {\n    return this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(type, scorm2004_regex.CMIType)) {\n        this.#type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n        this.#timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for #weighting\n   * @return {string}\n   */\n  get weighting() {\n    return this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(weighting, scorm2004_regex.CMIDecimal)) {\n        this.#weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for #learner_response\n   * @return {string}\n   */\n  get learner_response() {\n    return this.#learner_response;\n  }\n\n  /**\n   * Setter for #learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response) {\n    if (this.initialized && (this.#type === '' || this.#id === '')) {\n      throwDependencyNotEstablishedError();\n    } else {\n      let nodes = [];\n      const response_type = learner_responses[this.type];\n      if (response_type) {\n        if (response_type?.delimiter) {\n          nodes = learner_response.split(response_type.delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if ((nodes.length > 0) && (nodes.length <= response_type.max)) {\n          const formatRegex = new RegExp(response_type.format);\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              const values = nodes[i].split(response_type.delimiter2);\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throwTypeMismatchError();\n                } else {\n                  if (!values[1].match(new RegExp(response_type.format2))) {\n                    throwTypeMismatchError();\n                  }\n                }\n              } else {\n                throwTypeMismatchError();\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throwTypeMismatchError();\n              } else {\n                if (nodes[i] !== '' && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throwTypeMismatchError();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throwGeneralSetError();\n        }\n\n        this.#learner_response = learner_response;\n      } else {\n        throwTypeMismatchError();\n      }\n    }\n  }\n\n  /**\n   * Getter for #result\n   * @return {string}\n   */\n  get result() {\n    return this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check2004ValidFormat(result, scorm2004_regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency\n   * @return {string}\n   */\n  get latency() {\n    return this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(latency, scorm2004_regex.CMITimespan)) {\n        this.#latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(description, scorm2004_regex.CMILangString250,\n          true)) {\n        this.#description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'type': this.type,\n      'objectives': this.objectives,\n      'timestamp': this.timestamp,\n      'weighting': this.weighting,\n      'learner_response': this.learner_response,\n      'result': this.result,\n      'latency': this.latency,\n      'description': this.description,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  #id = '';\n  #success_status = 'unknown';\n  #completion_status = 'unknown';\n  #progress_measure = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new Scorm2004CMIScore();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n        this.#success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n        this.#completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n          check2004ValidRange(progress_measure,\n              scorm2004_regex.progress_range)) {\n        this.#progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (this.initialized && this.#id === '') {\n      throwDependencyNotEstablishedError();\n    } else {\n      if (check2004ValidFormat(description, scorm2004_regex.CMILangString250,\n          true)) {\n        this.#description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'success_status': this.success_status,\n      'completion_status': this.completion_status,\n      'progress_measure': this.progress_measure,\n      'description': this.description,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi *.score object\n */\nclass Scorm2004CMIScore extends CMIScore {\n  #scaled = '';\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super(\n        {\n          score_children: scorm2004_constants.score_children,\n          max: '',\n          invalidErrorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n          invalidErrorMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.READ_ONLY_ELEMENT].detailMessage,\n          invalidTypeCode: scorm2004_error_codes.TYPE_MISMATCH,\n          invalidTypeMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.TYPE_MISMATCH].detailMessage,\n          invalidRangeCode: scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n          invalidRangeMessage: scorm2004_constants.error_descriptions[scorm2004_error_codes.VALUE_OUT_OF_RANGE].detailMessage,\n          decimalRegex: scorm2004_regex.CMIDecimal,\n        });\n  }\n\n  /**\n   * Getter for #scaled\n   * @return {string}\n   */\n  get scaled() {\n    return this.#scaled;\n  }\n\n  /**\n   * Setter for #scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled) {\n    if (check2004ValidFormat(scaled, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(scaled, scorm2004_regex.scaled_range)) {\n      this.#scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'scaled': this.scaled,\n      'raw': super.raw,\n      'min': super.min,\n      'max': super.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\nexport class CMICommentsObject extends BaseCMI {\n  #comment = '';\n  #location = '';\n  #timestamp = '';\n  #readOnlyAfterInit;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit = false) {\n    super();\n    this.#comment = '';\n    this.#location = '';\n    this.#timestamp = '';\n    this.#readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Getter for #comment\n   * @return {string}\n   */\n  get comment() {\n    return this.#comment;\n  }\n\n  /**\n   * Setter for #comment\n   * @param {string} comment\n   */\n  set comment(comment) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(comment, scorm2004_regex.CMILangString4000,\n          true)) {\n        this.#comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(location, scorm2004_regex.CMIString250)) {\n        this.#location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n        this.#timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comment': this.comment,\n      'location': this.location,\n      'timestamp': this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  #id = '';\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  #pattern = '';\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check2004ValidFormat(pattern, scorm2004_regex.CMIFeedback)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super();\n\n    this.nav = new ADLNav();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: {\n   *        request: string\n   *      }\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'nav': this.nav,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav object\n */\nclass ADLNav extends BaseCMI {\n  #request = '_none_';\n\n  /**\n   * Constructor for adl.nav\n   */\n  constructor() {\n    super();\n\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Getter for #request\n   * @return {string}\n   */\n  get request() {\n    return this.#request;\n  }\n\n  /**\n   * Setter for #request\n   * @param {string} request\n   */\n  set request(request) {\n    if (check2004ValidFormat(request, scorm2004_regex.NAVEvent)) {\n      this.#request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'request': this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\nclass ADLNavRequestValid extends BaseCMI {\n  #continue = 'unknown';\n  #previous = 'unknown';\n  choice = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n  jump = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #continue\n   * @return {string}\n   */\n  get continue() {\n    return this.#continue;\n  }\n\n  /**\n   * Setter for #continue. Just throws an error.\n   * @param {*} _\n   */\n  set continue(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #previous\n   * @return {string}\n   */\n  get previous() {\n    return this.#previous;\n  }\n\n  /**\n   * Setter for #previous. Just throws an error.\n   * @param {*} _\n   */\n  set previous(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'previous': this.previous,\n      'continue': this.continue,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\n\nconst global = {\n  SCORM_TRUE: 'true',\n  SCORM_FALSE: 'false',\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n  LOG_LEVEL_DEBUG: 1,\n  LOG_LEVEL_INFO: 2,\n  LOG_LEVEL_WARNING: 3,\n  LOG_LEVEL_ERROR: 4,\n  LOG_LEVEL_NONE: 5,\n  NO_ERROR: {\n    errorCode: 0,\n    errorMessage: 'No error',\n  },\n};\n\nconst scorm12 = {\n  // Children lists\n  cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions',\n  core_children: 'student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time',\n  score_children: 'raw,min,max',\n  comments_children: 'content,location,time',\n  objectives_children: 'id,score,status',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio,language,speed,text',\n  interactions_children: 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency',\n\n  error_descriptions: {\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use LMSGetDiagnostic for more information',\n    },\n    '201': {\n      basicMessage: 'Invalid argument error',\n      detailMessage: 'Indicates that an argument represents an invalid data model element or is otherwise incorrect.',\n    },\n    '202': {\n      basicMessage: 'Element cannot have children',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    '203': {\n      basicMessage: 'Element not an array - cannot have count',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    '301': {\n      basicMessage: 'Not initialized',\n      detailMessage: 'Indicates that an API call was made before the call to lmsInitialize.',\n    },\n    '401': {\n      basicMessage: 'Not implemented error',\n      detailMessage: 'The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.',\n    },\n    '402': {\n      basicMessage: 'Invalid set value, element is a keyword',\n      detailMessage: 'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    '403': {\n      basicMessage: 'Element is read only',\n      detailMessage: 'LMSSetValue was called with a data model element that can only be read.',\n    },\n    '404': {\n      basicMessage: 'Element is write only',\n      detailMessage: 'LMSGetValue was called on a data model element that can only be written to.',\n    },\n    '405': {\n      basicMessage: 'Incorrect Data Type',\n      detailMessage: 'LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n\nconst aicc = {\n  ...scorm12, ...{\n    cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation',\n    student_preference_children: 'audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows',\n    student_data_children: 'attempt_number,tries,mastery_score,max_time_allowed,time_limit_action',\n    student_demographics_children: 'city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience',\n    tries_children: 'time,status,score',\n    attempt_records_children: 'score,lesson_status',\n    paths_children: 'location_id,date,time,status,why_left,time_in_element',\n  },\n};\n\nconst scorm2004 = {\n  // Children lists\n  cmi_children: '_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time',\n  comments_children: 'comment,timestamp,location',\n  score_children: 'max,raw,scaled,min',\n  objectives_children: 'progress_measure,completion_status,success_status,description,score,id',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio_level,audio_captioning,delivery_speed,language',\n  interactions_children: 'id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description',\n\n  error_descriptions: {\n    '0': {\n      basicMessage: 'No Error',\n      detailMessage: 'No error occurred, the previous API call was successful.',\n    },\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use GetDiagnostic for more information.',\n    },\n    '102': {\n      basicMessage: 'General Initialization Failure',\n      detailMessage: 'Call to Initialize failed for an unknown reason.',\n    },\n    '103': {\n      basicMessage: 'Already Initialized',\n      detailMessage: 'Call to Initialize failed because Initialize was already called.',\n    },\n    '104': {\n      basicMessage: 'Content Instance Terminated',\n      detailMessage: 'Call to Initialize failed because Terminate was already called.',\n    },\n    '111': {\n      basicMessage: 'General Termination Failure',\n      detailMessage: 'Call to Terminate failed for an unknown reason.',\n    },\n    '112': {\n      basicMessage: 'Termination Before Initialization',\n      detailMessage: 'Call to Terminate failed because it was made before the call to Initialize.',\n    },\n    '113': {\n      basicMessage: 'Termination After Termination',\n      detailMessage: 'Call to Terminate failed because Terminate was already called.',\n    },\n    '122': {\n      basicMessage: 'Retrieve Data Before Initialization',\n      detailMessage: 'Call to GetValue failed because it was made before the call to Initialize.',\n    },\n    '123': {\n      basicMessage: 'Retrieve Data After Termination',\n      detailMessage: 'Call to GetValue failed because it was made after the call to Terminate.',\n    },\n    '132': {\n      basicMessage: 'Store Data Before Initialization',\n      detailMessage: 'Call to SetValue failed because it was made before the call to Initialize.',\n    },\n    '133': {\n      basicMessage: 'Store Data After Termination',\n      detailMessage: 'Call to SetValue failed because it was made after the call to Terminate.',\n    },\n    '142': {\n      basicMessage: 'Commit Before Initialization',\n      detailMessage: 'Call to Commit failed because it was made before the call to Initialize.',\n    },\n    '143': {\n      basicMessage: 'Commit After Termination',\n      detailMessage: 'Call to Commit failed because it was made after the call to Terminate.',\n    },\n    '201': {\n      basicMessage: 'General Argument Error',\n      detailMessage: 'An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.',\n    },\n    '301': {\n      basicMessage: 'General Get Failure',\n      detailMessage: 'Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '351': {\n      basicMessage: 'General Set Failure',\n      detailMessage: 'Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '391': {\n      basicMessage: 'General Commit Failure',\n      detailMessage: 'Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '401': {\n      basicMessage: 'Undefined Data Model Element',\n      detailMessage: 'The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.',\n    },\n    '402': {\n      basicMessage: 'Unimplemented Data Model Element',\n      detailMessage: 'The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.',\n    },\n    '403': {\n      basicMessage: 'Data Model Element Value Not Initialized',\n      detailMessage: 'Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.',\n    },\n    '404': {\n      basicMessage: 'Data Model Element Is Read Only',\n      detailMessage: 'SetValue was called with a data model element that can only be read.',\n    },\n    '405': {\n      basicMessage: 'Data Model Element Is Write Only',\n      detailMessage: 'GetValue was called on a data model element that can only be written to.',\n    },\n    '406': {\n      basicMessage: 'Data Model Element Type Mismatch',\n      detailMessage: 'SetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Data Model Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n\nconst APIConstants = {\n  global: global,\n  scorm12: scorm12,\n  aicc: aicc,\n  scorm2004: scorm2004,\n};\n\nexport default APIConstants;\n","// @flow\nconst global = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nconst scorm12 = {\n  ...global, ...{\n    RETRIEVE_BEFORE_INIT: 301,\n    STORE_BEFORE_INIT: 301,\n    COMMIT_BEFORE_INIT: 301,\n    ARGUMENT_ERROR: 201,\n    CHILDREN_ERROR: 202,\n    COUNT_ERROR: 203,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 401,\n    VALUE_NOT_INITIALIZED: 301,\n    INVALID_SET_VALUE: 402,\n    READ_ONLY_ELEMENT: 403,\n    WRITE_ONLY_ELEMENT: 404,\n    TYPE_MISMATCH: 405,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nconst scorm2004 = {\n  ...global, ...{\n    INITIALIZATION_FAILED: 102,\n    INITIALIZED: 103,\n    TERMINATED: 104,\n    TERMINATION_FAILURE: 111,\n    TERMINATION_BEFORE_INIT: 112,\n    MULTIPLE_TERMINATIONS: 113,\n    RETRIEVE_BEFORE_INIT: 122,\n    RETRIEVE_AFTER_TERM: 123,\n    STORE_BEFORE_INIT: 132,\n    STORE_AFTER_TERM: 133,\n    COMMIT_BEFORE_INIT: 142,\n    COMMIT_AFTER_TERM: 143,\n    ARGUMENT_ERROR: 201,\n    GENERAL_GET_FAILURE: 301,\n    GENERAL_SET_FAILURE: 351,\n    GENERAL_COMMIT_FAILURE: 391,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 402,\n    VALUE_NOT_INITIALIZED: 403,\n    READ_ONLY_ELEMENT: 404,\n    WRITE_ONLY_ELEMENT: 405,\n    TYPE_MISMATCH: 406,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nconst ErrorCodes = {\n  scorm12: scorm12,\n  scorm2004: scorm2004,\n};\n\nexport default ErrorCodes;\n","const ValidLanguages = {\n  'aa': 'aa', 'ab': 'ab', 'ae': 'ae', 'af': 'af', 'ak': 'ak', 'am': 'am',\n  'an': 'an', 'ar': 'ar', 'as': 'as', 'av': 'av', 'ay': 'ay', 'az': 'az',\n  'ba': 'ba', 'be': 'be', 'bg': 'bg', 'bh': 'bh', 'bi': 'bi', 'bm': 'bm',\n  'bn': 'bn', 'bo': 'bo', 'br': 'br', 'bs': 'bs', 'ca': 'ca', 'ce': 'ce',\n  'ch': 'ch', 'co': 'co', 'cr': 'cr', 'cs': 'cs', 'cu': 'cu', 'cv': 'cv',\n  'cy': 'cy', 'da': 'da', 'de': 'de', 'dv': 'dv', 'dz': 'dz', 'ee': 'ee',\n  'el': 'el', 'en': 'en', 'eo': 'eo', 'es': 'es', 'et': 'et', 'eu': 'eu',\n  'fa': 'fa', 'ff': 'ff', 'fi': 'fi', 'fj': 'fj', 'fo': 'fo', 'fr': 'fr',\n  'fy': 'fy', 'ga': 'ga', 'gd': 'gd', 'gl': 'gl', 'gn': 'gn', 'gu': 'gu',\n  'gv': 'gv', 'ha': 'ha', 'he': 'he', 'hi': 'hi', 'ho': 'ho', 'hr': 'hr',\n  'ht': 'ht', 'hu': 'hu', 'hy': 'hy', 'hz': 'hz', 'ia': 'ia', 'id': 'id',\n  'ie': 'ie', 'ig': 'ig', 'ii': 'ii', 'ik': 'ik', 'io': 'io', 'is': 'is',\n  'it': 'it', 'iu': 'iu', 'ja': 'ja', 'jv': 'jv', 'ka': 'ka', 'kg': 'kg',\n  'ki': 'ki', 'kj': 'kj', 'kk': 'kk', 'kl': 'kl', 'km': 'km', 'kn': 'kn',\n  'ko': 'ko', 'kr': 'kr', 'ks': 'ks', 'ku': 'ku', 'kv': 'kv', 'kw': 'kw',\n  'ky': 'ky', 'la': 'la', 'lb': 'lb', 'lg': 'lg', 'li': 'li', 'ln': 'ln',\n  'lo': 'lo', 'lt': 'lt', 'lu': 'lu', 'lv': 'lv', 'mg': 'mg', 'mh': 'mh',\n  'mi': 'mi', 'mk': 'mk', 'ml': 'ml', 'mn': 'mn', 'mo': 'mo', 'mr': 'mr',\n  'ms': 'ms', 'mt': 'mt', 'my': 'my', 'na': 'na', 'nb': 'nb', 'nd': 'nd',\n  'ne': 'ne', 'ng': 'ng', 'nl': 'nl', 'nn': 'nn', 'no': 'no', 'nr': 'nr',\n  'nv': 'nv', 'ny': 'ny', 'oc': 'oc', 'oj': 'oj', 'om': 'om', 'or': 'or',\n  'os': 'os', 'pa': 'pa', 'pi': 'pi', 'pl': 'pl', 'ps': 'ps', 'pt': 'pt',\n  'qu': 'qu', 'rm': 'rm', 'rn': 'rn', 'ro': 'ro', 'ru': 'ru', 'rw': 'rw',\n  'sa': 'sa', 'sc': 'sc', 'sd': 'sd', 'se': 'se', 'sg': 'sg', 'sh': 'sh',\n  'si': 'si', 'sk': 'sk', 'sl': 'sl', 'sm': 'sm', 'sn': 'sn', 'so': 'so',\n  'sq': 'sq', 'sr': 'sr', 'ss': 'ss', 'st': 'st', 'su': 'su', 'sv': 'sv',\n  'sw': 'sw', 'ta': 'ta', 'te': 'te', 'tg': 'tg', 'th': 'th', 'ti': 'ti',\n  'tk': 'tk', 'tl': 'tl', 'tn': 'tn', 'to': 'to', 'tr': 'tr', 'ts': 'ts',\n  'tt': 'tt', 'tw': 'tw', 'ty': 'ty', 'ug': 'ug', 'uk': 'uk', 'ur': 'ur',\n  'uz': 'uz', 've': 've', 'vi': 'vi', 'vo': 'vo', 'wa': 'wa', 'wo': 'wo',\n  'xh': 'xh', 'yi': 'yi', 'yo': 'yo', 'za': 'za', 'zh': 'zh', 'zu': 'zu',\n  'aar': 'aar', 'abk': 'abk', 'ave': 'ave', 'afr': 'afr', 'aka': 'aka',\n  'amh': 'amh', 'arg': 'arg', 'ara': 'ara', 'asm': 'asm', 'ava': 'ava',\n  'aym': 'aym', 'aze': 'aze', 'bak': 'bak', 'bel': 'bel', 'bul': 'bul',\n  'bih': 'bih', 'bis': 'bis', 'bam': 'bam', 'ben': 'ben', 'tib': 'tib',\n  'bod': 'bod', 'bre': 'bre', 'bos': 'bos', 'cat': 'cat', 'che': 'che',\n  'cha': 'cha', 'cos': 'cos', 'cre': 'cre', 'cze': 'cze', 'ces': 'ces',\n  'chu': 'chu', 'chv': 'chv', 'wel': 'wel', 'cym': 'cym', 'dan': 'dan',\n  'ger': 'ger', 'deu': 'deu', 'div': 'div', 'dzo': 'dzo', 'ewe': 'ewe',\n  'gre': 'gre', 'ell': 'ell', 'eng': 'eng', 'epo': 'epo', 'spa': 'spa',\n  'est': 'est', 'baq': 'baq', 'eus': 'eus', 'per': 'per', 'fas': 'fas',\n  'ful': 'ful', 'fin': 'fin', 'fij': 'fij', 'fao': 'fao', 'fre': 'fre',\n  'fra': 'fra', 'fry': 'fry', 'gle': 'gle', 'gla': 'gla', 'glg': 'glg',\n  'grn': 'grn', 'guj': 'guj', 'glv': 'glv', 'hau': 'hau', 'heb': 'heb',\n  'hin': 'hin', 'hmo': 'hmo', 'hrv': 'hrv', 'hat': 'hat', 'hun': 'hun',\n  'arm': 'arm', 'hye': 'hye', 'her': 'her', 'ina': 'ina', 'ind': 'ind',\n  'ile': 'ile', 'ibo': 'ibo', 'iii': 'iii', 'ipk': 'ipk', 'ido': 'ido',\n  'ice': 'ice', 'isl': 'isl', 'ita': 'ita', 'iku': 'iku', 'jpn': 'jpn',\n  'jav': 'jav', 'geo': 'geo', 'kat': 'kat', 'kon': 'kon', 'kik': 'kik',\n  'kua': 'kua', 'kaz': 'kaz', 'kal': 'kal', 'khm': 'khm', 'kan': 'kan',\n  'kor': 'kor', 'kau': 'kau', 'kas': 'kas', 'kur': 'kur', 'kom': 'kom',\n  'cor': 'cor', 'kir': 'kir', 'lat': 'lat', 'ltz': 'ltz', 'lug': 'lug',\n  'lim': 'lim', 'lin': 'lin', 'lao': 'lao', 'lit': 'lit', 'lub': 'lub',\n  'lav': 'lav', 'mlg': 'mlg', 'mah': 'mah', 'mao': 'mao', 'mri': 'mri',\n  'mac': 'mac', 'mkd': 'mkd', 'mal': 'mal', 'mon': 'mon', 'mol': 'mol',\n  'mar': 'mar', 'may': 'may', 'msa': 'msa', 'mlt': 'mlt', 'bur': 'bur',\n  'mya': 'mya', 'nau': 'nau', 'nob': 'nob', 'nde': 'nde', 'nep': 'nep',\n  'ndo': 'ndo', 'dut': 'dut', 'nld': 'nld', 'nno': 'nno', 'nor': 'nor',\n  'nbl': 'nbl', 'nav': 'nav', 'nya': 'nya', 'oci': 'oci', 'oji': 'oji',\n  'orm': 'orm', 'ori': 'ori', 'oss': 'oss', 'pan': 'pan', 'pli': 'pli',\n  'pol': 'pol', 'pus': 'pus', 'por': 'por', 'que': 'que', 'roh': 'roh',\n  'run': 'run', 'rum': 'rum', 'ron': 'ron', 'rus': 'rus', 'kin': 'kin',\n  'san': 'san', 'srd': 'srd', 'snd': 'snd', 'sme': 'sme', 'sag': 'sag',\n  'slo': 'slo', 'sin': 'sin', 'slk': 'slk', 'slv': 'slv', 'smo': 'smo',\n  'sna': 'sna', 'som': 'som', 'alb': 'alb', 'sqi': 'sqi', 'srp': 'srp',\n  'ssw': 'ssw', 'sot': 'sot', 'sun': 'sun', 'swe': 'swe', 'swa': 'swa',\n  'tam': 'tam', 'tel': 'tel', 'tgk': 'tgk', 'tha': 'tha', 'tir': 'tir',\n  'tuk': 'tuk', 'tgl': 'tgl', 'tsn': 'tsn', 'ton': 'ton', 'tur': 'tur',\n  'tso': 'tso', 'tat': 'tat', 'twi': 'twi', 'tah': 'tah', 'uig': 'uig',\n  'ukr': 'ukr', 'urd': 'urd', 'uzb': 'uzb', 'ven': 'ven', 'vie': 'vie',\n  'vol': 'vol', 'wln': 'wln', 'wol': 'wol', 'xho': 'xho', 'yid': 'yid',\n  'yor': 'yor', 'zha': 'zha', 'chi': 'chi', 'zho': 'zho', 'zul': 'zul',\n};\n\nexport default ValidLanguages;\n","// @flow\n\nconst scorm12 = {\n  CMIString256: '^.{0,255}$',\n  CMIString4096: '^.{0,4096}$',\n  CMITime: '^(?:(?:([01]?\\\\d|2[0-3]):)?([0-5]?\\\\d):)?([0-5]?\\\\d)(?:\\.(\\\\d+)?)?$', // eslint-disable-line\n  CMITimespan: '^([0-9]{2,}):([0-9]{2}):([0-9]{2})(\\.[0-9]{1,2})?$', // eslint-disable-line\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{0,3})(\\.[0-9]*)?$', // eslint-disable-line\n  CMIIdentifier: '^[\\\\u0021-\\\\u007E\\\\s]{0,255}$',\n  CMIFeedback: '^.{0,255}$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMIStatus: '^(passed|completed|failed|incomplete|browsed)$',\n  CMIStatus2: '^(passed|completed|failed|incomplete|browsed|not attempted)$',\n  CMIExit: '^(time-out|suspend|logout|)$',\n  CMIType: '^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$',\n  CMIResult: '^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$', // eslint-disable-line\n  NAVEvent: '^(previous|continue)$',\n\n  // Data ranges\n  score_range: '0#100',\n  audio_range: '-1#100',\n  speed_range: '-100#100',\n  weighting_range: '-100#100',\n  text_range: '-1#1',\n};\n\nconst aicc = {\n  ...scorm12, ...{\n    CMIIdentifier: '^\\\\w{1,255}$',\n  },\n};\n\nconst scorm2004 = {\n  CMIString200: '^[\\\\u0000-\\\\uFFFF]{0,200}$',\n  CMIString250: '^[\\\\u0000-\\\\uFFFF]{0,250}$',\n  CMIString1000: '^[\\\\u0000-\\\\uFFFF]{0,1000}$',\n  CMIString4000: '^[\\\\u0000-\\\\uFFFF]{0,4000}$',\n  CMIString64000: '^[\\\\u0000-\\\\uFFFF]{0,64000}$',\n  CMILang: '^([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?$|^$', // eslint-disable-line\n  CMILangString250: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,250}$)?$', // eslint-disable-line\n  CMILangcr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\}))(.*?)$', // eslint-disable-line\n  CMILangString250cr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\})?(.{0,250})?)?$', // eslint-disable-line\n  CMILangString4000: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,4000}$)?$', // eslint-disable-line\n  CMITime: '^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,2})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$',\n  CMITimespan: '^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$',\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$',\n  CMIIdentifier: '^\\\\S{1,250}[a-zA-Z0-9]$',\n  CMIShortIdentifier: '^[\\\\w\\\\.\\\\-\\\\_]{1,250}$', // eslint-disable-line\n  CMILongIdentifier: '^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$', // need to re-examine this\n  CMIFeedback: '^.*$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n  CMIIndexStore: '.N(\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMICStatus: '^(completed|incomplete|not attempted|unknown)$',\n  CMISStatus: '^(passed|failed|unknown)$',\n  CMIExit: '^(time-out|suspend|logout|normal)$',\n  CMIType: '^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$',\n  CMIResult: '^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$',\n  NAVEvent: '^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|\\{target=\\\\S{0,200}[a-zA-Z0-9]\\}choice|jump)$', // eslint-disable-line\n  NAVBoolean: '^(unknown|true|false$)',\n  NAVTarget: '^(previous|continue|choice.{target=\\\\S{0,200}[a-zA-Z0-9]})$',\n\n  // Data ranges\n  scaled_range: '-1#1',\n  audio_range: '0#*',\n  speed_range: '0#*',\n  text_range: '-1#1',\n  progress_range: '0#1',\n};\n\nconst Regex = {\n  aicc: aicc,\n  scorm12: scorm12,\n  scorm2004: scorm2004,\n};\n\nexport default Regex;\n","// @flow\nimport Regex from './regex';\n\nconst scorm2004_regex = Regex.scorm2004;\n\nconst learner = {\n  'true-false': {\n    format: '^true$|^false$',\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'choice': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n  },\n  'fill-in': {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'long-fill-in': {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'matching': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'performance': {\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'sequencing': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'likert': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'numeric': {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'other': {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n};\n\nconst correct = {\n  'true-false': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: '^true$|^false$',\n    limit: 1,\n  },\n  'choice': {\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'fill-in': {\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  'long-fill-in': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  'matching': {\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  'performance': {\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n  },\n  'sequencing': {\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'likert': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  'numeric': {\n    max: 2,\n    delimiter: '[:]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  'other': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nconst Responses = {\n  learner: learner,\n  correct: correct,\n};\n\nexport default Responses;\n","// @flow\n\n/**\n * Data Validation Exception\n */\nexport class ValidationError extends Error {\n  /**\n   * Constructor to take in an error message and code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number, ...rest) {\n    super(...rest);\n    this.#errorCode = errorCode;\n  }\n\n  #errorCode;\n\n  /**\n   * Getter for #errorCode\n   * @return {number}\n   */\n  get errorCode() {\n    return this.#errorCode;\n  }\n}\n","import Scorm2004API from './Scorm2004API';\nimport Scorm12API from './Scorm12API';\nimport AICC from './AICC';\n\nwindow.Scorm12API = Scorm12API;\nwindow.Scorm2004API = Scorm2004API;\nwindow.AICC = AICC;\n","// @flow\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\nconst designations = [\n  ['D', SECONDS_PER_DAY],\n  ['H', SECONDS_PER_HOUR],\n  ['M', SECONDS_PER_MINUTE],\n  ['S', SECONDS_PER_SECOND],\n];\n\n/**\n * Converts a Number to a String of HH:MM:SS\n *\n * @param {Number} totalSeconds\n * @return {string}\n */\nexport function getSecondsAsHHMMSS(totalSeconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return '00:00:00';\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = '';\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n    msStr = '.' + msStr.split('.')[1];\n  }\n\n  return (hours + ':' + minutes + ':' + seconds).replace(/\\b\\d\\b/g,\n      '0$&') + msStr;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {Number} seconds\n * @return {String}\n */\nexport function getSecondsAsISODuration(seconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return 'PT0S';\n  }\n\n  let duration = 'P';\n  let remainder = seconds;\n\n  designations.forEach(([sign, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n\n    remainder = remainder % current_seconds;\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (sign === 'S' && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      if ((duration.indexOf('D') > 0 ||\n          sign === 'H' || sign === 'M' || sign === 'S') &&\n          duration.indexOf('T') === -1) {\n        duration += 'T';\n      }\n      duration += `${value}${sign}`;\n    }\n  });\n\n  return duration;\n}\n\n/**\n * Calculate the number of seconds from HH:MM:SS.DDDDDD\n *\n * @param {string} timeString\n * @param {RegExp} timeRegex\n * @return {number}\n */\nexport function getTimeAsSeconds(timeString: String, timeRegex: RegExp) {\n  if (!timeString || typeof timeString !== 'string' ||\n      !timeString.match(timeRegex)) {\n    return 0;\n  }\n  const parts = timeString.split(':');\n  const hours = Number(parts[0]);\n  const minutes = Number(parts[1]);\n  const seconds = Number(parts[2]);\n  return (hours * 3600) + (minutes * 60) + seconds;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {string} duration\n * @param {RegExp} durationRegex\n * @return {number}\n */\nexport function getDurationAsSeconds(duration: String, durationRegex: RegExp) {\n  if (!duration || !duration.match(durationRegex)) {\n    return 0;\n  }\n\n  const [, years, months, , days, hours, minutes, seconds] = new RegExp(\n      durationRegex).exec(duration) || [];\n\n  let result = 0.0;\n\n  result += (Number(seconds) * 1.0 || 0.0);\n  result += (Number(minutes) * 60.0 || 0.0);\n  result += (Number(hours) * 3600.0 || 0.0);\n  result += (Number(days) * (60 * 60 * 24.0) || 0.0);\n  result += (Number(years) * (60 * 60 * 24 * 365.0) || 0.0);\n\n  return result;\n}\n\n/**\n * Adds together two ISO8601 Duration strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} durationRegex\n * @return {string}\n */\nexport function addTwoDurations(\n    first: String,\n    second: String,\n    durationRegex: RegExp) {\n  return getSecondsAsISODuration(\n      getDurationAsSeconds(first, durationRegex) +\n      getDurationAsSeconds(second, durationRegex),\n  );\n}\n\n/**\n * Add together two HH:MM:SS.DD strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} timeRegex\n * @return {string}\n */\nexport function addHHMMSSTimeStrings(\n    first: String,\n    second: String,\n    timeRegex: RegExp) {\n  return getSecondsAsHHMMSS(\n      getTimeAsSeconds(first, timeRegex) +\n      getTimeAsSeconds(\n          second, timeRegex),\n  );\n}\n\n/**\n * Flatten a JSON object down to string paths for each values\n * @param {object} data\n * @return {object}\n */\nexport function flatten(data) {\n  const result = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur, prop) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      for (let i = 0, l = cur.length; i < l; i++) {\n        recurse(cur[i], prop + '[' + i + ']');\n        if (l === 0) result[prop] = [];\n      }\n    } else {\n      let isEmpty = true;\n      for (const p in cur) {\n        if ({}.hasOwnProperty.call(cur, p)) {\n          isEmpty = false;\n          recurse(cur[p], prop ? prop + '.' + p : p);\n        }\n      }\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, '');\n  return result;\n}\n\n/**\n * Un-flatten a flat JSON object\n * @param {object} data\n * @return {object}\n */\nexport function unflatten(data) {\n  'use strict';\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const regex = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n  const result = {};\n  for (const p in data) {\n    if ({}.hasOwnProperty.call(data, p)) {\n      let cur = result;\n      let prop = '';\n      let m = regex.exec(p);\n      while (m) {\n        cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n        prop = m[2] || m[1];\n        m = regex.exec(p);\n      }\n      cur[prop] = data[p];\n    }\n  }\n  return result[''] || result;\n}\n\n/**\n * Counts the number of decimal places\n * @param {number} num\n * @return {number}\n */\nexport function countDecimals(num: number) {\n  if (Math.floor(num) === num || String(num).indexOf('.') < 0) return 0;\n  const parts = num.toString().split('.')[1];\n  return parts.length || 0;\n}\n"]}